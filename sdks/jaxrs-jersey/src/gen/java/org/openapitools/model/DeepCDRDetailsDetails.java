/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * DeepCDRDetailsDetails
 */
@JsonPropertyOrder({
  DeepCDRDetailsDetails.JSON_PROPERTY_ACTION,
  DeepCDRDetailsDetails.JSON_PROPERTY_OBJECT_NAME,
  DeepCDRDetailsDetails.JSON_PROPERTY_COUNT,
  DeepCDRDetailsDetails.JSON_PROPERTY_OBJECT_DETAILS,
  DeepCDRDetailsDetails.JSON_PROPERTY_FILE_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class DeepCDRDetailsDetails   {
  /**
   * The type of action that was performed
   */
  public enum ActionEnum {
    SANITIZED("sanitized"),
    
    REMOVED("removed");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION = "action";
  @JsonProperty(JSON_PROPERTY_ACTION)
  private ActionEnum action;

  public static final String JSON_PROPERTY_OBJECT_NAME = "object_name";
  @JsonProperty(JSON_PROPERTY_OBJECT_NAME)
  private String objectName;

  public static final String JSON_PROPERTY_COUNT = "count";
  @JsonProperty(JSON_PROPERTY_COUNT)
  private Integer count;

  public static final String JSON_PROPERTY_OBJECT_DETAILS = "object_details";
  @JsonProperty(JSON_PROPERTY_OBJECT_DETAILS)
  private String objectDetails;

  public static final String JSON_PROPERTY_FILE_NAME = "file_name";
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  private String fileName;

  public DeepCDRDetailsDetails action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * The type of action that was performed
   * @return action
   **/
  @JsonProperty("action")
  @ApiModelProperty(example = "sanitized", required = true, value = "The type of action that was performed")
  @NotNull 
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public DeepCDRDetailsDetails objectName(String objectName) {
    this.objectName = objectName;
    return this;
  }

  /**
   * The object type that was sanitized/removed.
   * @return objectName
   **/
  @JsonProperty("object_name")
  @ApiModelProperty(example = "XML content", required = true, value = "The object type that was sanitized/removed.")
  @NotNull 
  public String getObjectName() {
    return objectName;
  }

  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }

  public DeepCDRDetailsDetails count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The number of objects that were sanitized/removed.
   * @return count
   **/
  @JsonProperty("count")
  @ApiModelProperty(example = "1", value = "The number of objects that were sanitized/removed.")
  
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public DeepCDRDetailsDetails objectDetails(String objectDetails) {
    this.objectDetails = objectDetails;
    return this;
  }

  /**
   * Additional information about the sanitized object
   * @return objectDetails
   **/
  @JsonProperty("object_details")
  @ApiModelProperty(example = "\"<ddeLink xmlns:r=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\\" ddeService=\\\"calc\\\" ddeTopic=\\\"topic\\\" xmlns=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\">\\r\\n  <ddeItems>\\r\\n    <ddeItem name=\\\"_xlbgnm.A3\\\" advise=\\\"1\\\" />\\r\\n    <ddeItem name=\\\"StdDocumentName\\\" ole=\\\"1\\\" advise=\\\"1\\\" />\\r\\n  </ddeItems>\\r\\n</ddeLink>\" ", value = "Additional information about the sanitized object")
  
  public String getObjectDetails() {
    return objectDetails;
  }

  public void setObjectDetails(String objectDetails) {
    this.objectDetails = objectDetails;
  }

  public DeepCDRDetailsDetails fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * If an embedded file was sanitized.
   * @return fileName
   **/
  @JsonProperty("file_name")
  @ApiModelProperty(example = "Microsoft_Excel_97-2003_Worksheet.xls", value = "If an embedded file was sanitized.")
  
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeepCDRDetailsDetails deepCDRDetailsDetails = (DeepCDRDetailsDetails) o;
    return Objects.equals(this.action, deepCDRDetailsDetails.action) &&
        Objects.equals(this.objectName, deepCDRDetailsDetails.objectName) &&
        Objects.equals(this.count, deepCDRDetailsDetails.count) &&
        Objects.equals(this.objectDetails, deepCDRDetailsDetails.objectDetails) &&
        Objects.equals(this.fileName, deepCDRDetailsDetails.fileName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, objectName, count, objectDetails, fileName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeepCDRDetailsDetails {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    objectDetails: ").append(toIndentedString(objectDetails)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

