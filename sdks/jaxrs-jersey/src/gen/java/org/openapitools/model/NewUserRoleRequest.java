/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.model.NewUserRoleRequestRights;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * MetaDefender user role describing object.
 */
@ApiModel(description = "MetaDefender user role describing object.")
@JsonPropertyOrder({
  NewUserRoleRequest.JSON_PROPERTY_NAME,
  NewUserRoleRequest.JSON_PROPERTY_DISPLAY_NAME,
  NewUserRoleRequest.JSON_PROPERTY_RIGHTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class NewUserRoleRequest   {
  public static final String JSON_PROPERTY_NAME = "name";
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  private String displayName;

  public static final String JSON_PROPERTY_RIGHTS = "rights";
  @JsonProperty(JSON_PROPERTY_RIGHTS)
  private NewUserRoleRequestRights rights;

  public NewUserRoleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name identifier of the role
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(example = "new_role", value = "The name identifier of the role")
  
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NewUserRoleRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The extended name showed in the Management Console.
   * @return displayName
   **/
  @JsonProperty("display_name")
  @ApiModelProperty(example = "New MetaDefender User Role", value = "The extended name showed in the Management Console.")
  
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public NewUserRoleRequest rights(NewUserRoleRequestRights rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Get rights
   * @return rights
   **/
  @JsonProperty("rights")
  @ApiModelProperty(value = "")
  @Valid 
  public NewUserRoleRequestRights getRights() {
    return rights;
  }

  public void setRights(NewUserRoleRequestRights rights) {
    this.rights = rights;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewUserRoleRequest newUserRoleRequest = (NewUserRoleRequest) o;
    return Objects.equals(this.name, newUserRoleRequest.name) &&
        Objects.equals(this.displayName, newUserRoleRequest.displayName) &&
        Objects.equals(this.rights, newUserRoleRequest.rights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, rights);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewUserRoleRequest {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

