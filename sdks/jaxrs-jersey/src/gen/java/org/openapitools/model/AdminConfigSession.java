/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * API object for /admin/config/session
 */
@ApiModel(description = "API object for /admin/config/session")
@JsonPropertyOrder({
  AdminConfigSession.JSON_PROPERTY_ABSOLUTE_SESSION_TIMEOUT,
  AdminConfigSession.JSON_PROPERTY_ALLOW_CROSS_IP_SESSIONS,
  AdminConfigSession.JSON_PROPERTY_ALLOW_DUPLICATE_SESSION,
  AdminConfigSession.JSON_PROPERTY_SESSION_TIMEOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class AdminConfigSession   {
  public static final String JSON_PROPERTY_ABSOLUTE_SESSION_TIMEOUT = "absoluteSessionTimeout";
  @JsonProperty(JSON_PROPERTY_ABSOLUTE_SESSION_TIMEOUT)
  private Integer absoluteSessionTimeout;

  public static final String JSON_PROPERTY_ALLOW_CROSS_IP_SESSIONS = "allowCrossIpSessions";
  @JsonProperty(JSON_PROPERTY_ALLOW_CROSS_IP_SESSIONS)
  private Boolean allowCrossIpSessions;

  public static final String JSON_PROPERTY_ALLOW_DUPLICATE_SESSION = "allowDuplicateSession";
  @JsonProperty(JSON_PROPERTY_ALLOW_DUPLICATE_SESSION)
  private Boolean allowDuplicateSession;

  public static final String JSON_PROPERTY_SESSION_TIMEOUT = "sessionTimeout";
  @JsonProperty(JSON_PROPERTY_SESSION_TIMEOUT)
  private Integer sessionTimeout;

  public AdminConfigSession absoluteSessionTimeout(Integer absoluteSessionTimeout) {
    this.absoluteSessionTimeout = absoluteSessionTimeout;
    return this;
  }

  /**
   * The interval (in milliseconds) for overall session length timeout (regardless of activity).
   * @return absoluteSessionTimeout
   **/
  @JsonProperty("absoluteSessionTimeout")
  @ApiModelProperty(example = "0", value = "The interval (in milliseconds) for overall session length timeout (regardless of activity).")
  
  public Integer getAbsoluteSessionTimeout() {
    return absoluteSessionTimeout;
  }

  public void setAbsoluteSessionTimeout(Integer absoluteSessionTimeout) {
    this.absoluteSessionTimeout = absoluteSessionTimeout;
  }

  public AdminConfigSession allowCrossIpSessions(Boolean allowCrossIpSessions) {
    this.allowCrossIpSessions = allowCrossIpSessions;
    return this;
  }

  /**
   * Allow requests from the same user to come from different IPs.
   * @return allowCrossIpSessions
   **/
  @JsonProperty("allowCrossIpSessions")
  @ApiModelProperty(example = "true", value = "Allow requests from the same user to come from different IPs.")
  
  public Boolean getAllowCrossIpSessions() {
    return allowCrossIpSessions;
  }

  public void setAllowCrossIpSessions(Boolean allowCrossIpSessions) {
    this.allowCrossIpSessions = allowCrossIpSessions;
  }

  public AdminConfigSession allowDuplicateSession(Boolean allowDuplicateSession) {
    this.allowDuplicateSession = allowDuplicateSession;
    return this;
  }

  /**
   * Allow same user to have multiple active sessions.
   * @return allowDuplicateSession
   **/
  @JsonProperty("allowDuplicateSession")
  @ApiModelProperty(example = "true", value = "Allow same user to have multiple active sessions.")
  
  public Boolean getAllowDuplicateSession() {
    return allowDuplicateSession;
  }

  public void setAllowDuplicateSession(Boolean allowDuplicateSession) {
    this.allowDuplicateSession = allowDuplicateSession;
  }

  public AdminConfigSession sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

  /**
   * The interval (in milliseconds) for the user&#39;s session timeout, based on last activity. Timer starts after the last activity for the apikey.
   * @return sessionTimeout
   **/
  @JsonProperty("sessionTimeout")
  @ApiModelProperty(example = "300000", value = "The interval (in milliseconds) for the user's session timeout, based on last activity. Timer starts after the last activity for the apikey.")
  
  public Integer getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminConfigSession adminConfigSession = (AdminConfigSession) o;
    return Objects.equals(this.absoluteSessionTimeout, adminConfigSession.absoluteSessionTimeout) &&
        Objects.equals(this.allowCrossIpSessions, adminConfigSession.allowCrossIpSessions) &&
        Objects.equals(this.allowDuplicateSession, adminConfigSession.allowDuplicateSession) &&
        Objects.equals(this.sessionTimeout, adminConfigSession.sessionTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteSessionTimeout, allowCrossIpSessions, allowDuplicateSession, sessionTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminConfigSession {\n");
    
    sb.append("    absoluteSessionTimeout: ").append(toIndentedString(absoluteSessionTimeout)).append("\n");
    sb.append("    allowCrossIpSessions: ").append(toIndentedString(allowCrossIpSessions)).append("\n");
    sb.append("    allowDuplicateSession: ").append(toIndentedString(allowDuplicateSession)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

