/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.BatchResponseBatchFilesFilesInBatch;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * aaaaa
 */
@ApiModel(description = "aaaaa")
@JsonPropertyOrder({
  BatchResponseBatchFiles.JSON_PROPERTY_BATCH_COUNT,
  BatchResponseBatchFiles.JSON_PROPERTY_FILES_IN_BATCH,
  BatchResponseBatchFiles.JSON_PROPERTY_FIRST_INDEX,
  BatchResponseBatchFiles.JSON_PROPERTY_PAGE_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class BatchResponseBatchFiles   {
  public static final String JSON_PROPERTY_BATCH_COUNT = "batch_count";
  @JsonProperty(JSON_PROPERTY_BATCH_COUNT)
  private Integer batchCount;

  public static final String JSON_PROPERTY_FILES_IN_BATCH = "files_in_batch";
  @JsonProperty(JSON_PROPERTY_FILES_IN_BATCH)
  private List<BatchResponseBatchFilesFilesInBatch> filesInBatch = null;

  public static final String JSON_PROPERTY_FIRST_INDEX = "first_index";
  @JsonProperty(JSON_PROPERTY_FIRST_INDEX)
  private Integer firstIndex;

  public static final String JSON_PROPERTY_PAGE_SIZE = "page_size";
  @JsonProperty(JSON_PROPERTY_PAGE_SIZE)
  private Integer pageSize;

  public BatchResponseBatchFiles batchCount(Integer batchCount) {
    this.batchCount = batchCount;
    return this;
  }

  /**
   * How many files/entries in the batch.
   * @return batchCount
   **/
  @JsonProperty("batch_count")
  @ApiModelProperty(example = "4", value = "How many files/entries in the batch.")
  
  public Integer getBatchCount() {
    return batchCount;
  }

  public void setBatchCount(Integer batchCount) {
    this.batchCount = batchCount;
  }

  public BatchResponseBatchFiles filesInBatch(List<BatchResponseBatchFilesFilesInBatch> filesInBatch) {
    this.filesInBatch = filesInBatch;
    return this;
  }

  public BatchResponseBatchFiles addFilesInBatchItem(BatchResponseBatchFilesFilesInBatch filesInBatchItem) {
    if (this.filesInBatch == null) {
      this.filesInBatch = new ArrayList<BatchResponseBatchFilesFilesInBatch>();
    }
    this.filesInBatch.add(filesInBatchItem);
    return this;
  }

  /**
   * The list of files in this batch.
   * @return filesInBatch
   **/
  @JsonProperty("files_in_batch")
  @ApiModelProperty(value = "The list of files in this batch.")
  @Valid 
  public List<BatchResponseBatchFilesFilesInBatch> getFilesInBatch() {
    return filesInBatch;
  }

  public void setFilesInBatch(List<BatchResponseBatchFilesFilesInBatch> filesInBatch) {
    this.filesInBatch = filesInBatch;
  }

  public BatchResponseBatchFiles firstIndex(Integer firstIndex) {
    this.firstIndex = firstIndex;
    return this;
  }

  /**
   * The starting index in the batch. Used for pagination.
   * @return firstIndex
   **/
  @JsonProperty("first_index")
  @ApiModelProperty(example = "0", value = "The starting index in the batch. Used for pagination.")
  
  public Integer getFirstIndex() {
    return firstIndex;
  }

  public void setFirstIndex(Integer firstIndex) {
    this.firstIndex = firstIndex;
  }

  public BatchResponseBatchFiles pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The number of entries per page.
   * @return pageSize
   **/
  @JsonProperty("page_size")
  @ApiModelProperty(example = "50", value = "The number of entries per page.")
  
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchResponseBatchFiles batchResponseBatchFiles = (BatchResponseBatchFiles) o;
    return Objects.equals(this.batchCount, batchResponseBatchFiles.batchCount) &&
        Objects.equals(this.filesInBatch, batchResponseBatchFiles.filesInBatch) &&
        Objects.equals(this.firstIndex, batchResponseBatchFiles.firstIndex) &&
        Objects.equals(this.pageSize, batchResponseBatchFiles.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchCount, filesInBatch, firstIndex, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchResponseBatchFiles {\n");
    
    sb.append("    batchCount: ").append(toIndentedString(batchCount)).append("\n");
    sb.append("    filesInBatch: ").append(toIndentedString(filesInBatch)).append("\n");
    sb.append("    firstIndex: ").append(toIndentedString(firstIndex)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

