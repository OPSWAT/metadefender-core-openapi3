/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Overall batch process result
 */
@ApiModel(description = "Overall batch process result")
@JsonPropertyOrder({
  BatchResponseProcessInfo.JSON_PROPERTY_BLOCKED_REASON,
  BatchResponseProcessInfo.JSON_PROPERTY_FILE_TYPE_SKIPPED_SCAN,
  BatchResponseProcessInfo.JSON_PROPERTY_PROFILE,
  BatchResponseProcessInfo.JSON_PROPERTY_RESULT,
  BatchResponseProcessInfo.JSON_PROPERTY_USER_AGENT,
  BatchResponseProcessInfo.JSON_PROPERTY_USERNAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class BatchResponseProcessInfo   {
  public static final String JSON_PROPERTY_BLOCKED_REASON = "blocked_reason";
  @JsonProperty(JSON_PROPERTY_BLOCKED_REASON)
  private String blockedReason;

  public static final String JSON_PROPERTY_FILE_TYPE_SKIPPED_SCAN = "file_type_skipped_scan";
  @JsonProperty(JSON_PROPERTY_FILE_TYPE_SKIPPED_SCAN)
  private Boolean fileTypeSkippedScan;

  public static final String JSON_PROPERTY_PROFILE = "profile";
  @JsonProperty(JSON_PROPERTY_PROFILE)
  private String profile;

  public static final String JSON_PROPERTY_RESULT = "result";
  @JsonProperty(JSON_PROPERTY_RESULT)
  private String result;

  public static final String JSON_PROPERTY_USER_AGENT = "user_agent";
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  private String userAgent;

  public static final String JSON_PROPERTY_USERNAME = "username";
  @JsonProperty(JSON_PROPERTY_USERNAME)
  private String username;

  public BatchResponseProcessInfo blockedReason(String blockedReason) {
    this.blockedReason = blockedReason;
    return this;
  }

  /**
   * Provides the reason why the file is blocked (if so).
   * @return blockedReason
   **/
  @JsonProperty("blocked_reason")
  @ApiModelProperty(example = "Infected", value = "Provides the reason why the file is blocked (if so).")
  
  public String getBlockedReason() {
    return blockedReason;
  }

  public void setBlockedReason(String blockedReason) {
    this.blockedReason = blockedReason;
  }

  public BatchResponseProcessInfo fileTypeSkippedScan(Boolean fileTypeSkippedScan) {
    this.fileTypeSkippedScan = fileTypeSkippedScan;
    return this;
  }

  /**
   * Indicates if the input file&#39;s detected type was configured to skip scanning.
   * @return fileTypeSkippedScan
   **/
  @JsonProperty("file_type_skipped_scan")
  @ApiModelProperty(example = "false", value = "Indicates if the input file's detected type was configured to skip scanning.")
  
  public Boolean getFileTypeSkippedScan() {
    return fileTypeSkippedScan;
  }

  public void setFileTypeSkippedScan(Boolean fileTypeSkippedScan) {
    this.fileTypeSkippedScan = fileTypeSkippedScan;
  }

  public BatchResponseProcessInfo profile(String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * The used rule name.
   * @return profile
   **/
  @JsonProperty("profile")
  @ApiModelProperty(example = "File process", value = "The used rule name.")
  
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }

  public BatchResponseProcessInfo result(String result) {
    this.result = result;
    return this;
  }

  /**
   * The final result of processing the file (Allowed / Blocked / Processing).
   * @return result
   **/
  @JsonProperty("result")
  @ApiModelProperty(example = "Blocked", value = "The final result of processing the file (Allowed / Blocked / Processing).")
  
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public BatchResponseProcessInfo userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Identifier for the REST Client that calls the API.
   * @return userAgent
   **/
  @JsonProperty("user_agent")
  @ApiModelProperty(example = "mdicapserver", value = "Identifier for the REST Client that calls the API.")
  
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }

  public BatchResponseProcessInfo username(String username) {
    this.username = username;
    return this;
  }

  /**
   * User identifier who submitted scan request earlier.
   * @return username
   **/
  @JsonProperty("username")
  @ApiModelProperty(example = "LOCAL/admin", value = "User identifier who submitted scan request earlier.")
  
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchResponseProcessInfo batchResponseProcessInfo = (BatchResponseProcessInfo) o;
    return Objects.equals(this.blockedReason, batchResponseProcessInfo.blockedReason) &&
        Objects.equals(this.fileTypeSkippedScan, batchResponseProcessInfo.fileTypeSkippedScan) &&
        Objects.equals(this.profile, batchResponseProcessInfo.profile) &&
        Objects.equals(this.result, batchResponseProcessInfo.result) &&
        Objects.equals(this.userAgent, batchResponseProcessInfo.userAgent) &&
        Objects.equals(this.username, batchResponseProcessInfo.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockedReason, fileTypeSkippedScan, profile, result, userAgent, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchResponseProcessInfo {\n");
    
    sb.append("    blockedReason: ").append(toIndentedString(blockedReason)).append("\n");
    sb.append("    fileTypeSkippedScan: ").append(toIndentedString(fileTypeSkippedScan)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

