/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.model.ProcessingResultsIndexEnum;
import org.openapitools.model.ProcessingResultsStringEnum;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Metascan analysis result.
 */
@ApiModel(description = "Metascan analysis result.")
@JsonPropertyOrder({
  BatchResponseScanResults.JSON_PROPERTY_BATCH_ID,
  BatchResponseScanResults.JSON_PROPERTY_SCAN_ALL_RESULT_A,
  BatchResponseScanResults.JSON_PROPERTY_SCAN_ALL_RESULT_I,
  BatchResponseScanResults.JSON_PROPERTY_START_TIME,
  BatchResponseScanResults.JSON_PROPERTY_TOTAL_AVS,
  BatchResponseScanResults.JSON_PROPERTY_TOTAL_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class BatchResponseScanResults   {
  public static final String JSON_PROPERTY_BATCH_ID = "batch_id";
  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  private String batchId;

  public static final String JSON_PROPERTY_SCAN_ALL_RESULT_A = "scan_all_result_a";
  @JsonProperty(JSON_PROPERTY_SCAN_ALL_RESULT_A)
  private ProcessingResultsStringEnum scanAllResultA = null;

  public static final String JSON_PROPERTY_SCAN_ALL_RESULT_I = "scan_all_result_i";
  @JsonProperty(JSON_PROPERTY_SCAN_ALL_RESULT_I)
  private ProcessingResultsIndexEnum scanAllResultI = null;

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  @JsonProperty(JSON_PROPERTY_START_TIME)
  private String startTime;

  public static final String JSON_PROPERTY_TOTAL_AVS = "total_avs";
  @JsonProperty(JSON_PROPERTY_TOTAL_AVS)
  private Integer totalAvs;

  public static final String JSON_PROPERTY_TOTAL_TIME = "total_time";
  @JsonProperty(JSON_PROPERTY_TOTAL_TIME)
  private Integer totalTime;

  public BatchResponseScanResults batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * The batch unique identifer
   * @return batchId
   **/
  @JsonProperty("batch_id")
  @ApiModelProperty(example = "b7cc760038324b02908a5c111cb1563d", value = "The batch unique identifer")
  
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }

  public BatchResponseScanResults scanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    this.scanAllResultA = scanAllResultA;
    return this;
  }

  /**
   * The overall scan result as string
   * @return scanAllResultA
   **/
  @JsonProperty("scan_all_result_a")
  @ApiModelProperty(example = "Infected", value = "The overall scan result as string")
  @Valid 
  public ProcessingResultsStringEnum getScanAllResultA() {
    return scanAllResultA;
  }

  public void setScanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    this.scanAllResultA = scanAllResultA;
  }

  public BatchResponseScanResults scanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    this.scanAllResultI = scanAllResultI;
    return this;
  }

  /**
   * The overall scan result as index in the Processing Results table.
   * @return scanAllResultI
   **/
  @JsonProperty("scan_all_result_i")
  @ApiModelProperty(example = "1", value = "The overall scan result as index in the Processing Results table.")
  @Valid 
  public ProcessingResultsIndexEnum getScanAllResultI() {
    return scanAllResultI;
  }

  public void setScanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    this.scanAllResultI = scanAllResultI;
  }

  public BatchResponseScanResults startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Timestamp when the scanning process starts.
   * @return startTime
   **/
  @JsonProperty("start_time")
  @ApiModelProperty(example = "2020-03-12T08:37:05.427Z", value = "Timestamp when the scanning process starts.")
  
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public BatchResponseScanResults totalAvs(Integer totalAvs) {
    this.totalAvs = totalAvs;
    return this;
  }

  /**
   * Total number of scanning engines used as part of this analysis.
   * @return totalAvs
   **/
  @JsonProperty("total_avs")
  @ApiModelProperty(example = "0", value = "Total number of scanning engines used as part of this analysis.")
  
  public Integer getTotalAvs() {
    return totalAvs;
  }

  public void setTotalAvs(Integer totalAvs) {
    this.totalAvs = totalAvs;
  }

  public BatchResponseScanResults totalTime(Integer totalTime) {
    this.totalTime = totalTime;
    return this;
  }

  /**
   * Total time elapsed during scan (in milliseconds).
   * @return totalTime
   **/
  @JsonProperty("total_time")
  @ApiModelProperty(example = "18403", value = "Total time elapsed during scan (in milliseconds).")
  
  public Integer getTotalTime() {
    return totalTime;
  }

  public void setTotalTime(Integer totalTime) {
    this.totalTime = totalTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchResponseScanResults batchResponseScanResults = (BatchResponseScanResults) o;
    return Objects.equals(this.batchId, batchResponseScanResults.batchId) &&
        Objects.equals(this.scanAllResultA, batchResponseScanResults.scanAllResultA) &&
        Objects.equals(this.scanAllResultI, batchResponseScanResults.scanAllResultI) &&
        Objects.equals(this.startTime, batchResponseScanResults.startTime) &&
        Objects.equals(this.totalAvs, batchResponseScanResults.totalAvs) &&
        Objects.equals(this.totalTime, batchResponseScanResults.totalTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, scanAllResultA, scanAllResultI, startTime, totalAvs, totalTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchResponseScanResults {\n");
    
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    scanAllResultA: ").append(toIndentedString(scanAllResultA)).append("\n");
    sb.append("    scanAllResultI: ").append(toIndentedString(scanAllResultI)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalAvs: ").append(toIndentedString(totalAvs)).append("\n");
    sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

