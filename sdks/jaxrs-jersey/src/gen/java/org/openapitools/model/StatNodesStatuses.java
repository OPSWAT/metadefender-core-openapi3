/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.StatNodesEngines;
import org.openapitools.model.StatNodesIssues;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Node status
 */
@ApiModel(description = "Node status")
@JsonPropertyOrder({
  StatNodesStatuses.JSON_PROPERTY_ADDRESS,
  StatNodesStatuses.JSON_PROPERTY_CPU_CORES,
  StatNodesStatuses.JSON_PROPERTY_ENGINES,
  StatNodesStatuses.JSON_PROPERTY_FREE_DISK_SPACE,
  StatNodesStatuses.JSON_PROPERTY_ID,
  StatNodesStatuses.JSON_PROPERTY_ISSUES,
  StatNodesStatuses.JSON_PROPERTY_LOAD,
  StatNodesStatuses.JSON_PROPERTY_OS,
  StatNodesStatuses.JSON_PROPERTY_SCAN_QUEUE,
  StatNodesStatuses.JSON_PROPERTY_TOTAL_MEMORY,
  StatNodesStatuses.JSON_PROPERTY_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class StatNodesStatuses   {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  private String address;

  public static final String JSON_PROPERTY_CPU_CORES = "cpu_cores";
  @JsonProperty(JSON_PROPERTY_CPU_CORES)
  private Integer cpuCores;

  public static final String JSON_PROPERTY_ENGINES = "engines";
  @JsonProperty(JSON_PROPERTY_ENGINES)
  private List<StatNodesEngines> engines = null;

  public static final String JSON_PROPERTY_FREE_DISK_SPACE = "free_disk_space";
  @JsonProperty(JSON_PROPERTY_FREE_DISK_SPACE)
  private Integer freeDiskSpace;

  public static final String JSON_PROPERTY_ID = "id";
  @JsonProperty(JSON_PROPERTY_ID)
  private String id;

  public static final String JSON_PROPERTY_ISSUES = "issues";
  @JsonProperty(JSON_PROPERTY_ISSUES)
  private List<StatNodesIssues> issues = null;

  public static final String JSON_PROPERTY_LOAD = "load";
  @JsonProperty(JSON_PROPERTY_LOAD)
  private Integer load;

  public static final String JSON_PROPERTY_OS = "os";
  @JsonProperty(JSON_PROPERTY_OS)
  private String os;

  public static final String JSON_PROPERTY_SCAN_QUEUE = "scan_queue";
  @JsonProperty(JSON_PROPERTY_SCAN_QUEUE)
  private Integer scanQueue;

  public static final String JSON_PROPERTY_TOTAL_MEMORY = "total_memory";
  @JsonProperty(JSON_PROPERTY_TOTAL_MEMORY)
  private Integer totalMemory;

  public static final String JSON_PROPERTY_VERSION = "version";
  @JsonProperty(JSON_PROPERTY_VERSION)
  private String version;

  public StatNodesStatuses address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The location of the Node. If local, is empty string.
   * @return address
   **/
  @JsonProperty("address")
  @ApiModelProperty(example = "", value = "The location of the Node. If local, is empty string.")
  
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public StatNodesStatuses cpuCores(Integer cpuCores) {
    this.cpuCores = cpuCores;
    return this;
  }

  /**
   * The number of CPU Cores allocated to this Node.
   * @return cpuCores
   **/
  @JsonProperty("cpu_cores")
  @ApiModelProperty(example = "8", value = "The number of CPU Cores allocated to this Node.")
  
  public Integer getCpuCores() {
    return cpuCores;
  }

  public void setCpuCores(Integer cpuCores) {
    this.cpuCores = cpuCores;
  }

  public StatNodesStatuses engines(List<StatNodesEngines> engines) {
    this.engines = engines;
    return this;
  }

  public StatNodesStatuses addEnginesItem(StatNodesEngines enginesItem) {
    if (this.engines == null) {
      this.engines = new ArrayList<StatNodesEngines>();
    }
    this.engines.add(enginesItem);
    return this;
  }

  /**
   * Summary of each engine status deployed on this Node.
   * @return engines
   **/
  @JsonProperty("engines")
  @ApiModelProperty(value = "Summary of each engine status deployed on this Node.")
  @Valid 
  public List<StatNodesEngines> getEngines() {
    return engines;
  }

  public void setEngines(List<StatNodesEngines> engines) {
    this.engines = engines;
  }

  public StatNodesStatuses freeDiskSpace(Integer freeDiskSpace) {
    this.freeDiskSpace = freeDiskSpace;
    return this;
  }

  /**
   * Reported available disk on that Node (in bytes).
   * @return freeDiskSpace
   **/
  @JsonProperty("free_disk_space")
  @ApiModelProperty(example = "173993443328", value = "Reported available disk on that Node (in bytes).")
  
  public Integer getFreeDiskSpace() {
    return freeDiskSpace;
  }

  public void setFreeDiskSpace(Integer freeDiskSpace) {
    this.freeDiskSpace = freeDiskSpace;
  }

  public StatNodesStatuses id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Node identfier
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(example = ":69", value = "Node identfier")
  
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public StatNodesStatuses issues(List<StatNodesIssues> issues) {
    this.issues = issues;
    return this;
  }

  public StatNodesStatuses addIssuesItem(StatNodesIssues issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<StatNodesIssues>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * A list of all potentials problems on that Node.
   * @return issues
   **/
  @JsonProperty("issues")
  @ApiModelProperty(value = "A list of all potentials problems on that Node.")
  @Valid 
  public List<StatNodesIssues> getIssues() {
    return issues;
  }

  public void setIssues(List<StatNodesIssues> issues) {
    this.issues = issues;
  }

  public StatNodesStatuses load(Integer load) {
    this.load = load;
    return this;
  }

  /**
   * Current CPU utilization on this Node (in percentage).
   * @return load
   **/
  @JsonProperty("load")
  @ApiModelProperty(example = "14", value = "Current CPU utilization on this Node (in percentage).")
  
  public Integer getLoad() {
    return load;
  }

  public void setLoad(Integer load) {
    this.load = load;
  }

  public StatNodesStatuses os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Current used OS
   * @return os
   **/
  @JsonProperty("os")
  @ApiModelProperty(example = "Linux Mint 18.3 Sylvia", value = "Current used OS")
  
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }

  public StatNodesStatuses scanQueue(Integer scanQueue) {
    this.scanQueue = scanQueue;
    return this;
  }

  /**
   * Current load on the Node, how many files are in the queue
   * @return scanQueue
   **/
  @JsonProperty("scan_queue")
  @ApiModelProperty(example = "24", value = "Current load on the Node, how many files are in the queue")
  
  public Integer getScanQueue() {
    return scanQueue;
  }

  public void setScanQueue(Integer scanQueue) {
    this.scanQueue = scanQueue;
  }

  public StatNodesStatuses totalMemory(Integer totalMemory) {
    this.totalMemory = totalMemory;
    return this;
  }

  /**
   * How much memory is allocated on this Node (in MB).
   * @return totalMemory
   **/
  @JsonProperty("total_memory")
  @ApiModelProperty(example = "40100", value = "How much memory is allocated on this Node (in MB).")
  
  public Integer getTotalMemory() {
    return totalMemory;
  }

  public void setTotalMemory(Integer totalMemory) {
    this.totalMemory = totalMemory;
  }

  public StatNodesStatuses version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Product version
   * @return version
   **/
  @JsonProperty("version")
  @ApiModelProperty(example = "4.18.0", value = "Product version")
  
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatNodesStatuses statNodesStatuses = (StatNodesStatuses) o;
    return Objects.equals(this.address, statNodesStatuses.address) &&
        Objects.equals(this.cpuCores, statNodesStatuses.cpuCores) &&
        Objects.equals(this.engines, statNodesStatuses.engines) &&
        Objects.equals(this.freeDiskSpace, statNodesStatuses.freeDiskSpace) &&
        Objects.equals(this.id, statNodesStatuses.id) &&
        Objects.equals(this.issues, statNodesStatuses.issues) &&
        Objects.equals(this.load, statNodesStatuses.load) &&
        Objects.equals(this.os, statNodesStatuses.os) &&
        Objects.equals(this.scanQueue, statNodesStatuses.scanQueue) &&
        Objects.equals(this.totalMemory, statNodesStatuses.totalMemory) &&
        Objects.equals(this.version, statNodesStatuses.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, cpuCores, engines, freeDiskSpace, id, issues, load, os, scanQueue, totalMemory, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatNodesStatuses {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cpuCores: ").append(toIndentedString(cpuCores)).append("\n");
    sb.append("    engines: ").append(toIndentedString(engines)).append("\n");
    sb.append("    freeDiskSpace: ").append(toIndentedString(freeDiskSpace)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    load: ").append(toIndentedString(load)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    scanQueue: ").append(toIndentedString(scanQueue)).append("\n");
    sb.append("    totalMemory: ").append(toIndentedString(totalMemory)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

