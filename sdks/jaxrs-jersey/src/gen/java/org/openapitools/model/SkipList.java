/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Object that defines the skip hashes list.
 */
@ApiModel(description = "Object that defines the skip hashes list.")
@JsonPropertyOrder({
  SkipList.JSON_PROPERTY_BLACKLIST,
  SkipList.JSON_PROPERTY_SKIP,
  SkipList.JSON_PROPERTY_WHITELIST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-05-15T23:49:49.064488Z[UTC]")
public class SkipList   {
  public static final String JSON_PROPERTY_BLACKLIST = "blacklist";
  @JsonProperty(JSON_PROPERTY_BLACKLIST)
  private Object blacklist;

  public static final String JSON_PROPERTY_SKIP = "skip";
  @JsonProperty(JSON_PROPERTY_SKIP)
  private Object skip;

  public static final String JSON_PROPERTY_WHITELIST = "whitelist";
  @JsonProperty(JSON_PROPERTY_WHITELIST)
  private Object whitelist;

  public SkipList blacklist(Object blacklist) {
    this.blacklist = blacklist;
    return this;
  }

  /**
   * Get blacklist
   * @return blacklist
   **/
  @JsonProperty("blacklist")
  @ApiModelProperty(example = "{edecbf6bd03ef340e0c6cd438a4069c2={comment=example3}}", value = "")
  @Valid 
  public Object getBlacklist() {
    return blacklist;
  }

  public void setBlacklist(Object blacklist) {
    this.blacklist = blacklist;
  }

  public SkipList skip(Object skip) {
    this.skip = skip;
    return this;
  }

  /**
   * Get skip
   * @return skip
   **/
  @JsonProperty("skip")
  @ApiModelProperty(example = "{13d8b8329bd2f668e6a889f32feaa48c832dbf0c={comment=example4, engines=[totaldefense]}}", value = "")
  @Valid 
  public Object getSkip() {
    return skip;
  }

  public void setSkip(Object skip) {
    this.skip = skip;
  }

  public SkipList whitelist(Object whitelist) {
    this.whitelist = whitelist;
    return this;
  }

  /**
   * Get whitelist
   * @return whitelist
   **/
  @JsonProperty("whitelist")
  @ApiModelProperty(example = "{6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d={comment=example5}, df72d035b31b1ff89f752e83af14b9e9dcf4913d9954f074546860d10b6908fb={comment=example2}}", value = "")
  @Valid 
  public Object getWhitelist() {
    return whitelist;
  }

  public void setWhitelist(Object whitelist) {
    this.whitelist = whitelist;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkipList skipList = (SkipList) o;
    return Objects.equals(this.blacklist, skipList.blacklist) &&
        Objects.equals(this.skip, skipList.skip) &&
        Objects.equals(this.whitelist, skipList.whitelist);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blacklist, skip, whitelist);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkipList {\n");
    
    sb.append("    blacklist: ").append(toIndentedString(blacklist)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    whitelist: ").append(toIndentedString(whitelist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

