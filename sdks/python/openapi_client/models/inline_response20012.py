# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20012(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'def_time': 'str',
        'download_progress': 'int',
        'download_time': 'str',
        'eng_id': 'str',
        'eng_name': 'str',
        'eng_type': 'str',
        'eng_ver': 'str',
        'engine_type': 'str',
        'state': 'str'
    }

    attribute_map = {
        'active': 'active',
        'def_time': 'def_time',
        'download_progress': 'download_progress',
        'download_time': 'download_time',
        'eng_id': 'eng_id',
        'eng_name': 'eng_name',
        'eng_type': 'eng_type',
        'eng_ver': 'eng_ver',
        'engine_type': 'engine_type',
        'state': 'state'
    }

    def __init__(self, active=None, def_time=None, download_progress=None, download_time=None, eng_id=None, eng_name=None, eng_type=None, eng_ver=None, engine_type=None, state=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20012 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._def_time = None
        self._download_progress = None
        self._download_time = None
        self._eng_id = None
        self._eng_name = None
        self._eng_type = None
        self._eng_ver = None
        self._engine_type = None
        self._state = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if def_time is not None:
            self.def_time = def_time
        if download_progress is not None:
            self.download_progress = download_progress
        if download_time is not None:
            self.download_time = download_time
        if eng_id is not None:
            self.eng_id = eng_id
        if eng_name is not None:
            self.eng_name = eng_name
        if eng_type is not None:
            self.eng_type = eng_type
        if eng_ver is not None:
            self.eng_ver = eng_ver
        if engine_type is not None:
            self.engine_type = engine_type
        if state is not None:
            self.state = state

    @property
    def active(self):
        """Gets the active of this InlineResponse20012.  # noqa: E501

        If used by at least one engine  # noqa: E501

        :return: The active of this InlineResponse20012.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse20012.

        If used by at least one engine  # noqa: E501

        :param active: The active of this InlineResponse20012.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def def_time(self):
        """Gets the def_time of this InlineResponse20012.  # noqa: E501

        The database definition time for this engine  # noqa: E501

        :return: The def_time of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._def_time

    @def_time.setter
    def def_time(self, def_time):
        """Sets the def_time of this InlineResponse20012.

        The database definition time for this engine  # noqa: E501

        :param def_time: The def_time of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._def_time = def_time

    @property
    def download_progress(self):
        """Gets the download_progress of this InlineResponse20012.  # noqa: E501

        The percentage progress of download  # noqa: E501

        :return: The download_progress of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._download_progress

    @download_progress.setter
    def download_progress(self, download_progress):
        """Sets the download_progress of this InlineResponse20012.

        The percentage progress of download  # noqa: E501

        :param download_progress: The download_progress of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._download_progress = download_progress

    @property
    def download_time(self):
        """Gets the download_time of this InlineResponse20012.  # noqa: E501

        When this engine downloaded from the update server.  # noqa: E501

        :return: The download_time of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this InlineResponse20012.

        When this engine downloaded from the update server.  # noqa: E501

        :param download_time: The download_time of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._download_time = download_time

    @property
    def eng_id(self):
        """Gets the eng_id of this InlineResponse20012.  # noqa: E501

        Engine internal ID  # noqa: E501

        :return: The eng_id of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._eng_id

    @eng_id.setter
    def eng_id(self, eng_id):
        """Sets the eng_id of this InlineResponse20012.

        Engine internal ID  # noqa: E501

        :param eng_id: The eng_id of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._eng_id = eng_id

    @property
    def eng_name(self):
        """Gets the eng_name of this InlineResponse20012.  # noqa: E501

        Engine name  # noqa: E501

        :return: The eng_name of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._eng_name

    @eng_name.setter
    def eng_name(self, eng_name):
        """Sets the eng_name of this InlineResponse20012.

        Engine name  # noqa: E501

        :param eng_name: The eng_name of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._eng_name = eng_name

    @property
    def eng_type(self):
        """Gets the eng_type of this InlineResponse20012.  # noqa: E501

        Engine type in human readable form  # noqa: E501

        :return: The eng_type of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._eng_type

    @eng_type.setter
    def eng_type(self, eng_type):
        """Sets the eng_type of this InlineResponse20012.

        Engine type in human readable form  # noqa: E501

        :param eng_type: The eng_type of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._eng_type = eng_type

    @property
    def eng_ver(self):
        """Gets the eng_ver of this InlineResponse20012.  # noqa: E501

        Engine's version (format differs from one engine to another).  # noqa: E501

        :return: The eng_ver of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._eng_ver

    @eng_ver.setter
    def eng_ver(self, eng_ver):
        """Sets the eng_ver of this InlineResponse20012.

        Engine's version (format differs from one engine to another).  # noqa: E501

        :param eng_ver: The eng_ver of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._eng_ver = eng_ver

    @property
    def engine_type(self):
        """Gets the engine_type of this InlineResponse20012.  # noqa: E501

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :return: The engine_type of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this InlineResponse20012.

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :param engine_type: The engine_type of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        allowed_values = ["av", "archive", "filetype"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and engine_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"  # noqa: E501
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def state(self):
        """Gets the state of this InlineResponse20012.  # noqa: E501

        Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed   # noqa: E501

        :return: The state of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20012.

        Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed   # noqa: E501

        :param state: The state of this InlineResponse20012.  # noqa: E501
        :type: str
        """
        allowed_values = ["downloading", "downloaded", "staging", "production", "removed", "temporary failed", "permanently failed", "content invalid", "download failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012):
            return True

        return self.to_dict() != other.to_dict()
