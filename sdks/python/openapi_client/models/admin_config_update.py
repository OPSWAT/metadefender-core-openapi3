# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdminConfigUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'autoupdateperiod': 'int',
        'deleteafterimport': 'bool',
        'disabledupdate': 'list[AdminConfigUpdateDisabledupdate]',
        'pickupfolder': 'str',
        'source': 'str'
    }

    attribute_map = {
        'autoupdateperiod': 'autoupdateperiod',
        'deleteafterimport': 'deleteafterimport',
        'disabledupdate': 'disabledupdate',
        'pickupfolder': 'pickupfolder',
        'source': 'source'
    }

    def __init__(self, autoupdateperiod=None, deleteafterimport=None, disabledupdate=None, pickupfolder=None, source=None, local_vars_configuration=None):  # noqa: E501
        """AdminConfigUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._autoupdateperiod = None
        self._deleteafterimport = None
        self._disabledupdate = None
        self._pickupfolder = None
        self._source = None
        self.discriminator = None

        if autoupdateperiod is not None:
            self.autoupdateperiod = autoupdateperiod
        if deleteafterimport is not None:
            self.deleteafterimport = deleteafterimport
        if disabledupdate is not None:
            self.disabledupdate = disabledupdate
        if pickupfolder is not None:
            self.pickupfolder = pickupfolder
        if source is not None:
            self.source = source

    @property
    def autoupdateperiod(self):
        """Gets the autoupdateperiod of this AdminConfigUpdate.  # noqa: E501

        The interval (in minutes) for checking for new updates.  # noqa: E501

        :return: The autoupdateperiod of this AdminConfigUpdate.  # noqa: E501
        :rtype: int
        """
        return self._autoupdateperiod

    @autoupdateperiod.setter
    def autoupdateperiod(self, autoupdateperiod):
        """Sets the autoupdateperiod of this AdminConfigUpdate.

        The interval (in minutes) for checking for new updates.  # noqa: E501

        :param autoupdateperiod: The autoupdateperiod of this AdminConfigUpdate.  # noqa: E501
        :type: int
        """

        self._autoupdateperiod = autoupdateperiod

    @property
    def deleteafterimport(self):
        """Gets the deleteafterimport of this AdminConfigUpdate.  # noqa: E501

        If you want to clean the pickup folder after the updates have been applied.  # noqa: E501

        :return: The deleteafterimport of this AdminConfigUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._deleteafterimport

    @deleteafterimport.setter
    def deleteafterimport(self, deleteafterimport):
        """Sets the deleteafterimport of this AdminConfigUpdate.

        If you want to clean the pickup folder after the updates have been applied.  # noqa: E501

        :param deleteafterimport: The deleteafterimport of this AdminConfigUpdate.  # noqa: E501
        :type: bool
        """

        self._deleteafterimport = deleteafterimport

    @property
    def disabledupdate(self):
        """Gets the disabledupdate of this AdminConfigUpdate.  # noqa: E501

        Lockdown a time interval when the engines are not allowed to update.  # noqa: E501

        :return: The disabledupdate of this AdminConfigUpdate.  # noqa: E501
        :rtype: list[AdminConfigUpdateDisabledupdate]
        """
        return self._disabledupdate

    @disabledupdate.setter
    def disabledupdate(self, disabledupdate):
        """Sets the disabledupdate of this AdminConfigUpdate.

        Lockdown a time interval when the engines are not allowed to update.  # noqa: E501

        :param disabledupdate: The disabledupdate of this AdminConfigUpdate.  # noqa: E501
        :type: list[AdminConfigUpdateDisabledupdate]
        """

        self._disabledupdate = disabledupdate

    @property
    def pickupfolder(self):
        """Gets the pickupfolder of this AdminConfigUpdate.  # noqa: E501

        The folder where MetaDefender will look for the new engine files.  # noqa: E501

        :return: The pickupfolder of this AdminConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._pickupfolder

    @pickupfolder.setter
    def pickupfolder(self, pickupfolder):
        """Sets the pickupfolder of this AdminConfigUpdate.

        The folder where MetaDefender will look for the new engine files.  # noqa: E501

        :param pickupfolder: The pickupfolder of this AdminConfigUpdate.  # noqa: E501
        :type: str
        """

        self._pickupfolder = pickupfolder

    @property
    def source(self):
        """Gets the source of this AdminConfigUpdate.  # noqa: E501

        Define where the updates will be loaded from. <p> This can be either:   * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes   * `folder` -> make sure that MetaDefender has access/permission to that folder   * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.   # noqa: E501

        :return: The source of this AdminConfigUpdate.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AdminConfigUpdate.

        Define where the updates will be loaded from. <p> This can be either:   * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes   * `folder` -> make sure that MetaDefender has access/permission to that folder   * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.   # noqa: E501

        :param source: The source of this AdminConfigUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["internet", "folder", "manual"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminConfigUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminConfigUpdate):
            return True

        return self.to_dict() != other.to_dict()
