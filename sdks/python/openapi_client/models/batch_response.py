# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BatchResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_files': 'BatchResponseBatchFiles',
        'batch_id': 'str',
        'is_closed': 'bool',
        'process_info': 'BatchResponseProcessInfo',
        'scan_results': 'BatchResponseScanResults',
        'user_data': 'str'
    }

    attribute_map = {
        'batch_files': 'batch_files',
        'batch_id': 'batch_id',
        'is_closed': 'is_closed',
        'process_info': 'process_info',
        'scan_results': 'scan_results',
        'user_data': 'user_data'
    }

    def __init__(self, batch_files=None, batch_id=None, is_closed=None, process_info=None, scan_results=None, user_data=None, local_vars_configuration=None):  # noqa: E501
        """BatchResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_files = None
        self._batch_id = None
        self._is_closed = None
        self._process_info = None
        self._scan_results = None
        self._user_data = None
        self.discriminator = None

        if batch_files is not None:
            self.batch_files = batch_files
        if batch_id is not None:
            self.batch_id = batch_id
        if is_closed is not None:
            self.is_closed = is_closed
        if process_info is not None:
            self.process_info = process_info
        if scan_results is not None:
            self.scan_results = scan_results
        if user_data is not None:
            self.user_data = user_data

    @property
    def batch_files(self):
        """Gets the batch_files of this BatchResponse.  # noqa: E501


        :return: The batch_files of this BatchResponse.  # noqa: E501
        :rtype: BatchResponseBatchFiles
        """
        return self._batch_files

    @batch_files.setter
    def batch_files(self, batch_files):
        """Sets the batch_files of this BatchResponse.


        :param batch_files: The batch_files of this BatchResponse.  # noqa: E501
        :type: BatchResponseBatchFiles
        """

        self._batch_files = batch_files

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchResponse.  # noqa: E501

        The batch unique identifer  # noqa: E501

        :return: The batch_id of this BatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchResponse.

        The batch unique identifer  # noqa: E501

        :param batch_id: The batch_id of this BatchResponse.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def is_closed(self):
        """Gets the is_closed of this BatchResponse.  # noqa: E501

        The batch status (open/close).  # noqa: E501

        :return: The is_closed of this BatchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this BatchResponse.

        The batch status (open/close).  # noqa: E501

        :param is_closed: The is_closed of this BatchResponse.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def process_info(self):
        """Gets the process_info of this BatchResponse.  # noqa: E501


        :return: The process_info of this BatchResponse.  # noqa: E501
        :rtype: BatchResponseProcessInfo
        """
        return self._process_info

    @process_info.setter
    def process_info(self, process_info):
        """Sets the process_info of this BatchResponse.


        :param process_info: The process_info of this BatchResponse.  # noqa: E501
        :type: BatchResponseProcessInfo
        """

        self._process_info = process_info

    @property
    def scan_results(self):
        """Gets the scan_results of this BatchResponse.  # noqa: E501


        :return: The scan_results of this BatchResponse.  # noqa: E501
        :rtype: BatchResponseScanResults
        """
        return self._scan_results

    @scan_results.setter
    def scan_results(self, scan_results):
        """Sets the scan_results of this BatchResponse.


        :param scan_results: The scan_results of this BatchResponse.  # noqa: E501
        :type: BatchResponseScanResults
        """

        self._scan_results = scan_results

    @property
    def user_data(self):
        """Gets the user_data of this BatchResponse.  # noqa: E501

        Metadata submitted at batch creation.  # noqa: E501

        :return: The user_data of this BatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this BatchResponse.

        Metadata submitted at batch creation.  # noqa: E501

        :param user_data: The user_data of this BatchResponse.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchResponse):
            return True

        return self.to_dict() != other.to_dict()
