# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StatNodesStatuses(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'cpu_cores': 'int',
        'engines': 'list[StatNodesEngines]',
        'free_disk_space': 'int',
        'id': 'str',
        'issues': 'list[StatNodesIssues]',
        'load': 'int',
        'os': 'str',
        'scan_queue': 'int',
        'total_memory': 'int',
        'version': 'str'
    }

    attribute_map = {
        'address': 'address',
        'cpu_cores': 'cpu_cores',
        'engines': 'engines',
        'free_disk_space': 'free_disk_space',
        'id': 'id',
        'issues': 'issues',
        'load': 'load',
        'os': 'os',
        'scan_queue': 'scan_queue',
        'total_memory': 'total_memory',
        'version': 'version'
    }

    def __init__(self, address=None, cpu_cores=None, engines=None, free_disk_space=None, id=None, issues=None, load=None, os=None, scan_queue=None, total_memory=None, version=None, local_vars_configuration=None):  # noqa: E501
        """StatNodesStatuses - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._cpu_cores = None
        self._engines = None
        self._free_disk_space = None
        self._id = None
        self._issues = None
        self._load = None
        self._os = None
        self._scan_queue = None
        self._total_memory = None
        self._version = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if engines is not None:
            self.engines = engines
        if free_disk_space is not None:
            self.free_disk_space = free_disk_space
        if id is not None:
            self.id = id
        if issues is not None:
            self.issues = issues
        if load is not None:
            self.load = load
        if os is not None:
            self.os = os
        if scan_queue is not None:
            self.scan_queue = scan_queue
        if total_memory is not None:
            self.total_memory = total_memory
        if version is not None:
            self.version = version

    @property
    def address(self):
        """Gets the address of this StatNodesStatuses.  # noqa: E501

        The location of the Node. If local, is empty string.  # noqa: E501

        :return: The address of this StatNodesStatuses.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StatNodesStatuses.

        The location of the Node. If local, is empty string.  # noqa: E501

        :param address: The address of this StatNodesStatuses.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this StatNodesStatuses.  # noqa: E501

        The number of CPU Cores allocated to this Node.  # noqa: E501

        :return: The cpu_cores of this StatNodesStatuses.  # noqa: E501
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this StatNodesStatuses.

        The number of CPU Cores allocated to this Node.  # noqa: E501

        :param cpu_cores: The cpu_cores of this StatNodesStatuses.  # noqa: E501
        :type: int
        """

        self._cpu_cores = cpu_cores

    @property
    def engines(self):
        """Gets the engines of this StatNodesStatuses.  # noqa: E501

        Summary of each engine status deployed on this Node.  # noqa: E501

        :return: The engines of this StatNodesStatuses.  # noqa: E501
        :rtype: list[StatNodesEngines]
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this StatNodesStatuses.

        Summary of each engine status deployed on this Node.  # noqa: E501

        :param engines: The engines of this StatNodesStatuses.  # noqa: E501
        :type: list[StatNodesEngines]
        """

        self._engines = engines

    @property
    def free_disk_space(self):
        """Gets the free_disk_space of this StatNodesStatuses.  # noqa: E501

        Reported available disk on that Node (in bytes).  # noqa: E501

        :return: The free_disk_space of this StatNodesStatuses.  # noqa: E501
        :rtype: int
        """
        return self._free_disk_space

    @free_disk_space.setter
    def free_disk_space(self, free_disk_space):
        """Sets the free_disk_space of this StatNodesStatuses.

        Reported available disk on that Node (in bytes).  # noqa: E501

        :param free_disk_space: The free_disk_space of this StatNodesStatuses.  # noqa: E501
        :type: int
        """

        self._free_disk_space = free_disk_space

    @property
    def id(self):
        """Gets the id of this StatNodesStatuses.  # noqa: E501

        Node identfier  # noqa: E501

        :return: The id of this StatNodesStatuses.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatNodesStatuses.

        Node identfier  # noqa: E501

        :param id: The id of this StatNodesStatuses.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this StatNodesStatuses.  # noqa: E501

        A list of all potentials problems on that Node.  # noqa: E501

        :return: The issues of this StatNodesStatuses.  # noqa: E501
        :rtype: list[StatNodesIssues]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this StatNodesStatuses.

        A list of all potentials problems on that Node.  # noqa: E501

        :param issues: The issues of this StatNodesStatuses.  # noqa: E501
        :type: list[StatNodesIssues]
        """

        self._issues = issues

    @property
    def load(self):
        """Gets the load of this StatNodesStatuses.  # noqa: E501

        Current CPU utilization on this Node (in percentage).  # noqa: E501

        :return: The load of this StatNodesStatuses.  # noqa: E501
        :rtype: int
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this StatNodesStatuses.

        Current CPU utilization on this Node (in percentage).  # noqa: E501

        :param load: The load of this StatNodesStatuses.  # noqa: E501
        :type: int
        """

        self._load = load

    @property
    def os(self):
        """Gets the os of this StatNodesStatuses.  # noqa: E501

        Current used OS  # noqa: E501

        :return: The os of this StatNodesStatuses.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this StatNodesStatuses.

        Current used OS  # noqa: E501

        :param os: The os of this StatNodesStatuses.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def scan_queue(self):
        """Gets the scan_queue of this StatNodesStatuses.  # noqa: E501

        Current load on the Node, how many files are in the queue  # noqa: E501

        :return: The scan_queue of this StatNodesStatuses.  # noqa: E501
        :rtype: int
        """
        return self._scan_queue

    @scan_queue.setter
    def scan_queue(self, scan_queue):
        """Sets the scan_queue of this StatNodesStatuses.

        Current load on the Node, how many files are in the queue  # noqa: E501

        :param scan_queue: The scan_queue of this StatNodesStatuses.  # noqa: E501
        :type: int
        """

        self._scan_queue = scan_queue

    @property
    def total_memory(self):
        """Gets the total_memory of this StatNodesStatuses.  # noqa: E501

        How much memory is allocated on this Node (in MB).  # noqa: E501

        :return: The total_memory of this StatNodesStatuses.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this StatNodesStatuses.

        How much memory is allocated on this Node (in MB).  # noqa: E501

        :param total_memory: The total_memory of this StatNodesStatuses.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def version(self):
        """Gets the version of this StatNodesStatuses.  # noqa: E501

        Product version  # noqa: E501

        :return: The version of this StatNodesStatuses.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatNodesStatuses.

        Product version  # noqa: E501

        :param version: The version of this StatNodesStatuses.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatNodesStatuses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatNodesStatuses):
            return True

        return self.to_dict() != other.to_dict()
