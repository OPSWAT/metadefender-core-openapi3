# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DLPResponseDlpInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certainty': 'str',
        'errors': 'object',
        'filename': 'str',
        'hits': 'DLPResponseDlpInfoHits',
        'metadata_removal': 'DLPResponseDlpInfoMetadataRemoval',
        'redact': 'DLPResponseDlpInfoRedact',
        'severity': 'int',
        'verdict': 'int',
        'watermark': 'DLPResponseDlpInfoWatermark'
    }

    attribute_map = {
        'certainty': 'certainty',
        'errors': 'errors',
        'filename': 'filename',
        'hits': 'hits',
        'metadata_removal': 'metadata_removal',
        'redact': 'redact',
        'severity': 'severity',
        'verdict': 'verdict',
        'watermark': 'watermark'
    }

    def __init__(self, certainty=None, errors=None, filename=None, hits=None, metadata_removal=None, redact=None, severity=None, verdict=None, watermark=None, local_vars_configuration=None):  # noqa: E501
        """DLPResponseDlpInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certainty = None
        self._errors = None
        self._filename = None
        self._hits = None
        self._metadata_removal = None
        self._redact = None
        self._severity = None
        self._verdict = None
        self._watermark = None
        self.discriminator = None

        if certainty is not None:
            self.certainty = certainty
        if errors is not None:
            self.errors = errors
        if filename is not None:
            self.filename = filename
        if hits is not None:
            self.hits = hits
        if metadata_removal is not None:
            self.metadata_removal = metadata_removal
        if redact is not None:
            self.redact = redact
        if severity is not None:
            self.severity = severity
        if verdict is not None:
            self.verdict = verdict
        if watermark is not None:
            self.watermark = watermark

    @property
    def certainty(self):
        """Gets the certainty of this DLPResponseDlpInfo.  # noqa: E501

        Describes how certain the hit is, possible values:   * `Very Low`   * `Low`   * `Medium`   * `High`   * `Very High`   # noqa: E501

        :return: The certainty of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this DLPResponseDlpInfo.

        Describes how certain the hit is, possible values:   * `Very Low`   * `Low`   * `Medium`   * `High`   * `Very High`   # noqa: E501

        :param certainty: The certainty of this DLPResponseDlpInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Very Low", "Low", "Medium", "High", "Very High"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and certainty not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `certainty` ({0}), must be one of {1}"  # noqa: E501
                .format(certainty, allowed_values)
            )

        self._certainty = certainty

    @property
    def errors(self):
        """Gets the errors of this DLPResponseDlpInfo.  # noqa: E501

        A  list of error objects (empty if no errors happened), each error object contains following keys:   * `scan`: scan related error description   * `redact`: redaction related error description   * `watermark`: watermark related error description   * `metadata_removal`: metadata removal related error description   # noqa: E501

        :return: The errors of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: object
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DLPResponseDlpInfo.

        A  list of error objects (empty if no errors happened), each error object contains following keys:   * `scan`: scan related error description   * `redact`: redaction related error description   * `watermark`: watermark related error description   * `metadata_removal`: metadata removal related error description   # noqa: E501

        :param errors: The errors of this DLPResponseDlpInfo.  # noqa: E501
        :type: object
        """

        self._errors = errors

    @property
    def filename(self):
        """Gets the filename of this DLPResponseDlpInfo.  # noqa: E501

        Output processed file name (pre-configured on engine settings under Core's worflow rule)  # noqa: E501

        :return: The filename of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DLPResponseDlpInfo.

        Output processed file name (pre-configured on engine settings under Core's worflow rule)  # noqa: E501

        :param filename: The filename of this DLPResponseDlpInfo.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def hits(self):
        """Gets the hits of this DLPResponseDlpInfo.  # noqa: E501


        :return: The hits of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: DLPResponseDlpInfoHits
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this DLPResponseDlpInfo.


        :param hits: The hits of this DLPResponseDlpInfo.  # noqa: E501
        :type: DLPResponseDlpInfoHits
        """

        self._hits = hits

    @property
    def metadata_removal(self):
        """Gets the metadata_removal of this DLPResponseDlpInfo.  # noqa: E501


        :return: The metadata_removal of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: DLPResponseDlpInfoMetadataRemoval
        """
        return self._metadata_removal

    @metadata_removal.setter
    def metadata_removal(self, metadata_removal):
        """Sets the metadata_removal of this DLPResponseDlpInfo.


        :param metadata_removal: The metadata_removal of this DLPResponseDlpInfo.  # noqa: E501
        :type: DLPResponseDlpInfoMetadataRemoval
        """

        self._metadata_removal = metadata_removal

    @property
    def redact(self):
        """Gets the redact of this DLPResponseDlpInfo.  # noqa: E501


        :return: The redact of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: DLPResponseDlpInfoRedact
        """
        return self._redact

    @redact.setter
    def redact(self, redact):
        """Sets the redact of this DLPResponseDlpInfo.


        :param redact: The redact of this DLPResponseDlpInfo.  # noqa: E501
        :type: DLPResponseDlpInfoRedact
        """

        self._redact = redact

    @property
    def severity(self):
        """Gets the severity of this DLPResponseDlpInfo.  # noqa: E501

        (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * `0` - Certainly is data loss   * `1` - Might be data loss   # noqa: E501

        :return: The severity of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DLPResponseDlpInfo.

        (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * `0` - Certainly is data loss   * `1` - Might be data loss   # noqa: E501

        :param severity: The severity of this DLPResponseDlpInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def verdict(self):
        """Gets the verdict of this DLPResponseDlpInfo.  # noqa: E501

        The overall result for the scanned file. It can be   | index         | status                       |   |---------------|------------------------------|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  |   # noqa: E501

        :return: The verdict of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: int
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this DLPResponseDlpInfo.

        The overall result for the scanned file. It can be   | index         | status                       |   |---------------|------------------------------|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  |   # noqa: E501

        :param verdict: The verdict of this DLPResponseDlpInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and verdict not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"  # noqa: E501
                .format(verdict, allowed_values)
            )

        self._verdict = verdict

    @property
    def watermark(self):
        """Gets the watermark of this DLPResponseDlpInfo.  # noqa: E501


        :return: The watermark of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: DLPResponseDlpInfoWatermark
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this DLPResponseDlpInfo.


        :param watermark: The watermark of this DLPResponseDlpInfo.  # noqa: E501
        :type: DLPResponseDlpInfoWatermark
        """

        self._watermark = watermark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DLPResponseDlpInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DLPResponseDlpInfo):
            return True

        return self.to_dict() != other.to_dict()
