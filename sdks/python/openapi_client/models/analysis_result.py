# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AnalysisResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_id': 'str',
        'dlp_info': 'DLPResponse',
        'file_info': 'FileInformation',
        'process_info': 'AnalysisResultProcessInfo',
        'scan_results': 'MetascanReport',
        'vulnerability_info': 'VulnerabilityResponse',
        'yara': 'YaraReport'
    }

    attribute_map = {
        'data_id': 'data_id',
        'dlp_info': 'dlp_info',
        'file_info': 'file_info',
        'process_info': 'process_info',
        'scan_results': 'scan_results',
        'vulnerability_info': 'vulnerability_info',
        'yara': 'yara'
    }

    def __init__(self, data_id=None, dlp_info=None, file_info=None, process_info=None, scan_results=None, vulnerability_info=None, yara=None, local_vars_configuration=None):  # noqa: E501
        """AnalysisResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_id = None
        self._dlp_info = None
        self._file_info = None
        self._process_info = None
        self._scan_results = None
        self._vulnerability_info = None
        self._yara = None
        self.discriminator = None

        if data_id is not None:
            self.data_id = data_id
        if dlp_info is not None:
            self.dlp_info = dlp_info
        if file_info is not None:
            self.file_info = file_info
        if process_info is not None:
            self.process_info = process_info
        if scan_results is not None:
            self.scan_results = scan_results
        if vulnerability_info is not None:
            self.vulnerability_info = vulnerability_info
        if yara is not None:
            self.yara = yara

    @property
    def data_id(self):
        """Gets the data_id of this AnalysisResult.  # noqa: E501

        data identifier of the requested file  # noqa: E501

        :return: The data_id of this AnalysisResult.  # noqa: E501
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this AnalysisResult.

        data identifier of the requested file  # noqa: E501

        :param data_id: The data_id of this AnalysisResult.  # noqa: E501
        :type: str
        """

        self._data_id = data_id

    @property
    def dlp_info(self):
        """Gets the dlp_info of this AnalysisResult.  # noqa: E501


        :return: The dlp_info of this AnalysisResult.  # noqa: E501
        :rtype: DLPResponse
        """
        return self._dlp_info

    @dlp_info.setter
    def dlp_info(self, dlp_info):
        """Sets the dlp_info of this AnalysisResult.


        :param dlp_info: The dlp_info of this AnalysisResult.  # noqa: E501
        :type: DLPResponse
        """

        self._dlp_info = dlp_info

    @property
    def file_info(self):
        """Gets the file_info of this AnalysisResult.  # noqa: E501


        :return: The file_info of this AnalysisResult.  # noqa: E501
        :rtype: FileInformation
        """
        return self._file_info

    @file_info.setter
    def file_info(self, file_info):
        """Sets the file_info of this AnalysisResult.


        :param file_info: The file_info of this AnalysisResult.  # noqa: E501
        :type: FileInformation
        """

        self._file_info = file_info

    @property
    def process_info(self):
        """Gets the process_info of this AnalysisResult.  # noqa: E501


        :return: The process_info of this AnalysisResult.  # noqa: E501
        :rtype: AnalysisResultProcessInfo
        """
        return self._process_info

    @process_info.setter
    def process_info(self, process_info):
        """Sets the process_info of this AnalysisResult.


        :param process_info: The process_info of this AnalysisResult.  # noqa: E501
        :type: AnalysisResultProcessInfo
        """

        self._process_info = process_info

    @property
    def scan_results(self):
        """Gets the scan_results of this AnalysisResult.  # noqa: E501


        :return: The scan_results of this AnalysisResult.  # noqa: E501
        :rtype: MetascanReport
        """
        return self._scan_results

    @scan_results.setter
    def scan_results(self, scan_results):
        """Sets the scan_results of this AnalysisResult.


        :param scan_results: The scan_results of this AnalysisResult.  # noqa: E501
        :type: MetascanReport
        """

        self._scan_results = scan_results

    @property
    def vulnerability_info(self):
        """Gets the vulnerability_info of this AnalysisResult.  # noqa: E501


        :return: The vulnerability_info of this AnalysisResult.  # noqa: E501
        :rtype: VulnerabilityResponse
        """
        return self._vulnerability_info

    @vulnerability_info.setter
    def vulnerability_info(self, vulnerability_info):
        """Sets the vulnerability_info of this AnalysisResult.


        :param vulnerability_info: The vulnerability_info of this AnalysisResult.  # noqa: E501
        :type: VulnerabilityResponse
        """

        self._vulnerability_info = vulnerability_info

    @property
    def yara(self):
        """Gets the yara of this AnalysisResult.  # noqa: E501


        :return: The yara of this AnalysisResult.  # noqa: E501
        :rtype: YaraReport
        """
        return self._yara

    @yara.setter
    def yara(self, yara):
        """Sets the yara of this AnalysisResult.


        :param yara: The yara of this AnalysisResult.  # noqa: E501
        :type: YaraReport
        """

        self._yara = yara

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisResult):
            return True

        return self.to_dict() != other.to_dict()
