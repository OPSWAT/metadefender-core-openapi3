# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BatchResponseProcessInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'blocked_reason': 'str',
        'file_type_skipped_scan': 'bool',
        'profile': 'str',
        'result': 'str',
        'user_agent': 'str',
        'username': 'str'
    }

    attribute_map = {
        'blocked_reason': 'blocked_reason',
        'file_type_skipped_scan': 'file_type_skipped_scan',
        'profile': 'profile',
        'result': 'result',
        'user_agent': 'user_agent',
        'username': 'username'
    }

    def __init__(self, blocked_reason=None, file_type_skipped_scan=None, profile=None, result=None, user_agent=None, username=None, local_vars_configuration=None):  # noqa: E501
        """BatchResponseProcessInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._blocked_reason = None
        self._file_type_skipped_scan = None
        self._profile = None
        self._result = None
        self._user_agent = None
        self._username = None
        self.discriminator = None

        if blocked_reason is not None:
            self.blocked_reason = blocked_reason
        if file_type_skipped_scan is not None:
            self.file_type_skipped_scan = file_type_skipped_scan
        if profile is not None:
            self.profile = profile
        if result is not None:
            self.result = result
        if user_agent is not None:
            self.user_agent = user_agent
        if username is not None:
            self.username = username

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this BatchResponseProcessInfo.  # noqa: E501

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :return: The blocked_reason of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this BatchResponseProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :param blocked_reason: The blocked_reason of this BatchResponseProcessInfo.  # noqa: E501
        :type: str
        """

        self._blocked_reason = blocked_reason

    @property
    def file_type_skipped_scan(self):
        """Gets the file_type_skipped_scan of this BatchResponseProcessInfo.  # noqa: E501

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :return: The file_type_skipped_scan of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: bool
        """
        return self._file_type_skipped_scan

    @file_type_skipped_scan.setter
    def file_type_skipped_scan(self, file_type_skipped_scan):
        """Sets the file_type_skipped_scan of this BatchResponseProcessInfo.

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :param file_type_skipped_scan: The file_type_skipped_scan of this BatchResponseProcessInfo.  # noqa: E501
        :type: bool
        """

        self._file_type_skipped_scan = file_type_skipped_scan

    @property
    def profile(self):
        """Gets the profile of this BatchResponseProcessInfo.  # noqa: E501

        The used rule name.  # noqa: E501

        :return: The profile of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this BatchResponseProcessInfo.

        The used rule name.  # noqa: E501

        :param profile: The profile of this BatchResponseProcessInfo.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def result(self):
        """Gets the result of this BatchResponseProcessInfo.  # noqa: E501

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :return: The result of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BatchResponseProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :param result: The result of this BatchResponseProcessInfo.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def user_agent(self):
        """Gets the user_agent of this BatchResponseProcessInfo.  # noqa: E501

        Identifier for the REST Client that calls the API.  # noqa: E501

        :return: The user_agent of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this BatchResponseProcessInfo.

        Identifier for the REST Client that calls the API.  # noqa: E501

        :param user_agent: The user_agent of this BatchResponseProcessInfo.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this BatchResponseProcessInfo.  # noqa: E501

        User identifier who submitted scan request earlier.  # noqa: E501

        :return: The username of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BatchResponseProcessInfo.

        User identifier who submitted scan request earlier.  # noqa: E501

        :param username: The username of this BatchResponseProcessInfo.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchResponseProcessInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchResponseProcessInfo):
            return True

        return self.to_dict() != other.to_dict()
