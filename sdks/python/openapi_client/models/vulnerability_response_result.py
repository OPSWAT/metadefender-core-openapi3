# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VulnerabilityResponseResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'int',
        'hash': 'str',
        'method': 'int',
        'timestamp': 'str',
        'timing': 'int',
        'detected_product': 'VulnerabilityResponseResultDetectedProduct',
        'vulnerabilites': 'list[VulnerabilityResponseResultVulnerabilites]'
    }

    attribute_map = {
        'code': 'code',
        'hash': 'hash',
        'method': 'method',
        'timestamp': 'timestamp',
        'timing': 'timing',
        'detected_product': 'detected_product',
        'vulnerabilites': 'vulnerabilites'
    }

    def __init__(self, code=None, hash=None, method=None, timestamp=None, timing=None, detected_product=None, vulnerabilites=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityResponseResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._hash = None
        self._method = None
        self._timestamp = None
        self._timing = None
        self._detected_product = None
        self._vulnerabilites = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if hash is not None:
            self.hash = hash
        if method is not None:
            self.method = method
        if timestamp is not None:
            self.timestamp = timestamp
        if timing is not None:
            self.timing = timing
        if detected_product is not None:
            self.detected_product = detected_product
        if vulnerabilites is not None:
            self.vulnerabilites = vulnerabilites

    @property
    def code(self):
        """Gets the code of this VulnerabilityResponseResult.  # noqa: E501

        The result code for vulnerability check, 0 means a successful check  # noqa: E501

        :return: The code of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VulnerabilityResponseResult.

        The result code for vulnerability check, 0 means a successful check  # noqa: E501

        :param code: The code of this VulnerabilityResponseResult.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def hash(self):
        """Gets the hash of this VulnerabilityResponseResult.  # noqa: E501

        The file's SHA1 hash value  # noqa: E501

        :return: The hash of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this VulnerabilityResponseResult.

        The file's SHA1 hash value  # noqa: E501

        :param hash: The hash of this VulnerabilityResponseResult.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def method(self):
        """Gets the method of this VulnerabilityResponseResult.  # noqa: E501

        The method used by OESIS Framework, it should be 50700 every time.  # noqa: E501

        :return: The method of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this VulnerabilityResponseResult.

        The method used by OESIS Framework, it should be 50700 every time.  # noqa: E501

        :param method: The method of this VulnerabilityResponseResult.  # noqa: E501
        :type: int
        """
        allowed_values = [50700]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def timestamp(self):
        """Gets the timestamp of this VulnerabilityResponseResult.  # noqa: E501

        Timestamp of the request issued  # noqa: E501

        :return: The timestamp of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this VulnerabilityResponseResult.

        Timestamp of the request issued  # noqa: E501

        :param timestamp: The timestamp of this VulnerabilityResponseResult.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def timing(self):
        """Gets the timing of this VulnerabilityResponseResult.  # noqa: E501

        The vulnerability check's duration in milliseconds  # noqa: E501

        :return: The timing of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this VulnerabilityResponseResult.

        The vulnerability check's duration in milliseconds  # noqa: E501

        :param timing: The timing of this VulnerabilityResponseResult.  # noqa: E501
        :type: int
        """

        self._timing = timing

    @property
    def detected_product(self):
        """Gets the detected_product of this VulnerabilityResponseResult.  # noqa: E501


        :return: The detected_product of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: VulnerabilityResponseResultDetectedProduct
        """
        return self._detected_product

    @detected_product.setter
    def detected_product(self, detected_product):
        """Sets the detected_product of this VulnerabilityResponseResult.


        :param detected_product: The detected_product of this VulnerabilityResponseResult.  # noqa: E501
        :type: VulnerabilityResponseResultDetectedProduct
        """

        self._detected_product = detected_product

    @property
    def vulnerabilites(self):
        """Gets the vulnerabilites of this VulnerabilityResponseResult.  # noqa: E501

        A list of specific vulnerabilities  # noqa: E501

        :return: The vulnerabilites of this VulnerabilityResponseResult.  # noqa: E501
        :rtype: list[VulnerabilityResponseResultVulnerabilites]
        """
        return self._vulnerabilites

    @vulnerabilites.setter
    def vulnerabilites(self, vulnerabilites):
        """Sets the vulnerabilites of this VulnerabilityResponseResult.

        A list of specific vulnerabilities  # noqa: E501

        :param vulnerabilites: The vulnerabilites of this VulnerabilityResponseResult.  # noqa: E501
        :type: list[VulnerabilityResponseResultVulnerabilites]
        """

        self._vulnerabilites = vulnerabilites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityResponseResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityResponseResult):
            return True

        return self.to_dict() != other.to_dict()
