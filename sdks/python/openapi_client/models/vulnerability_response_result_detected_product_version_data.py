# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VulnerabilityResponseResultDetectedProductVersionData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count_behind': 'int',
        'feed_id': 'int',
        'version': 'str'
    }

    attribute_map = {
        'count_behind': 'count_behind',
        'feed_id': 'feed_id',
        'version': 'version'
    }

    def __init__(self, count_behind=None, feed_id=None, version=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityResponseResultDetectedProductVersionData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count_behind = None
        self._feed_id = None
        self._version = None
        self.discriminator = None

        if count_behind is not None:
            self.count_behind = count_behind
        if feed_id is not None:
            self.feed_id = feed_id
        if version is not None:
            self.version = version

    @property
    def count_behind(self):
        """Gets the count_behind of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501

        The number of patches behind of the installed product  # noqa: E501

        :return: The count_behind of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :rtype: int
        """
        return self._count_behind

    @count_behind.setter
    def count_behind(self, count_behind):
        """Sets the count_behind of this VulnerabilityResponseResultDetectedProductVersionData.

        The number of patches behind of the installed product  # noqa: E501

        :param count_behind: The count_behind of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :type: int
        """

        self._count_behind = count_behind

    @property
    def feed_id(self):
        """Gets the feed_id of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501

        The remote feed ID used to determine patch level  # noqa: E501

        :return: The feed_id of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :rtype: int
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this VulnerabilityResponseResultDetectedProductVersionData.

        The remote feed ID used to determine patch level  # noqa: E501

        :param feed_id: The feed_id of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :type: int
        """

        self._feed_id = feed_id

    @property
    def version(self):
        """Gets the version of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501

        The current version of the product in the remote feed  # noqa: E501

        :return: The version of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VulnerabilityResponseResultDetectedProductVersionData.

        The current version of the product in the remote feed  # noqa: E501

        :param version: The version of this VulnerabilityResponseResultDetectedProductVersionData.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityResponseResultDetectedProductVersionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityResponseResultDetectedProductVersionData):
            return True

        return self.to_dict() != other.to_dict()
