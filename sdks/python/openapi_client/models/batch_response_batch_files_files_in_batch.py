# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BatchResponseBatchFilesFilesInBatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_id': 'str',
        'detected_by': 'int',
        'display_name': 'str',
        'file_size': 'int',
        'file_type': 'str',
        'file_type_description': 'str',
        'process_info': 'BatchResponseBatchFilesProcessInfo',
        'progress_percentage': 'int',
        'scan_all_result_a': 'ProcessingResultsStringEnum',
        'scan_all_result_i': 'ProcessingResultsIndexEnum',
        'scanned_with': 'int'
    }

    attribute_map = {
        'data_id': 'data_id',
        'detected_by': 'detected_by',
        'display_name': 'display_name',
        'file_size': 'file_size',
        'file_type': 'file_type',
        'file_type_description': 'file_type_description',
        'process_info': 'process_info',
        'progress_percentage': 'progress_percentage',
        'scan_all_result_a': 'scan_all_result_a',
        'scan_all_result_i': 'scan_all_result_i',
        'scanned_with': 'scanned_with'
    }

    def __init__(self, data_id=None, detected_by=None, display_name=None, file_size=None, file_type=None, file_type_description=None, process_info=None, progress_percentage=None, scan_all_result_a=None, scan_all_result_i=None, scanned_with=None, local_vars_configuration=None):  # noqa: E501
        """BatchResponseBatchFilesFilesInBatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_id = None
        self._detected_by = None
        self._display_name = None
        self._file_size = None
        self._file_type = None
        self._file_type_description = None
        self._process_info = None
        self._progress_percentage = None
        self._scan_all_result_a = None
        self._scan_all_result_i = None
        self._scanned_with = None
        self.discriminator = None

        if data_id is not None:
            self.data_id = data_id
        if detected_by is not None:
            self.detected_by = detected_by
        if display_name is not None:
            self.display_name = display_name
        if file_size is not None:
            self.file_size = file_size
        if file_type is not None:
            self.file_type = file_type
        if file_type_description is not None:
            self.file_type_description = file_type_description
        if process_info is not None:
            self.process_info = process_info
        if progress_percentage is not None:
            self.progress_percentage = progress_percentage
        if scan_all_result_a is not None:
            self.scan_all_result_a = scan_all_result_a
        if scan_all_result_i is not None:
            self.scan_all_result_i = scan_all_result_i
        if scanned_with is not None:
            self.scanned_with = scanned_with

    @property
    def data_id(self):
        """Gets the data_id of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        Unique identifer for the file.  # noqa: E501

        :return: The data_id of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this BatchResponseBatchFilesFilesInBatch.

        Unique identifer for the file.  # noqa: E501

        :param data_id: The data_id of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: str
        """

        self._data_id = data_id

    @property
    def detected_by(self):
        """Gets the detected_by of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        Total number of engines that detected this file.  # noqa: E501

        :return: The detected_by of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: int
        """
        return self._detected_by

    @detected_by.setter
    def detected_by(self, detected_by):
        """Sets the detected_by of this BatchResponseBatchFilesFilesInBatch.

        Total number of engines that detected this file.  # noqa: E501

        :param detected_by: The detected_by of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: int
        """

        self._detected_by = detected_by

    @property
    def display_name(self):
        """Gets the display_name of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The filename reported via `filename` header.  # noqa: E501

        :return: The display_name of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BatchResponseBatchFilesFilesInBatch.

        The filename reported via `filename` header.  # noqa: E501

        :param display_name: The display_name of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def file_size(self):
        """Gets the file_size of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        Total file size in bytes.  # noqa: E501

        :return: The file_size of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this BatchResponseBatchFilesFilesInBatch.

        Total file size in bytes.  # noqa: E501

        :param file_size: The file_size of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """Gets the file_type of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The filetype using mimetype.  # noqa: E501

        :return: The file_type of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this BatchResponseBatchFilesFilesInBatch.

        The filetype using mimetype.  # noqa: E501

        :param file_type: The file_type of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def file_type_description(self):
        """Gets the file_type_description of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The filetype in human readable format.  # noqa: E501

        :return: The file_type_description of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: str
        """
        return self._file_type_description

    @file_type_description.setter
    def file_type_description(self, file_type_description):
        """Sets the file_type_description of this BatchResponseBatchFilesFilesInBatch.

        The filetype in human readable format.  # noqa: E501

        :param file_type_description: The file_type_description of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: str
        """

        self._file_type_description = file_type_description

    @property
    def process_info(self):
        """Gets the process_info of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501


        :return: The process_info of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: BatchResponseBatchFilesProcessInfo
        """
        return self._process_info

    @process_info.setter
    def process_info(self, process_info):
        """Sets the process_info of this BatchResponseBatchFilesFilesInBatch.


        :param process_info: The process_info of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: BatchResponseBatchFilesProcessInfo
        """

        self._process_info = process_info

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        Track analysis progress until reaches 100.  # noqa: E501

        :return: The progress_percentage of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this BatchResponseBatchFilesFilesInBatch.

        Track analysis progress until reaches 100.  # noqa: E501

        :param progress_percentage: The progress_percentage of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: int
        """

        self._progress_percentage = progress_percentage

    @property
    def scan_all_result_a(self):
        """Gets the scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The overall scan result as string  # noqa: E501

        :return: The scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: ProcessingResultsStringEnum
        """
        return self._scan_all_result_a

    @scan_all_result_a.setter
    def scan_all_result_a(self, scan_all_result_a):
        """Sets the scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as string  # noqa: E501

        :param scan_all_result_a: The scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: ProcessingResultsStringEnum
        """

        self._scan_all_result_a = scan_all_result_a

    @property
    def scan_all_result_i(self):
        """Gets the scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The overall scan result as index in the Processing Results table.  # noqa: E501

        :return: The scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: ProcessingResultsIndexEnum
        """
        return self._scan_all_result_i

    @scan_all_result_i.setter
    def scan_all_result_i(self, scan_all_result_i):
        """Sets the scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as index in the Processing Results table.  # noqa: E501

        :param scan_all_result_i: The scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: ProcessingResultsIndexEnum
        """

        self._scan_all_result_i = scan_all_result_i

    @property
    def scanned_with(self):
        """Gets the scanned_with of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501

        The total number of engines used to analyze this file.  # noqa: E501

        :return: The scanned_with of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: int
        """
        return self._scanned_with

    @scanned_with.setter
    def scanned_with(self, scanned_with):
        """Sets the scanned_with of this BatchResponseBatchFilesFilesInBatch.

        The total number of engines used to analyze this file.  # noqa: E501

        :param scanned_with: The scanned_with of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type: int
        """

        self._scanned_with = scanned_with

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchResponseBatchFilesFilesInBatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchResponseBatchFilesFilesInBatch):
            return True

        return self.to_dict() != other.to_dict()
