# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VulnerabilityResponseResultDetectedProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'has_vulnerability': 'bool',
        'is_current': 'bool',
        'product': 'VulnerabilityResponseResultDetectedProductProduct',
        'remediation_link': 'str',
        'severity': 'str',
        'sig_name': 'str',
        'signature': 'int',
        'vendor': 'VulnerabilityResponseResultDetectedProductVendor',
        'version': 'str',
        'version_data': 'VulnerabilityResponseResultDetectedProductVersionData'
    }

    attribute_map = {
        'has_vulnerability': 'has_vulnerability',
        'is_current': 'is_current',
        'product': 'product',
        'remediation_link': 'remediation_link',
        'severity': 'severity',
        'sig_name': 'sig_name',
        'signature': 'signature',
        'vendor': 'vendor',
        'version': 'version',
        'version_data': 'version_data'
    }

    def __init__(self, has_vulnerability=None, is_current=None, product=None, remediation_link=None, severity=None, sig_name=None, signature=None, vendor=None, version=None, version_data=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityResponseResultDetectedProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._has_vulnerability = None
        self._is_current = None
        self._product = None
        self._remediation_link = None
        self._severity = None
        self._sig_name = None
        self._signature = None
        self._vendor = None
        self._version = None
        self._version_data = None
        self.discriminator = None

        if has_vulnerability is not None:
            self.has_vulnerability = has_vulnerability
        if is_current is not None:
            self.is_current = is_current
        if product is not None:
            self.product = product
        if remediation_link is not None:
            self.remediation_link = remediation_link
        if severity is not None:
            self.severity = severity
        if sig_name is not None:
            self.sig_name = sig_name
        if signature is not None:
            self.signature = signature
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version
        if version_data is not None:
            self.version_data = version_data

    @property
    def has_vulnerability(self):
        """Gets the has_vulnerability of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        Indicates whether any vulnerabilities have been associated with the particular product  # noqa: E501

        :return: The has_vulnerability of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._has_vulnerability

    @has_vulnerability.setter
    def has_vulnerability(self, has_vulnerability):
        """Sets the has_vulnerability of this VulnerabilityResponseResultDetectedProduct.

        Indicates whether any vulnerabilities have been associated with the particular product  # noqa: E501

        :param has_vulnerability: The has_vulnerability of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: bool
        """

        self._has_vulnerability = has_vulnerability

    @property
    def is_current(self):
        """Gets the is_current of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        True if this product's patch level is current, defaults to true  # noqa: E501

        :return: The is_current of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this VulnerabilityResponseResultDetectedProduct.

        True if this product's patch level is current, defaults to true  # noqa: E501

        :param is_current: The is_current of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def product(self):
        """Gets the product of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501


        :return: The product of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: VulnerabilityResponseResultDetectedProductProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this VulnerabilityResponseResultDetectedProduct.


        :param product: The product of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: VulnerabilityResponseResultDetectedProductProduct
        """

        self._product = product

    @property
    def remediation_link(self):
        """Gets the remediation_link of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        A link where product updates or patches can be obtained  # noqa: E501

        :return: The remediation_link of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: str
        """
        return self._remediation_link

    @remediation_link.setter
    def remediation_link(self, remediation_link):
        """Sets the remediation_link of this VulnerabilityResponseResultDetectedProduct.

        A link where product updates or patches can be obtained  # noqa: E501

        :param remediation_link: The remediation_link of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: str
        """

        self._remediation_link = remediation_link

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        String description of Severity level:    * `low`    * `moderate`   * `important`   * `critical`   * `not_available`   * `unknown`   # noqa: E501

        :return: The severity of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityResponseResultDetectedProduct.

        String description of Severity level:    * `low`    * `moderate`   * `important`   * `critical`   * `not_available`   * `unknown`   # noqa: E501

        :param severity: The severity of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: str
        """
        allowed_values = ["low", "moderate", "important", "critical", "not_available", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def sig_name(self):
        """Gets the sig_name of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        Product signature descriptor  # noqa: E501

        :return: The sig_name of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: str
        """
        return self._sig_name

    @sig_name.setter
    def sig_name(self, sig_name):
        """Sets the sig_name of this VulnerabilityResponseResultDetectedProduct.

        Product signature descriptor  # noqa: E501

        :param sig_name: The sig_name of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: str
        """

        self._sig_name = sig_name

    @property
    def signature(self):
        """Gets the signature of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        OPSWAT signature id  # noqa: E501

        :return: The signature of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: int
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this VulnerabilityResponseResultDetectedProduct.

        OPSWAT signature id  # noqa: E501

        :param signature: The signature of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: int
        """

        self._signature = signature

    @property
    def vendor(self):
        """Gets the vendor of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501


        :return: The vendor of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: VulnerabilityResponseResultDetectedProductVendor
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this VulnerabilityResponseResultDetectedProduct.


        :param vendor: The vendor of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: VulnerabilityResponseResultDetectedProductVendor
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501

        The installed product version  # noqa: E501

        :return: The version of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VulnerabilityResponseResultDetectedProduct.

        The installed product version  # noqa: E501

        :param version: The version of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_data(self):
        """Gets the version_data of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501


        :return: The version_data of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :rtype: VulnerabilityResponseResultDetectedProductVersionData
        """
        return self._version_data

    @version_data.setter
    def version_data(self, version_data):
        """Sets the version_data of this VulnerabilityResponseResultDetectedProduct.


        :param version_data: The version_data of this VulnerabilityResponseResultDetectedProduct.  # noqa: E501
        :type: VulnerabilityResponseResultDetectedProductVersionData
        """

        self._version_data = version_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityResponseResultDetectedProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityResponseResultDetectedProduct):
            return True

        return self.to_dict() != other.to_dict()
