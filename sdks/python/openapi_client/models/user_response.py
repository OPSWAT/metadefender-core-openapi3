# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UserResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apikey': 'str',
        'directory_id': 'int',
        'display_name': 'str',
        'email': 'str',
        'name': 'str',
        'roles': 'list[str]',
        'ui_settings': 'object'
    }

    attribute_map = {
        'apikey': 'apikey',
        'directory_id': 'directory_id',
        'display_name': 'display_name',
        'email': 'email',
        'name': 'name',
        'roles': 'roles',
        'ui_settings': 'ui_settings'
    }

    def __init__(self, apikey=None, directory_id=None, display_name=None, email=None, name=None, roles=None, ui_settings=None, local_vars_configuration=None):  # noqa: E501
        """UserResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._apikey = None
        self._directory_id = None
        self._display_name = None
        self._email = None
        self._name = None
        self._roles = None
        self._ui_settings = None
        self.discriminator = None

        if apikey is not None:
            self.apikey = apikey
        if directory_id is not None:
            self.directory_id = directory_id
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if roles is not None:
            self.roles = roles
        if ui_settings is not None:
            self.ui_settings = ui_settings

    @property
    def apikey(self):
        """Gets the apikey of this UserResponse.  # noqa: E501

        Associated apikey with this user  # noqa: E501

        :return: The apikey of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this UserResponse.

        Associated apikey with this user  # noqa: E501

        :param apikey: The apikey of this UserResponse.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def directory_id(self):
        """Gets the directory_id of this UserResponse.  # noqa: E501

        To which User Directories belongs to (LOCAL/System/etc.)  # noqa: E501

        :return: The directory_id of this UserResponse.  # noqa: E501
        :rtype: int
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this UserResponse.

        To which User Directories belongs to (LOCAL/System/etc.)  # noqa: E501

        :param directory_id: The directory_id of this UserResponse.  # noqa: E501
        :type: int
        """

        self._directory_id = directory_id

    @property
    def display_name(self):
        """Gets the display_name of this UserResponse.  # noqa: E501

        Which is the name showed in the Management Console  # noqa: E501

        :return: The display_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserResponse.

        Which is the name showed in the Management Console  # noqa: E501

        :param display_name: The display_name of this UserResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserResponse.  # noqa: E501

        User's email address  # noqa: E501

        :return: The email of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserResponse.

        User's email address  # noqa: E501

        :param email: The email of this UserResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this UserResponse.  # noqa: E501

        User's full name  # noqa: E501

        :return: The name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserResponse.

        User's full name  # noqa: E501

        :param name: The name of this UserResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this UserResponse.  # noqa: E501

        A list of roles attached to this user  # noqa: E501

        :return: The roles of this UserResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserResponse.

        A list of roles attached to this user  # noqa: E501

        :param roles: The roles of this UserResponse.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def ui_settings(self):
        """Gets the ui_settings of this UserResponse.  # noqa: E501

        Configuration of Management Console for this user.  # noqa: E501

        :return: The ui_settings of this UserResponse.  # noqa: E501
        :rtype: object
        """
        return self._ui_settings

    @ui_settings.setter
    def ui_settings(self, ui_settings):
        """Sets the ui_settings of this UserResponse.

        Configuration of Management Console for this user.  # noqa: E501

        :param ui_settings: The ui_settings of this UserResponse.  # noqa: E501
        :type: object
        """

        self._ui_settings = ui_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserResponse):
            return True

        return self.to_dict() != other.to_dict()
