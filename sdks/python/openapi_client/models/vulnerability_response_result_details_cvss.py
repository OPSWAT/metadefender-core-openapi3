# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VulnerabilityResponseResultDetailsCvss(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_complexity': 'str',
        'access_vector': 'str',
        'authentication': 'str',
        'availability_impact': 'str',
        'confidentiality_impact': 'str',
        'generated_on_epoch': 'str',
        'integrity_impact': 'str',
        'score': 'str',
        'source': 'str'
    }

    attribute_map = {
        'access_complexity': 'access-complexity',
        'access_vector': 'access-vector',
        'authentication': 'authentication',
        'availability_impact': 'availability-impact',
        'confidentiality_impact': 'confidentiality-impact',
        'generated_on_epoch': 'generated-on-epoch',
        'integrity_impact': 'integrity-impact',
        'score': 'score',
        'source': 'source'
    }

    def __init__(self, access_complexity=None, access_vector=None, authentication=None, availability_impact=None, confidentiality_impact=None, generated_on_epoch=None, integrity_impact=None, score=None, source=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityResponseResultDetailsCvss - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_complexity = None
        self._access_vector = None
        self._authentication = None
        self._availability_impact = None
        self._confidentiality_impact = None
        self._generated_on_epoch = None
        self._integrity_impact = None
        self._score = None
        self._source = None
        self.discriminator = None

        if access_complexity is not None:
            self.access_complexity = access_complexity
        if access_vector is not None:
            self.access_vector = access_vector
        if authentication is not None:
            self.authentication = authentication
        if availability_impact is not None:
            self.availability_impact = availability_impact
        if confidentiality_impact is not None:
            self.confidentiality_impact = confidentiality_impact
        if generated_on_epoch is not None:
            self.generated_on_epoch = generated_on_epoch
        if integrity_impact is not None:
            self.integrity_impact = integrity_impact
        if score is not None:
            self.score = score
        if source is not None:
            self.source = source

    @property
    def access_complexity(self):
        """Gets the access_complexity of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS access-complexity descriptor  # noqa: E501

        :return: The access_complexity of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._access_complexity

    @access_complexity.setter
    def access_complexity(self, access_complexity):
        """Sets the access_complexity of this VulnerabilityResponseResultDetailsCvss.

        A CVSS access-complexity descriptor  # noqa: E501

        :param access_complexity: The access_complexity of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._access_complexity = access_complexity

    @property
    def access_vector(self):
        """Gets the access_vector of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS access-vector descriptor  # noqa: E501

        :return: The access_vector of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._access_vector

    @access_vector.setter
    def access_vector(self, access_vector):
        """Sets the access_vector of this VulnerabilityResponseResultDetailsCvss.

        A CVSS access-vector descriptor  # noqa: E501

        :param access_vector: The access_vector of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._access_vector = access_vector

    @property
    def authentication(self):
        """Gets the authentication of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS authentication descriptor  # noqa: E501

        :return: The authentication of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this VulnerabilityResponseResultDetailsCvss.

        A CVSS authentication descriptor  # noqa: E501

        :param authentication: The authentication of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._authentication = authentication

    @property
    def availability_impact(self):
        """Gets the availability_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS availability impact descriptor  # noqa: E501

        :return: The availability_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._availability_impact

    @availability_impact.setter
    def availability_impact(self, availability_impact):
        """Sets the availability_impact of this VulnerabilityResponseResultDetailsCvss.

        A CVSS availability impact descriptor  # noqa: E501

        :param availability_impact: The availability_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._availability_impact = availability_impact

    @property
    def confidentiality_impact(self):
        """Gets the confidentiality_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS confidentiality impact descriptor  # noqa: E501

        :return: The confidentiality_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact):
        """Sets the confidentiality_impact of this VulnerabilityResponseResultDetailsCvss.

        A CVSS confidentiality impact descriptor  # noqa: E501

        :param confidentiality_impact: The confidentiality_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._confidentiality_impact = confidentiality_impact

    @property
    def generated_on_epoch(self):
        """Gets the generated_on_epoch of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        An epoch timestamp indicating CVSS generation time  # noqa: E501

        :return: The generated_on_epoch of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._generated_on_epoch

    @generated_on_epoch.setter
    def generated_on_epoch(self, generated_on_epoch):
        """Sets the generated_on_epoch of this VulnerabilityResponseResultDetailsCvss.

        An epoch timestamp indicating CVSS generation time  # noqa: E501

        :param generated_on_epoch: The generated_on_epoch of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._generated_on_epoch = generated_on_epoch

    @property
    def integrity_impact(self):
        """Gets the integrity_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS integrity impact descriptor  # noqa: E501

        :return: The integrity_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact):
        """Sets the integrity_impact of this VulnerabilityResponseResultDetailsCvss.

        A CVSS integrity impact descriptor  # noqa: E501

        :param integrity_impact: The integrity_impact of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._integrity_impact = integrity_impact

    @property
    def score(self):
        """Gets the score of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS 10-point severity score  # noqa: E501

        :return: The score of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this VulnerabilityResponseResultDetailsCvss.

        A CVSS 10-point severity score  # noqa: E501

        :param score: The score of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def source(self):
        """Gets the source of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501

        A CVSS source descriptor  # noqa: E501

        :return: The source of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VulnerabilityResponseResultDetailsCvss.

        A CVSS source descriptor  # noqa: E501

        :param source: The source of this VulnerabilityResponseResultDetailsCvss.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityResponseResultDetailsCvss):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityResponseResultDetailsCvss):
            return True

        return self.to_dict() != other.to_dict()
