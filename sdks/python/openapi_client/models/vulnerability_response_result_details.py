# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VulnerabilityResponseResultDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpe': 'str',
        'cve': 'str',
        'cvss': 'VulnerabilityResponseResultDetailsCvss',
        'cwe': 'str',
        'last_modified_epoch': 'str',
        'published_epoch': 'str',
        'references': 'list[str]'
    }

    attribute_map = {
        'cpe': 'cpe',
        'cve': 'cve',
        'cvss': 'cvss',
        'cwe': 'cwe',
        'last_modified_epoch': 'last_modified_epoch',
        'published_epoch': 'published-epoch',
        'references': 'references'
    }

    def __init__(self, cpe=None, cve=None, cvss=None, cwe=None, last_modified_epoch=None, published_epoch=None, references=None, local_vars_configuration=None):  # noqa: E501
        """VulnerabilityResponseResultDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpe = None
        self._cve = None
        self._cvss = None
        self._cwe = None
        self._last_modified_epoch = None
        self._published_epoch = None
        self._references = None
        self.discriminator = None

        if cpe is not None:
            self.cpe = cpe
        if cve is not None:
            self.cve = cve
        if cvss is not None:
            self.cvss = cvss
        if cwe is not None:
            self.cwe = cwe
        if last_modified_epoch is not None:
            self.last_modified_epoch = last_modified_epoch
        if published_epoch is not None:
            self.published_epoch = published_epoch
        if references is not None:
            self.references = references

    @property
    def cpe(self):
        """Gets the cpe of this VulnerabilityResponseResultDetails.  # noqa: E501

        A CPE product reference  # noqa: E501

        :return: The cpe of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this VulnerabilityResponseResultDetails.

        A CPE product reference  # noqa: E501

        :param cpe: The cpe of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: str
        """

        self._cpe = cpe

    @property
    def cve(self):
        """Gets the cve of this VulnerabilityResponseResultDetails.  # noqa: E501

        A CVE identification string  # noqa: E501

        :return: The cve of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this VulnerabilityResponseResultDetails.

        A CVE identification string  # noqa: E501

        :param cve: The cve of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: str
        """

        self._cve = cve

    @property
    def cvss(self):
        """Gets the cvss of this VulnerabilityResponseResultDetails.  # noqa: E501


        :return: The cvss of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: VulnerabilityResponseResultDetailsCvss
        """
        return self._cvss

    @cvss.setter
    def cvss(self, cvss):
        """Sets the cvss of this VulnerabilityResponseResultDetails.


        :param cvss: The cvss of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: VulnerabilityResponseResultDetailsCvss
        """

        self._cvss = cvss

    @property
    def cwe(self):
        """Gets the cwe of this VulnerabilityResponseResultDetails.  # noqa: E501

        A CWE group identification string  # noqa: E501

        :return: The cwe of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._cwe

    @cwe.setter
    def cwe(self, cwe):
        """Sets the cwe of this VulnerabilityResponseResultDetails.

        A CWE group identification string  # noqa: E501

        :param cwe: The cwe of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: str
        """

        self._cwe = cwe

    @property
    def last_modified_epoch(self):
        """Gets the last_modified_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501

        An epoch timestamp indicating source last update time  # noqa: E501

        :return: The last_modified_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_epoch

    @last_modified_epoch.setter
    def last_modified_epoch(self, last_modified_epoch):
        """Sets the last_modified_epoch of this VulnerabilityResponseResultDetails.

        An epoch timestamp indicating source last update time  # noqa: E501

        :param last_modified_epoch: The last_modified_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: str
        """

        self._last_modified_epoch = last_modified_epoch

    @property
    def published_epoch(self):
        """Gets the published_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501

        An epoch timestamp indicating source publishing time  # noqa: E501

        :return: The published_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._published_epoch

    @published_epoch.setter
    def published_epoch(self, published_epoch):
        """Sets the published_epoch of this VulnerabilityResponseResultDetails.

        An epoch timestamp indicating source publishing time  # noqa: E501

        :param published_epoch: The published_epoch of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: str
        """

        self._published_epoch = published_epoch

    @property
    def references(self):
        """Gets the references of this VulnerabilityResponseResultDetails.  # noqa: E501

        An array of external reference links  # noqa: E501

        :return: The references of this VulnerabilityResponseResultDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this VulnerabilityResponseResultDetails.

        An array of external reference links  # noqa: E501

        :param references: The references of this VulnerabilityResponseResultDetails.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityResponseResultDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityResponseResultDetails):
            return True

        return self.to_dict() != other.to_dict()
