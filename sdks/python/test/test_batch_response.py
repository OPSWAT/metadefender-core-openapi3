# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.batch_response import BatchResponse  # noqa: E501
from openapi_client.rest import ApiException

class TestBatchResponse(unittest.TestCase):
    """BatchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BatchResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.batch_response.BatchResponse()  # noqa: E501
        if include_optional :
            return BatchResponse(
                batch_files = openapi_client.models.batch_response_batch_files.BatchResponse_batch_files(
                    batch_count = 4, 
                    files_in_batch = [
                        openapi_client.models.batch_response_batch_files_files_in_batch.BatchResponse_batch_files_files_in_batch(
                            data_id = '24c8b5dadd48445989ac3431544fdc34', 
                            detected_by = 4, 
                            display_name = 'eicar.com', 
                            file_size = 68, 
                            file_type = 'application/octet-stream', 
                            file_type_description = 'EICAR virus test files', 
                            process_info = openapi_client.models.batch_response_batch_files_process_info.BatchResponse_batch_files_process_info(
                                blocked_reason = 'Infected', 
                                progress_percentage = 100, 
                                result = 'Blocked', 
                                verdicts = [Infected], ), 
                            progress_percentage = 100, 
                            scan_all_result_a = Infected, 
                            scan_all_result_i = 1, 
                            scanned_with = 4, )
                        ], 
                    first_index = 0, 
                    page_size = 50, ), 
                batch_id = 'b7cc760038324b02908a5c111cb1563d', 
                is_closed = False, 
                process_info = openapi_client.models.batch_response_process_info.BatchResponse_process_info(
                    blocked_reason = 'Infected', 
                    file_type_skipped_scan = False, 
                    profile = 'File process', 
                    result = 'Blocked', 
                    user_agent = 'mdicapserver', 
                    username = 'LOCAL/admin', ), 
                scan_results = openapi_client.models.batch_response_scan_results.BatchResponse_scan_results(
                    batch_id = 'b7cc760038324b02908a5c111cb1563d', 
                    scan_all_result_a = Infected, 
                    scan_all_result_i = 1, 
                    start_time = '2020-03-12T08:37:05.427Z', 
                    total_avs = 0, 
                    total_time = 18403, ), 
                user_data = 'http://localhost:8008/'
            )
        else :
            return BatchResponse(
        )

    def testBatchResponse(self):
        """Test BatchResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
