# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import openapi_client
from openapi_client.api.analysis_api import AnalysisApi  # noqa: E501
from openapi_client.rest import ApiException


class TestAnalysisApi(unittest.TestCase):
    """AnalysisApi unit test stubs"""

    def setUp(self):
        self.api = openapi_client.api.analysis_api.AnalysisApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_analysis_rules(self):
        """Test case for analysis_rules

        Fetching Available Analysis Rules  # noqa: E501
        """
        pass

    def test_file_analysis_cancel(self):
        """Test case for file_analysis_cancel

        Cancel File Analysis  # noqa: E501
        """
        pass

    def test_file_analysis_get(self):
        """Test case for file_analysis_get

        Fetch Analysis Result  # noqa: E501
        """
        pass

    def test_file_analysis_post(self):
        """Test case for file_analysis_post

        Analyze File  # noqa: E501
        """
        pass

    def test_sanitized_file(self):
        """Test case for sanitized_file

        Download Sanitized Files  # noqa: E501
        """
        pass

    def test_webhook_status(self):
        """Test case for webhook_status

        Query webhook status  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
