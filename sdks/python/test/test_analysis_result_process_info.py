# coding: utf-8

"""
    MetaDefender Core

    ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.   # noqa: E501

    The version of the OpenAPI document: v4.18.0
    Contact: feedback@opswat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.analysis_result_process_info import AnalysisResultProcessInfo  # noqa: E501
from openapi_client.rest import ApiException

class TestAnalysisResultProcessInfo(unittest.TestCase):
    """AnalysisResultProcessInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AnalysisResultProcessInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.analysis_result_process_info.AnalysisResultProcessInfo()  # noqa: E501
        if include_optional :
            return AnalysisResultProcessInfo(
                blocked_reason = 'Sensitive Data Found', 
                file_type_skipped_scan = False, 
                outdated_data = [enginedefinition, configuration, sanitization], 
                processing_time = 4804, 
                profile = 'File process', 
                progress_percentage = 100, 
                queue_time = 321, 
                result = 'Blocked', 
                user_agent = 'webscan', 
                username = 'LOCAL/admin', 
                verdicts = [Sensitive Data Found], 
                post_processing = openapi_client.models.analysis_result_process_info_post_processing.AnalysisResult_process_info_post_processing(
                    actions_failed = 'Sanitization Failed | PAscript failed', 
                    actions_ran = 'Sanitized | PAscript', 
                    converted_destination = 'OPSWAT_Proactive_DLP_CCN_sanitized.pdf', 
                    converted_to = '0', 
                    copy_move_destination = '0', 
                    sanitization_details = null, )
            )
        else :
            return AnalysisResultProcessInfo(
        )

    def testAnalysisResultProcessInfo(self):
        """Test AnalysisResultProcessInfo"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
