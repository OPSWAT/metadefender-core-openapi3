/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// basic information of the scanned file
    /// </summary>
    [DataContract]
    public partial class FileInformation :  IEquatable<FileInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInformation" /> class.
        /// </summary>
        /// <param name="displayName">The filename reported via &#x60;filename&#x60; header..</param>
        /// <param name="fileSize">Total file size in bytes..</param>
        /// <param name="fileType">The filetype using mimetype..</param>
        /// <param name="fileTypeDescription">The filetype in human readable format..</param>
        /// <param name="md5">File&#39;s MD5 hash..</param>
        /// <param name="sha1">File&#39;s SHA1 hash..</param>
        /// <param name="sha256">File&#39;s SHA256 Hash..</param>
        /// <param name="uploadTimestamp">The timestamp when file was successfully uploaded to MetaDefender..</param>
        public FileInformation(string displayName = default(string), int fileSize = default(int), string fileType = default(string), string fileTypeDescription = default(string), string md5 = default(string), string sha1 = default(string), string sha256 = default(string), string uploadTimestamp = default(string))
        {
            this.DisplayName = displayName;
            this.FileSize = fileSize;
            this.FileType = fileType;
            this.FileTypeDescription = fileTypeDescription;
            this.Md5 = md5;
            this.Sha1 = sha1;
            this.Sha256 = sha256;
            this.UploadTimestamp = uploadTimestamp;
        }
        
        /// <summary>
        /// The filename reported via &#x60;filename&#x60; header.
        /// </summary>
        /// <value>The filename reported via &#x60;filename&#x60; header.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Total file size in bytes.
        /// </summary>
        /// <value>Total file size in bytes.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public int FileSize { get; set; }

        /// <summary>
        /// The filetype using mimetype.
        /// </summary>
        /// <value>The filetype using mimetype.</value>
        [DataMember(Name="file_type", EmitDefaultValue=false)]
        public string FileType { get; set; }

        /// <summary>
        /// The filetype in human readable format.
        /// </summary>
        /// <value>The filetype in human readable format.</value>
        [DataMember(Name="file_type_description", EmitDefaultValue=false)]
        public string FileTypeDescription { get; set; }

        /// <summary>
        /// File&#39;s MD5 hash.
        /// </summary>
        /// <value>File&#39;s MD5 hash.</value>
        [DataMember(Name="md5", EmitDefaultValue=false)]
        public string Md5 { get; set; }

        /// <summary>
        /// File&#39;s SHA1 hash.
        /// </summary>
        /// <value>File&#39;s SHA1 hash.</value>
        [DataMember(Name="sha1", EmitDefaultValue=false)]
        public string Sha1 { get; set; }

        /// <summary>
        /// File&#39;s SHA256 Hash.
        /// </summary>
        /// <value>File&#39;s SHA256 Hash.</value>
        [DataMember(Name="sha256", EmitDefaultValue=false)]
        public string Sha256 { get; set; }

        /// <summary>
        /// The timestamp when file was successfully uploaded to MetaDefender.
        /// </summary>
        /// <value>The timestamp when file was successfully uploaded to MetaDefender.</value>
        [DataMember(Name="upload_timestamp", EmitDefaultValue=false)]
        public string UploadTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileInformation {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  FileTypeDescription: ").Append(FileTypeDescription).Append("\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  Sha1: ").Append(Sha1).Append("\n");
            sb.Append("  Sha256: ").Append(Sha256).Append("\n");
            sb.Append("  UploadTimestamp: ").Append(UploadTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileInformation);
        }

        /// <summary>
        /// Returns true if FileInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of FileInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.FileTypeDescription == input.FileTypeDescription ||
                    (this.FileTypeDescription != null &&
                    this.FileTypeDescription.Equals(input.FileTypeDescription))
                ) && 
                (
                    this.Md5 == input.Md5 ||
                    (this.Md5 != null &&
                    this.Md5.Equals(input.Md5))
                ) && 
                (
                    this.Sha1 == input.Sha1 ||
                    (this.Sha1 != null &&
                    this.Sha1.Equals(input.Sha1))
                ) && 
                (
                    this.Sha256 == input.Sha256 ||
                    (this.Sha256 != null &&
                    this.Sha256.Equals(input.Sha256))
                ) && 
                (
                    this.UploadTimestamp == input.UploadTimestamp ||
                    (this.UploadTimestamp != null &&
                    this.UploadTimestamp.Equals(input.UploadTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.FileTypeDescription != null)
                    hashCode = hashCode * 59 + this.FileTypeDescription.GetHashCode();
                if (this.Md5 != null)
                    hashCode = hashCode * 59 + this.Md5.GetHashCode();
                if (this.Sha1 != null)
                    hashCode = hashCode * 59 + this.Sha1.GetHashCode();
                if (this.Sha256 != null)
                    hashCode = hashCode * 59 + this.Sha256.GetHashCode();
                if (this.UploadTimestamp != null)
                    hashCode = hashCode * 59 + this.UploadTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
