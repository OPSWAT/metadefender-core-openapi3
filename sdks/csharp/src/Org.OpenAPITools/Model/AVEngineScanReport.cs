/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Scan report per each engine.
    /// </summary>
    [DataContract]
    public partial class AVEngineScanReport :  IEquatable<AVEngineScanReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AVEngineScanReport" /> class.
        /// </summary>
        /// <param name="defTime">The database definition time for this engine.</param>
        /// <param name="engId">The  unique identification string for the engine.</param>
        /// <param name="location">Where this engine is deployed (local/remote)..</param>
        /// <param name="scanResultI">Scan result as index in the Processing Results table.</param>
        /// <param name="scanTime">The time elapsed during scan with this engine (in milliseconds)..</param>
        /// <param name="threatFound">The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine..</param>
        /// <param name="waitTime">Time elapsed between sending file to node and receiving the result from the engine (in milliseconds)..</param>
        public AVEngineScanReport(string defTime = default(string), string engId = default(string), string location = default(string), int scanResultI = default(int), int scanTime = default(int), string threatFound = default(string), int waitTime = default(int))
        {
            this.DefTime = defTime;
            this.EngId = engId;
            this.Location = location;
            this.ScanResultI = scanResultI;
            this.ScanTime = scanTime;
            this.ThreatFound = threatFound;
            this.WaitTime = waitTime;
        }
        
        /// <summary>
        /// The database definition time for this engine
        /// </summary>
        /// <value>The database definition time for this engine</value>
        [DataMember(Name="def_time", EmitDefaultValue=false)]
        public string DefTime { get; set; }

        /// <summary>
        /// The  unique identification string for the engine
        /// </summary>
        /// <value>The  unique identification string for the engine</value>
        [DataMember(Name="eng_id", EmitDefaultValue=false)]
        public string EngId { get; set; }

        /// <summary>
        /// Where this engine is deployed (local/remote).
        /// </summary>
        /// <value>Where this engine is deployed (local/remote).</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Scan result as index in the Processing Results table
        /// </summary>
        /// <value>Scan result as index in the Processing Results table</value>
        [DataMember(Name="scan_result_i", EmitDefaultValue=false)]
        public int ScanResultI { get; set; }

        /// <summary>
        /// The time elapsed during scan with this engine (in milliseconds).
        /// </summary>
        /// <value>The time elapsed during scan with this engine (in milliseconds).</value>
        [DataMember(Name="scan_time", EmitDefaultValue=false)]
        public int ScanTime { get; set; }

        /// <summary>
        /// The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine.
        /// </summary>
        /// <value>The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine.</value>
        [DataMember(Name="threat_found", EmitDefaultValue=false)]
        public string ThreatFound { get; set; }

        /// <summary>
        /// Time elapsed between sending file to node and receiving the result from the engine (in milliseconds).
        /// </summary>
        /// <value>Time elapsed between sending file to node and receiving the result from the engine (in milliseconds).</value>
        [DataMember(Name="wait_time", EmitDefaultValue=false)]
        public int WaitTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AVEngineScanReport {\n");
            sb.Append("  DefTime: ").Append(DefTime).Append("\n");
            sb.Append("  EngId: ").Append(EngId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ScanResultI: ").Append(ScanResultI).Append("\n");
            sb.Append("  ScanTime: ").Append(ScanTime).Append("\n");
            sb.Append("  ThreatFound: ").Append(ThreatFound).Append("\n");
            sb.Append("  WaitTime: ").Append(WaitTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AVEngineScanReport);
        }

        /// <summary>
        /// Returns true if AVEngineScanReport instances are equal
        /// </summary>
        /// <param name="input">Instance of AVEngineScanReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AVEngineScanReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefTime == input.DefTime ||
                    (this.DefTime != null &&
                    this.DefTime.Equals(input.DefTime))
                ) && 
                (
                    this.EngId == input.EngId ||
                    (this.EngId != null &&
                    this.EngId.Equals(input.EngId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.ScanResultI == input.ScanResultI ||
                    (this.ScanResultI != null &&
                    this.ScanResultI.Equals(input.ScanResultI))
                ) && 
                (
                    this.ScanTime == input.ScanTime ||
                    (this.ScanTime != null &&
                    this.ScanTime.Equals(input.ScanTime))
                ) && 
                (
                    this.ThreatFound == input.ThreatFound ||
                    (this.ThreatFound != null &&
                    this.ThreatFound.Equals(input.ThreatFound))
                ) && 
                (
                    this.WaitTime == input.WaitTime ||
                    (this.WaitTime != null &&
                    this.WaitTime.Equals(input.WaitTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefTime != null)
                    hashCode = hashCode * 59 + this.DefTime.GetHashCode();
                if (this.EngId != null)
                    hashCode = hashCode * 59 + this.EngId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.ScanResultI != null)
                    hashCode = hashCode * 59 + this.ScanResultI.GetHashCode();
                if (this.ScanTime != null)
                    hashCode = hashCode * 59 + this.ScanTime.GetHashCode();
                if (this.ThreatFound != null)
                    hashCode = hashCode * 59 + this.ThreatFound.GetHashCode();
                if (this.WaitTime != null)
                    hashCode = hashCode * 59 + this.WaitTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
