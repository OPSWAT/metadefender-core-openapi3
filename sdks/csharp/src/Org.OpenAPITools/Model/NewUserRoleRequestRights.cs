/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A list of rights for each permission
    /// </summary>
    [DataContract]
    public partial class NewUserRoleRequestRights :  IEquatable<NewUserRoleRequestRights>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewUserRoleRequestRights" /> class.
        /// </summary>
        /// <param name="agents">What permissions are allowed for Node..</param>
        /// <param name="cert">What permissions are allowed for Certificates..</param>
        /// <param name="configlog">What permissions are allowed for Configuration logs..</param>
        /// <param name="engines">What permissions are allowed for Engines and Modules..</param>
        /// <param name="external">What permissions are allowed for External actions (External Scanner/Post Actions)..</param>
        /// <param name="license">What permissions are allowed for managing the License..</param>
        /// <param name="quarantine">What permissions are allowed for managing the Quarantine..</param>
        /// <param name="retention">What permissions are allowed for managing the retention policies..</param>
        /// <param name="rule">What permissions are allowed for managing the workflow rules..</param>
        /// <param name="scan">What permissions are allowed for managing analysis actions..</param>
        /// <param name="scanlog">What permissions are allowed for managing the analysis logs..</param>
        /// <param name="skip">What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory..</param>
        /// <param name="update">What permissions are allowed for managing the update configuration..</param>
        /// <param name="updatelog">What permissions are allowed for managing the update logs..</param>
        /// <param name="users">What permissions are allowed for managing the users..</param>
        /// <param name="workflow">What permissions are allowed for managing the workflow templates..</param>
        /// <param name="zone">What permissions are allowed for managing the network zones..</param>
        public NewUserRoleRequestRights(RolePermissionObject agents = default(RolePermissionObject), RolePermissionObject cert = default(RolePermissionObject), RolePermissionObject configlog = default(RolePermissionObject), RolePermissionObject engines = default(RolePermissionObject), RolePermissionObject external = default(RolePermissionObject), RolePermissionObject license = default(RolePermissionObject), RolePermissionObject quarantine = default(RolePermissionObject), RolePermissionObject retention = default(RolePermissionObject), RolePermissionObject rule = default(RolePermissionObject), RolePermissionObject scan = default(RolePermissionObject), RolePermissionObject scanlog = default(RolePermissionObject), RolePermissionObject skip = default(RolePermissionObject), RolePermissionObject update = default(RolePermissionObject), RolePermissionObject updatelog = default(RolePermissionObject), RolePermissionObject users = default(RolePermissionObject), RolePermissionObject workflow = default(RolePermissionObject), RolePermissionObject zone = default(RolePermissionObject))
        {
            this.Agents = agents;
            this.Cert = cert;
            this.Configlog = configlog;
            this.Engines = engines;
            this.External = external;
            this.License = license;
            this.Quarantine = quarantine;
            this.Retention = retention;
            this.Rule = rule;
            this.Scan = scan;
            this.Scanlog = scanlog;
            this.Skip = skip;
            this.Update = update;
            this.Updatelog = updatelog;
            this.Users = users;
            this.Workflow = workflow;
            this.Zone = zone;
        }
        
        /// <summary>
        /// What permissions are allowed for Node.
        /// </summary>
        /// <value>What permissions are allowed for Node.</value>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public RolePermissionObject Agents { get; set; }

        /// <summary>
        /// What permissions are allowed for Certificates.
        /// </summary>
        /// <value>What permissions are allowed for Certificates.</value>
        [DataMember(Name="cert", EmitDefaultValue=false)]
        public RolePermissionObject Cert { get; set; }

        /// <summary>
        /// What permissions are allowed for Configuration logs.
        /// </summary>
        /// <value>What permissions are allowed for Configuration logs.</value>
        [DataMember(Name="configlog", EmitDefaultValue=false)]
        public RolePermissionObject Configlog { get; set; }

        /// <summary>
        /// What permissions are allowed for Engines and Modules.
        /// </summary>
        /// <value>What permissions are allowed for Engines and Modules.</value>
        [DataMember(Name="engines", EmitDefaultValue=false)]
        public RolePermissionObject Engines { get; set; }

        /// <summary>
        /// What permissions are allowed for External actions (External Scanner/Post Actions).
        /// </summary>
        /// <value>What permissions are allowed for External actions (External Scanner/Post Actions).</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public RolePermissionObject External { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the License.
        /// </summary>
        /// <value>What permissions are allowed for managing the License.</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public RolePermissionObject License { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the Quarantine.
        /// </summary>
        /// <value>What permissions are allowed for managing the Quarantine.</value>
        [DataMember(Name="quarantine", EmitDefaultValue=false)]
        public RolePermissionObject Quarantine { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the retention policies.
        /// </summary>
        /// <value>What permissions are allowed for managing the retention policies.</value>
        [DataMember(Name="retention", EmitDefaultValue=false)]
        public RolePermissionObject Retention { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the workflow rules.
        /// </summary>
        /// <value>What permissions are allowed for managing the workflow rules.</value>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public RolePermissionObject Rule { get; set; }

        /// <summary>
        /// What permissions are allowed for managing analysis actions.
        /// </summary>
        /// <value>What permissions are allowed for managing analysis actions.</value>
        [DataMember(Name="scan", EmitDefaultValue=false)]
        public RolePermissionObject Scan { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the analysis logs.
        /// </summary>
        /// <value>What permissions are allowed for managing the analysis logs.</value>
        [DataMember(Name="scanlog", EmitDefaultValue=false)]
        public RolePermissionObject Scanlog { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.
        /// </summary>
        /// <value>What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.</value>
        [DataMember(Name="skip", EmitDefaultValue=false)]
        public RolePermissionObject Skip { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the update configuration.
        /// </summary>
        /// <value>What permissions are allowed for managing the update configuration.</value>
        [DataMember(Name="update", EmitDefaultValue=false)]
        public RolePermissionObject Update { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the update logs.
        /// </summary>
        /// <value>What permissions are allowed for managing the update logs.</value>
        [DataMember(Name="updatelog", EmitDefaultValue=false)]
        public RolePermissionObject Updatelog { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the users.
        /// </summary>
        /// <value>What permissions are allowed for managing the users.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public RolePermissionObject Users { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the workflow templates.
        /// </summary>
        /// <value>What permissions are allowed for managing the workflow templates.</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public RolePermissionObject Workflow { get; set; }

        /// <summary>
        /// What permissions are allowed for managing the network zones.
        /// </summary>
        /// <value>What permissions are allowed for managing the network zones.</value>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public RolePermissionObject Zone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewUserRoleRequestRights {\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  Cert: ").Append(Cert).Append("\n");
            sb.Append("  Configlog: ").Append(Configlog).Append("\n");
            sb.Append("  Engines: ").Append(Engines).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Quarantine: ").Append(Quarantine).Append("\n");
            sb.Append("  Retention: ").Append(Retention).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  Scan: ").Append(Scan).Append("\n");
            sb.Append("  Scanlog: ").Append(Scanlog).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  Updatelog: ").Append(Updatelog).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewUserRoleRequestRights);
        }

        /// <summary>
        /// Returns true if NewUserRoleRequestRights instances are equal
        /// </summary>
        /// <param name="input">Instance of NewUserRoleRequestRights to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewUserRoleRequestRights input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Agents == input.Agents ||
                    (this.Agents != null &&
                    this.Agents.Equals(input.Agents))
                ) && 
                (
                    this.Cert == input.Cert ||
                    (this.Cert != null &&
                    this.Cert.Equals(input.Cert))
                ) && 
                (
                    this.Configlog == input.Configlog ||
                    (this.Configlog != null &&
                    this.Configlog.Equals(input.Configlog))
                ) && 
                (
                    this.Engines == input.Engines ||
                    (this.Engines != null &&
                    this.Engines.Equals(input.Engines))
                ) && 
                (
                    this.External == input.External ||
                    (this.External != null &&
                    this.External.Equals(input.External))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Quarantine == input.Quarantine ||
                    (this.Quarantine != null &&
                    this.Quarantine.Equals(input.Quarantine))
                ) && 
                (
                    this.Retention == input.Retention ||
                    (this.Retention != null &&
                    this.Retention.Equals(input.Retention))
                ) && 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.Scan == input.Scan ||
                    (this.Scan != null &&
                    this.Scan.Equals(input.Scan))
                ) && 
                (
                    this.Scanlog == input.Scanlog ||
                    (this.Scanlog != null &&
                    this.Scanlog.Equals(input.Scanlog))
                ) && 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                ) && 
                (
                    this.Updatelog == input.Updatelog ||
                    (this.Updatelog != null &&
                    this.Updatelog.Equals(input.Updatelog))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.Cert != null)
                    hashCode = hashCode * 59 + this.Cert.GetHashCode();
                if (this.Configlog != null)
                    hashCode = hashCode * 59 + this.Configlog.GetHashCode();
                if (this.Engines != null)
                    hashCode = hashCode * 59 + this.Engines.GetHashCode();
                if (this.External != null)
                    hashCode = hashCode * 59 + this.External.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Quarantine != null)
                    hashCode = hashCode * 59 + this.Quarantine.GetHashCode();
                if (this.Retention != null)
                    hashCode = hashCode * 59 + this.Retention.GetHashCode();
                if (this.Rule != null)
                    hashCode = hashCode * 59 + this.Rule.GetHashCode();
                if (this.Scan != null)
                    hashCode = hashCode * 59 + this.Scan.GetHashCode();
                if (this.Scanlog != null)
                    hashCode = hashCode * 59 + this.Scanlog.GetHashCode();
                if (this.Skip != null)
                    hashCode = hashCode * 59 + this.Skip.GetHashCode();
                if (this.Update != null)
                    hashCode = hashCode * 59 + this.Update.GetHashCode();
                if (this.Updatelog != null)
                    hashCode = hashCode * 59 + this.Updatelog.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
