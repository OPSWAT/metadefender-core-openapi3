/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Detected products object is present if input hash has been found to correspond to verified product
    /// </summary>
    [DataContract]
    public partial class VulnerabilityResponseResultDetectedProduct :  IEquatable<VulnerabilityResponseResultDetectedProduct>, IValidatableObject
    {
        /// <summary>
        /// String description of Severity level:    * &#x60;low&#x60;    * &#x60;moderate&#x60;   * &#x60;important&#x60;   * &#x60;critical&#x60;   * &#x60;not_available&#x60;   * &#x60;unknown&#x60; 
        /// </summary>
        /// <value>String description of Severity level:    * &#x60;low&#x60;    * &#x60;moderate&#x60;   * &#x60;important&#x60;   * &#x60;critical&#x60;   * &#x60;not_available&#x60;   * &#x60;unknown&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 1,

            /// <summary>
            /// Enum Moderate for value: moderate
            /// </summary>
            [EnumMember(Value = "moderate")]
            Moderate = 2,

            /// <summary>
            /// Enum Important for value: important
            /// </summary>
            [EnumMember(Value = "important")]
            Important = 3,

            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 4,

            /// <summary>
            /// Enum Notavailable for value: not_available
            /// </summary>
            [EnumMember(Value = "not_available")]
            Notavailable = 5,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 6

        }

        /// <summary>
        /// String description of Severity level:    * &#x60;low&#x60;    * &#x60;moderate&#x60;   * &#x60;important&#x60;   * &#x60;critical&#x60;   * &#x60;not_available&#x60;   * &#x60;unknown&#x60; 
        /// </summary>
        /// <value>String description of Severity level:    * &#x60;low&#x60;    * &#x60;moderate&#x60;   * &#x60;important&#x60;   * &#x60;critical&#x60;   * &#x60;not_available&#x60;   * &#x60;unknown&#x60; </value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityResponseResultDetectedProduct" /> class.
        /// </summary>
        /// <param name="hasVulnerability">Indicates whether any vulnerabilities have been associated with the particular product.</param>
        /// <param name="isCurrent">True if this product&#39;s patch level is current, defaults to true.</param>
        /// <param name="product">product.</param>
        /// <param name="remediationLink">A link where product updates or patches can be obtained.</param>
        /// <param name="severity">String description of Severity level:    * &#x60;low&#x60;    * &#x60;moderate&#x60;   * &#x60;important&#x60;   * &#x60;critical&#x60;   * &#x60;not_available&#x60;   * &#x60;unknown&#x60; .</param>
        /// <param name="sigName">Product signature descriptor.</param>
        /// <param name="signature">OPSWAT signature id.</param>
        /// <param name="vendor">vendor.</param>
        /// <param name="version">The installed product version.</param>
        /// <param name="versionData">versionData.</param>
        public VulnerabilityResponseResultDetectedProduct(bool hasVulnerability = default(bool), bool isCurrent = default(bool), VulnerabilityResponseResultDetectedProductProduct product = default(VulnerabilityResponseResultDetectedProductProduct), string remediationLink = default(string), SeverityEnum? severity = default(SeverityEnum?), string sigName = default(string), int signature = default(int), VulnerabilityResponseResultDetectedProductVendor vendor = default(VulnerabilityResponseResultDetectedProductVendor), string version = default(string), VulnerabilityResponseResultDetectedProductVersionData versionData = default(VulnerabilityResponseResultDetectedProductVersionData))
        {
            this.HasVulnerability = hasVulnerability;
            this.IsCurrent = isCurrent;
            this.Product = product;
            this.RemediationLink = remediationLink;
            this.Severity = severity;
            this.SigName = sigName;
            this.Signature = signature;
            this.Vendor = vendor;
            this.Version = version;
            this.VersionData = versionData;
        }
        
        /// <summary>
        /// Indicates whether any vulnerabilities have been associated with the particular product
        /// </summary>
        /// <value>Indicates whether any vulnerabilities have been associated with the particular product</value>
        [DataMember(Name="has_vulnerability", EmitDefaultValue=false)]
        public bool HasVulnerability { get; set; }

        /// <summary>
        /// True if this product&#39;s patch level is current, defaults to true
        /// </summary>
        /// <value>True if this product&#39;s patch level is current, defaults to true</value>
        [DataMember(Name="is_current", EmitDefaultValue=false)]
        public bool IsCurrent { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public VulnerabilityResponseResultDetectedProductProduct Product { get; set; }

        /// <summary>
        /// A link where product updates or patches can be obtained
        /// </summary>
        /// <value>A link where product updates or patches can be obtained</value>
        [DataMember(Name="remediation_link", EmitDefaultValue=false)]
        public string RemediationLink { get; set; }


        /// <summary>
        /// Product signature descriptor
        /// </summary>
        /// <value>Product signature descriptor</value>
        [DataMember(Name="sig_name", EmitDefaultValue=false)]
        public string SigName { get; set; }

        /// <summary>
        /// OPSWAT signature id
        /// </summary>
        /// <value>OPSWAT signature id</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public int Signature { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public VulnerabilityResponseResultDetectedProductVendor Vendor { get; set; }

        /// <summary>
        /// The installed product version
        /// </summary>
        /// <value>The installed product version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets VersionData
        /// </summary>
        [DataMember(Name="version_data", EmitDefaultValue=false)]
        public VulnerabilityResponseResultDetectedProductVersionData VersionData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityResponseResultDetectedProduct {\n");
            sb.Append("  HasVulnerability: ").Append(HasVulnerability).Append("\n");
            sb.Append("  IsCurrent: ").Append(IsCurrent).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  RemediationLink: ").Append(RemediationLink).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  SigName: ").Append(SigName).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionData: ").Append(VersionData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityResponseResultDetectedProduct);
        }

        /// <summary>
        /// Returns true if VulnerabilityResponseResultDetectedProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityResponseResultDetectedProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityResponseResultDetectedProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasVulnerability == input.HasVulnerability ||
                    (this.HasVulnerability != null &&
                    this.HasVulnerability.Equals(input.HasVulnerability))
                ) && 
                (
                    this.IsCurrent == input.IsCurrent ||
                    (this.IsCurrent != null &&
                    this.IsCurrent.Equals(input.IsCurrent))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.RemediationLink == input.RemediationLink ||
                    (this.RemediationLink != null &&
                    this.RemediationLink.Equals(input.RemediationLink))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.SigName == input.SigName ||
                    (this.SigName != null &&
                    this.SigName.Equals(input.SigName))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.VersionData == input.VersionData ||
                    (this.VersionData != null &&
                    this.VersionData.Equals(input.VersionData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HasVulnerability != null)
                    hashCode = hashCode * 59 + this.HasVulnerability.GetHashCode();
                if (this.IsCurrent != null)
                    hashCode = hashCode * 59 + this.IsCurrent.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.RemediationLink != null)
                    hashCode = hashCode * 59 + this.RemediationLink.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.SigName != null)
                    hashCode = hashCode * 59 + this.SigName.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.VersionData != null)
                    hashCode = hashCode * 59 + this.VersionData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
