/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineResponse20012
    /// </summary>
    [DataContract]
    public partial class InlineResponse20012 :  IEquatable<InlineResponse20012>, IValidatableObject
    {
        /// <summary>
        /// Engine&#39;s type:    * av   * archive   * filetype 
        /// </summary>
        /// <value>Engine&#39;s type:    * av   * archive   * filetype </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EngineTypeEnum
        {
            /// <summary>
            /// Enum Av for value: av
            /// </summary>
            [EnumMember(Value = "av")]
            Av = 1,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            [EnumMember(Value = "archive")]
            Archive = 2,

            /// <summary>
            /// Enum Filetype for value: filetype
            /// </summary>
            [EnumMember(Value = "filetype")]
            Filetype = 3

        }

        /// <summary>
        /// Engine&#39;s type:    * av   * archive   * filetype 
        /// </summary>
        /// <value>Engine&#39;s type:    * av   * archive   * filetype </value>
        [DataMember(Name="engine_type", EmitDefaultValue=false)]
        public EngineTypeEnum? EngineType { get; set; }
        /// <summary>
        /// Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed 
        /// </summary>
        /// <value>Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Downloading for value: downloading
            /// </summary>
            [EnumMember(Value = "downloading")]
            Downloading = 1,

            /// <summary>
            /// Enum Downloaded for value: downloaded
            /// </summary>
            [EnumMember(Value = "downloaded")]
            Downloaded = 2,

            /// <summary>
            /// Enum Staging for value: staging
            /// </summary>
            [EnumMember(Value = "staging")]
            Staging = 3,

            /// <summary>
            /// Enum Production for value: production
            /// </summary>
            [EnumMember(Value = "production")]
            Production = 4,

            /// <summary>
            /// Enum Removed for value: removed
            /// </summary>
            [EnumMember(Value = "removed")]
            Removed = 5,

            /// <summary>
            /// Enum Temporaryfailed for value: temporary failed
            /// </summary>
            [EnumMember(Value = "temporary failed")]
            Temporaryfailed = 6,

            /// <summary>
            /// Enum Permanentlyfailed for value: permanently failed
            /// </summary>
            [EnumMember(Value = "permanently failed")]
            Permanentlyfailed = 7,

            /// <summary>
            /// Enum Contentinvalid for value: content invalid
            /// </summary>
            [EnumMember(Value = "content invalid")]
            Contentinvalid = 8,

            /// <summary>
            /// Enum Downloadfailed for value: download failed
            /// </summary>
            [EnumMember(Value = "download failed")]
            Downloadfailed = 9

        }

        /// <summary>
        /// Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed 
        /// </summary>
        /// <value>Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012" /> class.
        /// </summary>
        /// <param name="active">If used by at least one engine.</param>
        /// <param name="defTime">The database definition time for this engine.</param>
        /// <param name="downloadProgress">The percentage progress of download.</param>
        /// <param name="downloadTime">When this engine downloaded from the update server..</param>
        /// <param name="engId">Engine internal ID.</param>
        /// <param name="engName">Engine name.</param>
        /// <param name="engType">Engine type in human readable form.</param>
        /// <param name="engVer">Engine&#39;s version (format differs from one engine to another)..</param>
        /// <param name="engineType">Engine&#39;s type:    * av   * archive   * filetype .</param>
        /// <param name="state">Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed .</param>
        public InlineResponse20012(bool active = default(bool), string defTime = default(string), int downloadProgress = default(int), string downloadTime = default(string), string engId = default(string), string engName = default(string), string engType = default(string), string engVer = default(string), EngineTypeEnum? engineType = default(EngineTypeEnum?), StateEnum? state = default(StateEnum?))
        {
            this.Active = active;
            this.DefTime = defTime;
            this.DownloadProgress = downloadProgress;
            this.DownloadTime = downloadTime;
            this.EngId = engId;
            this.EngName = engName;
            this.EngType = engType;
            this.EngVer = engVer;
            this.EngineType = engineType;
            this.State = state;
        }
        
        /// <summary>
        /// If used by at least one engine
        /// </summary>
        /// <value>If used by at least one engine</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The database definition time for this engine
        /// </summary>
        /// <value>The database definition time for this engine</value>
        [DataMember(Name="def_time", EmitDefaultValue=false)]
        public string DefTime { get; set; }

        /// <summary>
        /// The percentage progress of download
        /// </summary>
        /// <value>The percentage progress of download</value>
        [DataMember(Name="download_progress", EmitDefaultValue=false)]
        public int DownloadProgress { get; set; }

        /// <summary>
        /// When this engine downloaded from the update server.
        /// </summary>
        /// <value>When this engine downloaded from the update server.</value>
        [DataMember(Name="download_time", EmitDefaultValue=false)]
        public string DownloadTime { get; set; }

        /// <summary>
        /// Engine internal ID
        /// </summary>
        /// <value>Engine internal ID</value>
        [DataMember(Name="eng_id", EmitDefaultValue=false)]
        public string EngId { get; set; }

        /// <summary>
        /// Engine name
        /// </summary>
        /// <value>Engine name</value>
        [DataMember(Name="eng_name", EmitDefaultValue=false)]
        public string EngName { get; set; }

        /// <summary>
        /// Engine type in human readable form
        /// </summary>
        /// <value>Engine type in human readable form</value>
        [DataMember(Name="eng_type", EmitDefaultValue=false)]
        public string EngType { get; set; }

        /// <summary>
        /// Engine&#39;s version (format differs from one engine to another).
        /// </summary>
        /// <value>Engine&#39;s version (format differs from one engine to another).</value>
        [DataMember(Name="eng_ver", EmitDefaultValue=false)]
        public string EngVer { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012 {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DefTime: ").Append(DefTime).Append("\n");
            sb.Append("  DownloadProgress: ").Append(DownloadProgress).Append("\n");
            sb.Append("  DownloadTime: ").Append(DownloadTime).Append("\n");
            sb.Append("  EngId: ").Append(EngId).Append("\n");
            sb.Append("  EngName: ").Append(EngName).Append("\n");
            sb.Append("  EngType: ").Append(EngType).Append("\n");
            sb.Append("  EngVer: ").Append(EngVer).Append("\n");
            sb.Append("  EngineType: ").Append(EngineType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012);
        }

        /// <summary>
        /// Returns true if InlineResponse20012 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.DefTime == input.DefTime ||
                    (this.DefTime != null &&
                    this.DefTime.Equals(input.DefTime))
                ) && 
                (
                    this.DownloadProgress == input.DownloadProgress ||
                    (this.DownloadProgress != null &&
                    this.DownloadProgress.Equals(input.DownloadProgress))
                ) && 
                (
                    this.DownloadTime == input.DownloadTime ||
                    (this.DownloadTime != null &&
                    this.DownloadTime.Equals(input.DownloadTime))
                ) && 
                (
                    this.EngId == input.EngId ||
                    (this.EngId != null &&
                    this.EngId.Equals(input.EngId))
                ) && 
                (
                    this.EngName == input.EngName ||
                    (this.EngName != null &&
                    this.EngName.Equals(input.EngName))
                ) && 
                (
                    this.EngType == input.EngType ||
                    (this.EngType != null &&
                    this.EngType.Equals(input.EngType))
                ) && 
                (
                    this.EngVer == input.EngVer ||
                    (this.EngVer != null &&
                    this.EngVer.Equals(input.EngVer))
                ) && 
                (
                    this.EngineType == input.EngineType ||
                    (this.EngineType != null &&
                    this.EngineType.Equals(input.EngineType))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.DefTime != null)
                    hashCode = hashCode * 59 + this.DefTime.GetHashCode();
                if (this.DownloadProgress != null)
                    hashCode = hashCode * 59 + this.DownloadProgress.GetHashCode();
                if (this.DownloadTime != null)
                    hashCode = hashCode * 59 + this.DownloadTime.GetHashCode();
                if (this.EngId != null)
                    hashCode = hashCode * 59 + this.EngId.GetHashCode();
                if (this.EngName != null)
                    hashCode = hashCode * 59 + this.EngName.GetHashCode();
                if (this.EngType != null)
                    hashCode = hashCode * 59 + this.EngType.GetHashCode();
                if (this.EngVer != null)
                    hashCode = hashCode * 59 + this.EngVer.GetHashCode();
                if (this.EngineType != null)
                    hashCode = hashCode * 59 + this.EngineType.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
