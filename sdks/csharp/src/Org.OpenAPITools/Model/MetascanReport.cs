/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Result of the scanning process.
    /// </summary>
    [DataContract]
    public partial class MetascanReport :  IEquatable<MetascanReport>, IValidatableObject
    {
        /// <summary>
        /// The overall scan result as string
        /// </summary>
        /// <value>The overall scan result as string</value>
        [DataMember(Name="scan_all_result_a", EmitDefaultValue=false)]
        public ProcessingResultsStringEnum? ScanAllResultA { get; set; }
        /// <summary>
        /// The overall scan result as index in the Processing Results table.
        /// </summary>
        /// <value>The overall scan result as index in the Processing Results table.</value>
        [DataMember(Name="scan_all_result_i", EmitDefaultValue=false)]
        public ProcessingResultsIndexEnum? ScanAllResultI { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetascanReport" /> class.
        /// </summary>
        /// <param name="dataId">Data ID of the requested file.</param>
        /// <param name="progressPercentage">Track analysis progress until reaches 100..</param>
        /// <param name="scanAllResultA">The overall scan result as string.</param>
        /// <param name="scanAllResultI">The overall scan result as index in the Processing Results table..</param>
        /// <param name="startTime">Timestamp when the scanning process starts..</param>
        /// <param name="totalAvs">Total number of scanning engines used as part of this analysis..</param>
        /// <param name="totalTime">Total time elapsed during scan (in milliseconds)..</param>
        /// <param name="scanDetails">scanDetails.</param>
        public MetascanReport(string dataId = default(string), int progressPercentage = default(int), ProcessingResultsStringEnum scanAllResultA = default(ProcessingResultsStringEnum), ProcessingResultsIndexEnum scanAllResultI = default(ProcessingResultsIndexEnum), string startTime = default(string), int totalAvs = default(int), int totalTime = default(int), MetascanReportScanDetails scanDetails = default(MetascanReportScanDetails))
        {
            this.DataId = dataId;
            this.ProgressPercentage = progressPercentage;
            this.ScanAllResultA = scanAllResultA;
            this.ScanAllResultI = scanAllResultI;
            this.StartTime = startTime;
            this.TotalAvs = totalAvs;
            this.TotalTime = totalTime;
            this.ScanDetails = scanDetails;
        }
        
        /// <summary>
        /// Data ID of the requested file
        /// </summary>
        /// <value>Data ID of the requested file</value>
        [DataMember(Name="data_id", EmitDefaultValue=false)]
        public string DataId { get; set; }

        /// <summary>
        /// Track analysis progress until reaches 100.
        /// </summary>
        /// <value>Track analysis progress until reaches 100.</value>
        [DataMember(Name="progress_percentage", EmitDefaultValue=false)]
        public int ProgressPercentage { get; set; }



        /// <summary>
        /// Timestamp when the scanning process starts.
        /// </summary>
        /// <value>Timestamp when the scanning process starts.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Total number of scanning engines used as part of this analysis.
        /// </summary>
        /// <value>Total number of scanning engines used as part of this analysis.</value>
        [DataMember(Name="total_avs", EmitDefaultValue=false)]
        public int TotalAvs { get; set; }

        /// <summary>
        /// Total time elapsed during scan (in milliseconds).
        /// </summary>
        /// <value>Total time elapsed during scan (in milliseconds).</value>
        [DataMember(Name="total_time", EmitDefaultValue=false)]
        public int TotalTime { get; set; }

        /// <summary>
        /// Gets or Sets ScanDetails
        /// </summary>
        [DataMember(Name="scan_details", EmitDefaultValue=false)]
        public MetascanReportScanDetails ScanDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetascanReport {\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  ScanAllResultA: ").Append(ScanAllResultA).Append("\n");
            sb.Append("  ScanAllResultI: ").Append(ScanAllResultI).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TotalAvs: ").Append(TotalAvs).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  ScanDetails: ").Append(ScanDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetascanReport);
        }

        /// <summary>
        /// Returns true if MetascanReport instances are equal
        /// </summary>
        /// <param name="input">Instance of MetascanReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetascanReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.ProgressPercentage == input.ProgressPercentage ||
                    (this.ProgressPercentage != null &&
                    this.ProgressPercentage.Equals(input.ProgressPercentage))
                ) && 
                (
                    this.ScanAllResultA == input.ScanAllResultA ||
                    (this.ScanAllResultA != null &&
                    this.ScanAllResultA.Equals(input.ScanAllResultA))
                ) && 
                (
                    this.ScanAllResultI == input.ScanAllResultI ||
                    (this.ScanAllResultI != null &&
                    this.ScanAllResultI.Equals(input.ScanAllResultI))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.TotalAvs == input.TotalAvs ||
                    (this.TotalAvs != null &&
                    this.TotalAvs.Equals(input.TotalAvs))
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    (this.TotalTime != null &&
                    this.TotalTime.Equals(input.TotalTime))
                ) && 
                (
                    this.ScanDetails == input.ScanDetails ||
                    (this.ScanDetails != null &&
                    this.ScanDetails.Equals(input.ScanDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataId != null)
                    hashCode = hashCode * 59 + this.DataId.GetHashCode();
                if (this.ProgressPercentage != null)
                    hashCode = hashCode * 59 + this.ProgressPercentage.GetHashCode();
                if (this.ScanAllResultA != null)
                    hashCode = hashCode * 59 + this.ScanAllResultA.GetHashCode();
                if (this.ScanAllResultI != null)
                    hashCode = hashCode * 59 + this.ScanAllResultI.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.TotalAvs != null)
                    hashCode = hashCode * 59 + this.TotalAvs.GetHashCode();
                if (this.TotalTime != null)
                    hashCode = hashCode * 59 + this.TotalTime.GetHashCode();
                if (this.ScanDetails != null)
                    hashCode = hashCode * 59 + this.ScanDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
