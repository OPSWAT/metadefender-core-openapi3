/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on matched sensitive data
    /// </summary>
    [DataContract]
    public partial class DLPResponseDlpInfo :  IEquatable<DLPResponseDlpInfo>, IValidatableObject
    {
        /// <summary>
        /// Describes how certain the hit is, possible values:   * &#x60;Very Low&#x60;   * &#x60;Low&#x60;   * &#x60;Medium&#x60;   * &#x60;High&#x60;   * &#x60;Very High&#x60; 
        /// </summary>
        /// <value>Describes how certain the hit is, possible values:   * &#x60;Very Low&#x60;   * &#x60;Low&#x60;   * &#x60;Medium&#x60;   * &#x60;High&#x60;   * &#x60;Very High&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CertaintyEnum
        {
            /// <summary>
            /// Enum VeryLow for value: Very Low
            /// </summary>
            [EnumMember(Value = "Very Low")]
            VeryLow = 1,

            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,

            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4,

            /// <summary>
            /// Enum VeryHigh for value: Very High
            /// </summary>
            [EnumMember(Value = "Very High")]
            VeryHigh = 5

        }

        /// <summary>
        /// Describes how certain the hit is, possible values:   * &#x60;Very Low&#x60;   * &#x60;Low&#x60;   * &#x60;Medium&#x60;   * &#x60;High&#x60;   * &#x60;Very High&#x60; 
        /// </summary>
        /// <value>Describes how certain the hit is, possible values:   * &#x60;Very Low&#x60;   * &#x60;Low&#x60;   * &#x60;Medium&#x60;   * &#x60;High&#x60;   * &#x60;Very High&#x60; </value>
        [DataMember(Name="certainty", EmitDefaultValue=false)]
        public CertaintyEnum? Certainty { get; set; }
        /// <summary>
        /// (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * &#x60;0&#x60; - Certainly is data loss   * &#x60;1&#x60; - Might be data loss 
        /// </summary>
        /// <value>(NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * &#x60;0&#x60; - Certainly is data loss   * &#x60;1&#x60; - Might be data loss </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * &#x60;0&#x60; - Certainly is data loss   * &#x60;1&#x60; - Might be data loss 
        /// </summary>
        /// <value>(NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * &#x60;0&#x60; - Certainly is data loss   * &#x60;1&#x60; - Might be data loss </value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// The overall result for the scanned file. It can be   | index         | status                       |   |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  | 
        /// </summary>
        /// <value>The overall result for the scanned file. It can be   | index         | status                       |   |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  | </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerdictEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4

        }

        /// <summary>
        /// The overall result for the scanned file. It can be   | index         | status                       |   |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  | 
        /// </summary>
        /// <value>The overall result for the scanned file. It can be   | index         | status                       |   |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  | </value>
        [DataMember(Name="verdict", EmitDefaultValue=false)]
        public VerdictEnum? Verdict { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DLPResponseDlpInfo" /> class.
        /// </summary>
        /// <param name="certainty">Describes how certain the hit is, possible values:   * &#x60;Very Low&#x60;   * &#x60;Low&#x60;   * &#x60;Medium&#x60;   * &#x60;High&#x60;   * &#x60;Very High&#x60; .</param>
        /// <param name="errors">A  list of error objects (empty if no errors happened), each error object contains following keys:   * &#x60;scan&#x60;: scan related error description   * &#x60;redact&#x60;: redaction related error description   * &#x60;watermark&#x60;: watermark related error description   * &#x60;metadata_removal&#x60;: metadata removal related error description .</param>
        /// <param name="filename">Output processed file name (pre-configured on engine settings under Core&#39;s worflow rule).</param>
        /// <param name="hits">hits.</param>
        /// <param name="metadataRemoval">metadataRemoval.</param>
        /// <param name="redact">redact.</param>
        /// <param name="severity">(NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * &#x60;0&#x60; - Certainly is data loss   * &#x60;1&#x60; - Might be data loss .</param>
        /// <param name="verdict">The overall result for the scanned file. It can be   | index         | status                       |   |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  | .</param>
        /// <param name="watermark">watermark.</param>
        public DLPResponseDlpInfo(CertaintyEnum? certainty = default(CertaintyEnum?), Object errors = default(Object), string filename = default(string), DLPResponseDlpInfoHits hits = default(DLPResponseDlpInfoHits), DLPResponseDlpInfoMetadataRemoval metadataRemoval = default(DLPResponseDlpInfoMetadataRemoval), DLPResponseDlpInfoRedact redact = default(DLPResponseDlpInfoRedact), SeverityEnum? severity = default(SeverityEnum?), VerdictEnum? verdict = default(VerdictEnum?), DLPResponseDlpInfoWatermark watermark = default(DLPResponseDlpInfoWatermark))
        {
            this.Certainty = certainty;
            this.Errors = errors;
            this.Filename = filename;
            this.Hits = hits;
            this.MetadataRemoval = metadataRemoval;
            this.Redact = redact;
            this.Severity = severity;
            this.Verdict = verdict;
            this.Watermark = watermark;
        }
        

        /// <summary>
        /// A  list of error objects (empty if no errors happened), each error object contains following keys:   * &#x60;scan&#x60;: scan related error description   * &#x60;redact&#x60;: redaction related error description   * &#x60;watermark&#x60;: watermark related error description   * &#x60;metadata_removal&#x60;: metadata removal related error description 
        /// </summary>
        /// <value>A  list of error objects (empty if no errors happened), each error object contains following keys:   * &#x60;scan&#x60;: scan related error description   * &#x60;redact&#x60;: redaction related error description   * &#x60;watermark&#x60;: watermark related error description   * &#x60;metadata_removal&#x60;: metadata removal related error description </value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Object Errors { get; set; }

        /// <summary>
        /// Output processed file name (pre-configured on engine settings under Core&#39;s worflow rule)
        /// </summary>
        /// <value>Output processed file name (pre-configured on engine settings under Core&#39;s worflow rule)</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Hits
        /// </summary>
        [DataMember(Name="hits", EmitDefaultValue=false)]
        public DLPResponseDlpInfoHits Hits { get; set; }

        /// <summary>
        /// Gets or Sets MetadataRemoval
        /// </summary>
        [DataMember(Name="metadata_removal", EmitDefaultValue=false)]
        public DLPResponseDlpInfoMetadataRemoval MetadataRemoval { get; set; }

        /// <summary>
        /// Gets or Sets Redact
        /// </summary>
        [DataMember(Name="redact", EmitDefaultValue=false)]
        public DLPResponseDlpInfoRedact Redact { get; set; }



        /// <summary>
        /// Gets or Sets Watermark
        /// </summary>
        [DataMember(Name="watermark", EmitDefaultValue=false)]
        public DLPResponseDlpInfoWatermark Watermark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DLPResponseDlpInfo {\n");
            sb.Append("  Certainty: ").Append(Certainty).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Hits: ").Append(Hits).Append("\n");
            sb.Append("  MetadataRemoval: ").Append(MetadataRemoval).Append("\n");
            sb.Append("  Redact: ").Append(Redact).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Verdict: ").Append(Verdict).Append("\n");
            sb.Append("  Watermark: ").Append(Watermark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DLPResponseDlpInfo);
        }

        /// <summary>
        /// Returns true if DLPResponseDlpInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DLPResponseDlpInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DLPResponseDlpInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Certainty == input.Certainty ||
                    (this.Certainty != null &&
                    this.Certainty.Equals(input.Certainty))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Hits == input.Hits ||
                    (this.Hits != null &&
                    this.Hits.Equals(input.Hits))
                ) && 
                (
                    this.MetadataRemoval == input.MetadataRemoval ||
                    (this.MetadataRemoval != null &&
                    this.MetadataRemoval.Equals(input.MetadataRemoval))
                ) && 
                (
                    this.Redact == input.Redact ||
                    (this.Redact != null &&
                    this.Redact.Equals(input.Redact))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Verdict == input.Verdict ||
                    (this.Verdict != null &&
                    this.Verdict.Equals(input.Verdict))
                ) && 
                (
                    this.Watermark == input.Watermark ||
                    (this.Watermark != null &&
                    this.Watermark.Equals(input.Watermark))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Certainty != null)
                    hashCode = hashCode * 59 + this.Certainty.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Hits != null)
                    hashCode = hashCode * 59 + this.Hits.GetHashCode();
                if (this.MetadataRemoval != null)
                    hashCode = hashCode * 59 + this.MetadataRemoval.GetHashCode();
                if (this.Redact != null)
                    hashCode = hashCode * 59 + this.Redact.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Verdict != null)
                    hashCode = hashCode * 59 + this.Verdict.GetHashCode();
                if (this.Watermark != null)
                    hashCode = hashCode * 59 + this.Watermark.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
