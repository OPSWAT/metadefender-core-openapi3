/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A set of cvss severity information
    /// </summary>
    [DataContract]
    public partial class VulnerabilityResponseResultDetailsCvss :  IEquatable<VulnerabilityResponseResultDetailsCvss>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityResponseResultDetailsCvss" /> class.
        /// </summary>
        /// <param name="accessComplexity">A CVSS access-complexity descriptor.</param>
        /// <param name="accessVector">A CVSS access-vector descriptor.</param>
        /// <param name="authentication">A CVSS authentication descriptor.</param>
        /// <param name="availabilityImpact">A CVSS availability impact descriptor.</param>
        /// <param name="confidentialityImpact">A CVSS confidentiality impact descriptor.</param>
        /// <param name="generatedOnEpoch">An epoch timestamp indicating CVSS generation time.</param>
        /// <param name="integrityImpact">A CVSS integrity impact descriptor.</param>
        /// <param name="score">A CVSS 10-point severity score.</param>
        /// <param name="source">A CVSS source descriptor.</param>
        public VulnerabilityResponseResultDetailsCvss(string accessComplexity = default(string), string accessVector = default(string), string authentication = default(string), string availabilityImpact = default(string), string confidentialityImpact = default(string), string generatedOnEpoch = default(string), string integrityImpact = default(string), string score = default(string), string source = default(string))
        {
            this.AccessComplexity = accessComplexity;
            this.AccessVector = accessVector;
            this.Authentication = authentication;
            this.AvailabilityImpact = availabilityImpact;
            this.ConfidentialityImpact = confidentialityImpact;
            this.GeneratedOnEpoch = generatedOnEpoch;
            this.IntegrityImpact = integrityImpact;
            this.Score = score;
            this.Source = source;
        }
        
        /// <summary>
        /// A CVSS access-complexity descriptor
        /// </summary>
        /// <value>A CVSS access-complexity descriptor</value>
        [DataMember(Name="access-complexity", EmitDefaultValue=false)]
        public string AccessComplexity { get; set; }

        /// <summary>
        /// A CVSS access-vector descriptor
        /// </summary>
        /// <value>A CVSS access-vector descriptor</value>
        [DataMember(Name="access-vector", EmitDefaultValue=false)]
        public string AccessVector { get; set; }

        /// <summary>
        /// A CVSS authentication descriptor
        /// </summary>
        /// <value>A CVSS authentication descriptor</value>
        [DataMember(Name="authentication", EmitDefaultValue=false)]
        public string Authentication { get; set; }

        /// <summary>
        /// A CVSS availability impact descriptor
        /// </summary>
        /// <value>A CVSS availability impact descriptor</value>
        [DataMember(Name="availability-impact", EmitDefaultValue=false)]
        public string AvailabilityImpact { get; set; }

        /// <summary>
        /// A CVSS confidentiality impact descriptor
        /// </summary>
        /// <value>A CVSS confidentiality impact descriptor</value>
        [DataMember(Name="confidentiality-impact", EmitDefaultValue=false)]
        public string ConfidentialityImpact { get; set; }

        /// <summary>
        /// An epoch timestamp indicating CVSS generation time
        /// </summary>
        /// <value>An epoch timestamp indicating CVSS generation time</value>
        [DataMember(Name="generated-on-epoch", EmitDefaultValue=false)]
        public string GeneratedOnEpoch { get; set; }

        /// <summary>
        /// A CVSS integrity impact descriptor
        /// </summary>
        /// <value>A CVSS integrity impact descriptor</value>
        [DataMember(Name="integrity-impact", EmitDefaultValue=false)]
        public string IntegrityImpact { get; set; }

        /// <summary>
        /// A CVSS 10-point severity score
        /// </summary>
        /// <value>A CVSS 10-point severity score</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// A CVSS source descriptor
        /// </summary>
        /// <value>A CVSS source descriptor</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityResponseResultDetailsCvss {\n");
            sb.Append("  AccessComplexity: ").Append(AccessComplexity).Append("\n");
            sb.Append("  AccessVector: ").Append(AccessVector).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  AvailabilityImpact: ").Append(AvailabilityImpact).Append("\n");
            sb.Append("  ConfidentialityImpact: ").Append(ConfidentialityImpact).Append("\n");
            sb.Append("  GeneratedOnEpoch: ").Append(GeneratedOnEpoch).Append("\n");
            sb.Append("  IntegrityImpact: ").Append(IntegrityImpact).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityResponseResultDetailsCvss);
        }

        /// <summary>
        /// Returns true if VulnerabilityResponseResultDetailsCvss instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityResponseResultDetailsCvss to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityResponseResultDetailsCvss input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessComplexity == input.AccessComplexity ||
                    (this.AccessComplexity != null &&
                    this.AccessComplexity.Equals(input.AccessComplexity))
                ) && 
                (
                    this.AccessVector == input.AccessVector ||
                    (this.AccessVector != null &&
                    this.AccessVector.Equals(input.AccessVector))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                ) && 
                (
                    this.AvailabilityImpact == input.AvailabilityImpact ||
                    (this.AvailabilityImpact != null &&
                    this.AvailabilityImpact.Equals(input.AvailabilityImpact))
                ) && 
                (
                    this.ConfidentialityImpact == input.ConfidentialityImpact ||
                    (this.ConfidentialityImpact != null &&
                    this.ConfidentialityImpact.Equals(input.ConfidentialityImpact))
                ) && 
                (
                    this.GeneratedOnEpoch == input.GeneratedOnEpoch ||
                    (this.GeneratedOnEpoch != null &&
                    this.GeneratedOnEpoch.Equals(input.GeneratedOnEpoch))
                ) && 
                (
                    this.IntegrityImpact == input.IntegrityImpact ||
                    (this.IntegrityImpact != null &&
                    this.IntegrityImpact.Equals(input.IntegrityImpact))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessComplexity != null)
                    hashCode = hashCode * 59 + this.AccessComplexity.GetHashCode();
                if (this.AccessVector != null)
                    hashCode = hashCode * 59 + this.AccessVector.GetHashCode();
                if (this.Authentication != null)
                    hashCode = hashCode * 59 + this.Authentication.GetHashCode();
                if (this.AvailabilityImpact != null)
                    hashCode = hashCode * 59 + this.AvailabilityImpact.GetHashCode();
                if (this.ConfidentialityImpact != null)
                    hashCode = hashCode * 59 + this.ConfidentialityImpact.GetHashCode();
                if (this.GeneratedOnEpoch != null)
                    hashCode = hashCode * 59 + this.GeneratedOnEpoch.GetHashCode();
                if (this.IntegrityImpact != null)
                    hashCode = hashCode * 59 + this.IntegrityImpact.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
