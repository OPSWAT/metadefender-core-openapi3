/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// API object for /admin/config/update
    /// </summary>
    [DataContract]
    public partial class AdminConfigUpdate :  IEquatable<AdminConfigUpdate>, IValidatableObject
    {
        /// <summary>
        /// Define where the updates will be loaded from. &lt;p&gt; This can be either:   * &#x60;internet&#x60; -&gt; if selected, will check for new updates every &#x60;autoupdateperiod&#x60; minutes   * &#x60;folder&#x60; -&gt; make sure that MetaDefender has access/permission to that folder   * &#x60;manual&#x60; -&gt; requires manually uploading the packages in Inventory &gt; Modules &gt; Upload package. 
        /// </summary>
        /// <value>Define where the updates will be loaded from. &lt;p&gt; This can be either:   * &#x60;internet&#x60; -&gt; if selected, will check for new updates every &#x60;autoupdateperiod&#x60; minutes   * &#x60;folder&#x60; -&gt; make sure that MetaDefender has access/permission to that folder   * &#x60;manual&#x60; -&gt; requires manually uploading the packages in Inventory &gt; Modules &gt; Upload package. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Internet for value: internet
            /// </summary>
            [EnumMember(Value = "internet")]
            Internet = 1,

            /// <summary>
            /// Enum Folder for value: folder
            /// </summary>
            [EnumMember(Value = "folder")]
            Folder = 2,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 3

        }

        /// <summary>
        /// Define where the updates will be loaded from. &lt;p&gt; This can be either:   * &#x60;internet&#x60; -&gt; if selected, will check for new updates every &#x60;autoupdateperiod&#x60; minutes   * &#x60;folder&#x60; -&gt; make sure that MetaDefender has access/permission to that folder   * &#x60;manual&#x60; -&gt; requires manually uploading the packages in Inventory &gt; Modules &gt; Upload package. 
        /// </summary>
        /// <value>Define where the updates will be loaded from. &lt;p&gt; This can be either:   * &#x60;internet&#x60; -&gt; if selected, will check for new updates every &#x60;autoupdateperiod&#x60; minutes   * &#x60;folder&#x60; -&gt; make sure that MetaDefender has access/permission to that folder   * &#x60;manual&#x60; -&gt; requires manually uploading the packages in Inventory &gt; Modules &gt; Upload package. </value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminConfigUpdate" /> class.
        /// </summary>
        /// <param name="autoupdateperiod">The interval (in minutes) for checking for new updates..</param>
        /// <param name="deleteafterimport">If you want to clean the pickup folder after the updates have been applied..</param>
        /// <param name="disabledupdate">Lockdown a time interval when the engines are not allowed to update..</param>
        /// <param name="pickupfolder">The folder where MetaDefender will look for the new engine files..</param>
        /// <param name="source">Define where the updates will be loaded from. &lt;p&gt; This can be either:   * &#x60;internet&#x60; -&gt; if selected, will check for new updates every &#x60;autoupdateperiod&#x60; minutes   * &#x60;folder&#x60; -&gt; make sure that MetaDefender has access/permission to that folder   * &#x60;manual&#x60; -&gt; requires manually uploading the packages in Inventory &gt; Modules &gt; Upload package. .</param>
        public AdminConfigUpdate(int autoupdateperiod = default(int), bool deleteafterimport = default(bool), List<AdminConfigUpdateDisabledupdate> disabledupdate = default(List<AdminConfigUpdateDisabledupdate>), string pickupfolder = default(string), SourceEnum? source = default(SourceEnum?))
        {
            this.Autoupdateperiod = autoupdateperiod;
            this.Deleteafterimport = deleteafterimport;
            this.Disabledupdate = disabledupdate;
            this.Pickupfolder = pickupfolder;
            this.Source = source;
        }
        
        /// <summary>
        /// The interval (in minutes) for checking for new updates.
        /// </summary>
        /// <value>The interval (in minutes) for checking for new updates.</value>
        [DataMember(Name="autoupdateperiod", EmitDefaultValue=false)]
        public int Autoupdateperiod { get; set; }

        /// <summary>
        /// If you want to clean the pickup folder after the updates have been applied.
        /// </summary>
        /// <value>If you want to clean the pickup folder after the updates have been applied.</value>
        [DataMember(Name="deleteafterimport", EmitDefaultValue=false)]
        public bool Deleteafterimport { get; set; }

        /// <summary>
        /// Lockdown a time interval when the engines are not allowed to update.
        /// </summary>
        /// <value>Lockdown a time interval when the engines are not allowed to update.</value>
        [DataMember(Name="disabledupdate", EmitDefaultValue=false)]
        public List<AdminConfigUpdateDisabledupdate> Disabledupdate { get; set; }

        /// <summary>
        /// The folder where MetaDefender will look for the new engine files.
        /// </summary>
        /// <value>The folder where MetaDefender will look for the new engine files.</value>
        [DataMember(Name="pickupfolder", EmitDefaultValue=false)]
        public string Pickupfolder { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminConfigUpdate {\n");
            sb.Append("  Autoupdateperiod: ").Append(Autoupdateperiod).Append("\n");
            sb.Append("  Deleteafterimport: ").Append(Deleteafterimport).Append("\n");
            sb.Append("  Disabledupdate: ").Append(Disabledupdate).Append("\n");
            sb.Append("  Pickupfolder: ").Append(Pickupfolder).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdminConfigUpdate);
        }

        /// <summary>
        /// Returns true if AdminConfigUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of AdminConfigUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminConfigUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Autoupdateperiod == input.Autoupdateperiod ||
                    (this.Autoupdateperiod != null &&
                    this.Autoupdateperiod.Equals(input.Autoupdateperiod))
                ) && 
                (
                    this.Deleteafterimport == input.Deleteafterimport ||
                    (this.Deleteafterimport != null &&
                    this.Deleteafterimport.Equals(input.Deleteafterimport))
                ) && 
                (
                    this.Disabledupdate == input.Disabledupdate ||
                    this.Disabledupdate != null &&
                    input.Disabledupdate != null &&
                    this.Disabledupdate.SequenceEqual(input.Disabledupdate)
                ) && 
                (
                    this.Pickupfolder == input.Pickupfolder ||
                    (this.Pickupfolder != null &&
                    this.Pickupfolder.Equals(input.Pickupfolder))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Autoupdateperiod != null)
                    hashCode = hashCode * 59 + this.Autoupdateperiod.GetHashCode();
                if (this.Deleteafterimport != null)
                    hashCode = hashCode * 59 + this.Deleteafterimport.GetHashCode();
                if (this.Disabledupdate != null)
                    hashCode = hashCode * 59 + this.Disabledupdate.GetHashCode();
                if (this.Pickupfolder != null)
                    hashCode = hashCode * 59 + this.Pickupfolder.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
