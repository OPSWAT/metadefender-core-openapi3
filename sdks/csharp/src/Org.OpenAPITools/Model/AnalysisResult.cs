/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalysisResult
    /// </summary>
    [DataContract]
    public partial class AnalysisResult :  IEquatable<AnalysisResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisResult" /> class.
        /// </summary>
        /// <param name="dataId">data identifier of the requested file.</param>
        /// <param name="dlpInfo">dlpInfo.</param>
        /// <param name="fileInfo">fileInfo.</param>
        /// <param name="processInfo">processInfo.</param>
        /// <param name="scanResults">scanResults.</param>
        /// <param name="vulnerabilityInfo">vulnerabilityInfo.</param>
        /// <param name="yara">yara.</param>
        public AnalysisResult(string dataId = default(string), DLPResponse dlpInfo = default(DLPResponse), FileInformation fileInfo = default(FileInformation), AnalysisResultProcessInfo processInfo = default(AnalysisResultProcessInfo), MetascanReport scanResults = default(MetascanReport), VulnerabilityResponse vulnerabilityInfo = default(VulnerabilityResponse), YaraReport yara = default(YaraReport))
        {
            this.DataId = dataId;
            this.DlpInfo = dlpInfo;
            this.FileInfo = fileInfo;
            this.ProcessInfo = processInfo;
            this.ScanResults = scanResults;
            this.VulnerabilityInfo = vulnerabilityInfo;
            this.Yara = yara;
        }
        
        /// <summary>
        /// data identifier of the requested file
        /// </summary>
        /// <value>data identifier of the requested file</value>
        [DataMember(Name="data_id", EmitDefaultValue=false)]
        public string DataId { get; set; }

        /// <summary>
        /// Gets or Sets DlpInfo
        /// </summary>
        [DataMember(Name="dlp_info", EmitDefaultValue=false)]
        public DLPResponse DlpInfo { get; set; }

        /// <summary>
        /// Gets or Sets FileInfo
        /// </summary>
        [DataMember(Name="file_info", EmitDefaultValue=false)]
        public FileInformation FileInfo { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInfo
        /// </summary>
        [DataMember(Name="process_info", EmitDefaultValue=false)]
        public AnalysisResultProcessInfo ProcessInfo { get; set; }

        /// <summary>
        /// Gets or Sets ScanResults
        /// </summary>
        [DataMember(Name="scan_results", EmitDefaultValue=false)]
        public MetascanReport ScanResults { get; set; }

        /// <summary>
        /// Gets or Sets VulnerabilityInfo
        /// </summary>
        [DataMember(Name="vulnerability_info", EmitDefaultValue=false)]
        public VulnerabilityResponse VulnerabilityInfo { get; set; }

        /// <summary>
        /// Gets or Sets Yara
        /// </summary>
        [DataMember(Name="yara", EmitDefaultValue=false)]
        public YaraReport Yara { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisResult {\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  DlpInfo: ").Append(DlpInfo).Append("\n");
            sb.Append("  FileInfo: ").Append(FileInfo).Append("\n");
            sb.Append("  ProcessInfo: ").Append(ProcessInfo).Append("\n");
            sb.Append("  ScanResults: ").Append(ScanResults).Append("\n");
            sb.Append("  VulnerabilityInfo: ").Append(VulnerabilityInfo).Append("\n");
            sb.Append("  Yara: ").Append(Yara).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalysisResult);
        }

        /// <summary>
        /// Returns true if AnalysisResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalysisResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.DlpInfo == input.DlpInfo ||
                    (this.DlpInfo != null &&
                    this.DlpInfo.Equals(input.DlpInfo))
                ) && 
                (
                    this.FileInfo == input.FileInfo ||
                    (this.FileInfo != null &&
                    this.FileInfo.Equals(input.FileInfo))
                ) && 
                (
                    this.ProcessInfo == input.ProcessInfo ||
                    (this.ProcessInfo != null &&
                    this.ProcessInfo.Equals(input.ProcessInfo))
                ) && 
                (
                    this.ScanResults == input.ScanResults ||
                    (this.ScanResults != null &&
                    this.ScanResults.Equals(input.ScanResults))
                ) && 
                (
                    this.VulnerabilityInfo == input.VulnerabilityInfo ||
                    (this.VulnerabilityInfo != null &&
                    this.VulnerabilityInfo.Equals(input.VulnerabilityInfo))
                ) && 
                (
                    this.Yara == input.Yara ||
                    (this.Yara != null &&
                    this.Yara.Equals(input.Yara))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataId != null)
                    hashCode = hashCode * 59 + this.DataId.GetHashCode();
                if (this.DlpInfo != null)
                    hashCode = hashCode * 59 + this.DlpInfo.GetHashCode();
                if (this.FileInfo != null)
                    hashCode = hashCode * 59 + this.FileInfo.GetHashCode();
                if (this.ProcessInfo != null)
                    hashCode = hashCode * 59 + this.ProcessInfo.GetHashCode();
                if (this.ScanResults != null)
                    hashCode = hashCode * 59 + this.ScanResults.GetHashCode();
                if (this.VulnerabilityInfo != null)
                    hashCode = hashCode * 59 + this.VulnerabilityInfo.GetHashCode();
                if (this.Yara != null)
                    hashCode = hashCode * 59 + this.Yara.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
