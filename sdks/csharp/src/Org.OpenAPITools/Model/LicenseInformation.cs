/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about the licensed product (product type, number of activations, deploymentId, expiration date and days left)
    /// </summary>
    [DataContract]
    public partial class LicenseInformation :  IEquatable<LicenseInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInformation" /> class.
        /// </summary>
        /// <param name="daysLeft">Number of days left before expiration.</param>
        /// <param name="deployment">Unique identifier which is maps the current deployment to the activation.</param>
        /// <param name="expiration">Expiration date in MM/DD/YYYY format..</param>
        /// <param name="licensedEngines">List of engine/module identifiers that have been licensed.</param>
        /// <param name="maxNodeCount">Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance..</param>
        /// <param name="onlineActivated">Track online/offline activation mode.</param>
        /// <param name="productId">Official MetaDefender base SKU licensed..</param>
        /// <param name="productName">Official MetaDefender base product name licensed..</param>
        public LicenseInformation(int daysLeft = default(int), string deployment = default(string), string expiration = default(string), List<string> licensedEngines = default(List<string>), string maxNodeCount = default(string), bool onlineActivated = default(bool), string productId = default(string), string productName = default(string))
        {
            this.DaysLeft = daysLeft;
            this.Deployment = deployment;
            this.Expiration = expiration;
            this.LicensedEngines = licensedEngines;
            this.MaxNodeCount = maxNodeCount;
            this.OnlineActivated = onlineActivated;
            this.ProductId = productId;
            this.ProductName = productName;
        }
        
        /// <summary>
        /// Number of days left before expiration
        /// </summary>
        /// <value>Number of days left before expiration</value>
        [DataMember(Name="days_left", EmitDefaultValue=false)]
        public int DaysLeft { get; set; }

        /// <summary>
        /// Unique identifier which is maps the current deployment to the activation
        /// </summary>
        /// <value>Unique identifier which is maps the current deployment to the activation</value>
        [DataMember(Name="deployment", EmitDefaultValue=false)]
        public string Deployment { get; set; }

        /// <summary>
        /// Expiration date in MM/DD/YYYY format.
        /// </summary>
        /// <value>Expiration date in MM/DD/YYYY format.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// List of engine/module identifiers that have been licensed
        /// </summary>
        /// <value>List of engine/module identifiers that have been licensed</value>
        [DataMember(Name="licensed_engines", EmitDefaultValue=false)]
        public List<string> LicensedEngines { get; set; }

        /// <summary>
        /// Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance.
        /// </summary>
        /// <value>Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance.</value>
        [DataMember(Name="max_node_count", EmitDefaultValue=false)]
        public string MaxNodeCount { get; set; }

        /// <summary>
        /// Track online/offline activation mode
        /// </summary>
        /// <value>Track online/offline activation mode</value>
        [DataMember(Name="online_activated", EmitDefaultValue=false)]
        public bool OnlineActivated { get; set; }

        /// <summary>
        /// Official MetaDefender base SKU licensed.
        /// </summary>
        /// <value>Official MetaDefender base SKU licensed.</value>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Official MetaDefender base product name licensed.
        /// </summary>
        /// <value>Official MetaDefender base product name licensed.</value>
        [DataMember(Name="product_name", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInformation {\n");
            sb.Append("  DaysLeft: ").Append(DaysLeft).Append("\n");
            sb.Append("  Deployment: ").Append(Deployment).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  LicensedEngines: ").Append(LicensedEngines).Append("\n");
            sb.Append("  MaxNodeCount: ").Append(MaxNodeCount).Append("\n");
            sb.Append("  OnlineActivated: ").Append(OnlineActivated).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseInformation);
        }

        /// <summary>
        /// Returns true if LicenseInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DaysLeft == input.DaysLeft ||
                    (this.DaysLeft != null &&
                    this.DaysLeft.Equals(input.DaysLeft))
                ) && 
                (
                    this.Deployment == input.Deployment ||
                    (this.Deployment != null &&
                    this.Deployment.Equals(input.Deployment))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.LicensedEngines == input.LicensedEngines ||
                    this.LicensedEngines != null &&
                    input.LicensedEngines != null &&
                    this.LicensedEngines.SequenceEqual(input.LicensedEngines)
                ) && 
                (
                    this.MaxNodeCount == input.MaxNodeCount ||
                    (this.MaxNodeCount != null &&
                    this.MaxNodeCount.Equals(input.MaxNodeCount))
                ) && 
                (
                    this.OnlineActivated == input.OnlineActivated ||
                    (this.OnlineActivated != null &&
                    this.OnlineActivated.Equals(input.OnlineActivated))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DaysLeft != null)
                    hashCode = hashCode * 59 + this.DaysLeft.GetHashCode();
                if (this.Deployment != null)
                    hashCode = hashCode * 59 + this.Deployment.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.LicensedEngines != null)
                    hashCode = hashCode * 59 + this.LicensedEngines.GetHashCode();
                if (this.MaxNodeCount != null)
                    hashCode = hashCode * 59 + this.MaxNodeCount.GetHashCode();
                if (this.OnlineActivated != null)
                    hashCode = hashCode * 59 + this.OnlineActivated.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
