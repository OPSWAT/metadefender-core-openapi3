/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Overall batch process result
    /// </summary>
    [DataContract]
    public partial class BatchResponseProcessInfo :  IEquatable<BatchResponseProcessInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResponseProcessInfo" /> class.
        /// </summary>
        /// <param name="blockedReason">Provides the reason why the file is blocked (if so)..</param>
        /// <param name="fileTypeSkippedScan">Indicates if the input file&#39;s detected type was configured to skip scanning..</param>
        /// <param name="profile">The used rule name..</param>
        /// <param name="result">The final result of processing the file (Allowed / Blocked / Processing)..</param>
        /// <param name="userAgent">Identifier for the REST Client that calls the API..</param>
        /// <param name="username">User identifier who submitted scan request earlier..</param>
        public BatchResponseProcessInfo(string blockedReason = default(string), bool fileTypeSkippedScan = default(bool), string profile = default(string), string result = default(string), string userAgent = default(string), string username = default(string))
        {
            this.BlockedReason = blockedReason;
            this.FileTypeSkippedScan = fileTypeSkippedScan;
            this.Profile = profile;
            this.Result = result;
            this.UserAgent = userAgent;
            this.Username = username;
        }
        
        /// <summary>
        /// Provides the reason why the file is blocked (if so).
        /// </summary>
        /// <value>Provides the reason why the file is blocked (if so).</value>
        [DataMember(Name="blocked_reason", EmitDefaultValue=false)]
        public string BlockedReason { get; set; }

        /// <summary>
        /// Indicates if the input file&#39;s detected type was configured to skip scanning.
        /// </summary>
        /// <value>Indicates if the input file&#39;s detected type was configured to skip scanning.</value>
        [DataMember(Name="file_type_skipped_scan", EmitDefaultValue=false)]
        public bool FileTypeSkippedScan { get; set; }

        /// <summary>
        /// The used rule name.
        /// </summary>
        /// <value>The used rule name.</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// The final result of processing the file (Allowed / Blocked / Processing).
        /// </summary>
        /// <value>The final result of processing the file (Allowed / Blocked / Processing).</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Identifier for the REST Client that calls the API.
        /// </summary>
        /// <value>Identifier for the REST Client that calls the API.</value>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// User identifier who submitted scan request earlier.
        /// </summary>
        /// <value>User identifier who submitted scan request earlier.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchResponseProcessInfo {\n");
            sb.Append("  BlockedReason: ").Append(BlockedReason).Append("\n");
            sb.Append("  FileTypeSkippedScan: ").Append(FileTypeSkippedScan).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchResponseProcessInfo);
        }

        /// <summary>
        /// Returns true if BatchResponseProcessInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchResponseProcessInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchResponseProcessInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlockedReason == input.BlockedReason ||
                    (this.BlockedReason != null &&
                    this.BlockedReason.Equals(input.BlockedReason))
                ) && 
                (
                    this.FileTypeSkippedScan == input.FileTypeSkippedScan ||
                    (this.FileTypeSkippedScan != null &&
                    this.FileTypeSkippedScan.Equals(input.FileTypeSkippedScan))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockedReason != null)
                    hashCode = hashCode * 59 + this.BlockedReason.GetHashCode();
                if (this.FileTypeSkippedScan != null)
                    hashCode = hashCode * 59 + this.FileTypeSkippedScan.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
