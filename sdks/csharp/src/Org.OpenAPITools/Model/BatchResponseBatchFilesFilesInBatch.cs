/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchResponseBatchFilesFilesInBatch
    /// </summary>
    [DataContract]
    public partial class BatchResponseBatchFilesFilesInBatch :  IEquatable<BatchResponseBatchFilesFilesInBatch>, IValidatableObject
    {
        /// <summary>
        /// The overall scan result as string
        /// </summary>
        /// <value>The overall scan result as string</value>
        [DataMember(Name="scan_all_result_a", EmitDefaultValue=false)]
        public ProcessingResultsStringEnum? ScanAllResultA { get; set; }
        /// <summary>
        /// The overall scan result as index in the Processing Results table.
        /// </summary>
        /// <value>The overall scan result as index in the Processing Results table.</value>
        [DataMember(Name="scan_all_result_i", EmitDefaultValue=false)]
        public ProcessingResultsIndexEnum? ScanAllResultI { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResponseBatchFilesFilesInBatch" /> class.
        /// </summary>
        /// <param name="dataId">Unique identifer for the file..</param>
        /// <param name="detectedBy">Total number of engines that detected this file..</param>
        /// <param name="displayName">The filename reported via &#x60;filename&#x60; header..</param>
        /// <param name="fileSize">Total file size in bytes..</param>
        /// <param name="fileType">The filetype using mimetype..</param>
        /// <param name="fileTypeDescription">The filetype in human readable format..</param>
        /// <param name="processInfo">processInfo.</param>
        /// <param name="progressPercentage">Track analysis progress until reaches 100..</param>
        /// <param name="scanAllResultA">The overall scan result as string.</param>
        /// <param name="scanAllResultI">The overall scan result as index in the Processing Results table..</param>
        /// <param name="scannedWith">The total number of engines used to analyze this file..</param>
        public BatchResponseBatchFilesFilesInBatch(string dataId = default(string), int detectedBy = default(int), string displayName = default(string), int fileSize = default(int), string fileType = default(string), string fileTypeDescription = default(string), BatchResponseBatchFilesProcessInfo processInfo = default(BatchResponseBatchFilesProcessInfo), int progressPercentage = default(int), ProcessingResultsStringEnum scanAllResultA = default(ProcessingResultsStringEnum), ProcessingResultsIndexEnum scanAllResultI = default(ProcessingResultsIndexEnum), int scannedWith = default(int))
        {
            this.DataId = dataId;
            this.DetectedBy = detectedBy;
            this.DisplayName = displayName;
            this.FileSize = fileSize;
            this.FileType = fileType;
            this.FileTypeDescription = fileTypeDescription;
            this.ProcessInfo = processInfo;
            this.ProgressPercentage = progressPercentage;
            this.ScanAllResultA = scanAllResultA;
            this.ScanAllResultI = scanAllResultI;
            this.ScannedWith = scannedWith;
        }
        
        /// <summary>
        /// Unique identifer for the file.
        /// </summary>
        /// <value>Unique identifer for the file.</value>
        [DataMember(Name="data_id", EmitDefaultValue=false)]
        public string DataId { get; set; }

        /// <summary>
        /// Total number of engines that detected this file.
        /// </summary>
        /// <value>Total number of engines that detected this file.</value>
        [DataMember(Name="detected_by", EmitDefaultValue=false)]
        public int DetectedBy { get; set; }

        /// <summary>
        /// The filename reported via &#x60;filename&#x60; header.
        /// </summary>
        /// <value>The filename reported via &#x60;filename&#x60; header.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Total file size in bytes.
        /// </summary>
        /// <value>Total file size in bytes.</value>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public int FileSize { get; set; }

        /// <summary>
        /// The filetype using mimetype.
        /// </summary>
        /// <value>The filetype using mimetype.</value>
        [DataMember(Name="file_type", EmitDefaultValue=false)]
        public string FileType { get; set; }

        /// <summary>
        /// The filetype in human readable format.
        /// </summary>
        /// <value>The filetype in human readable format.</value>
        [DataMember(Name="file_type_description", EmitDefaultValue=false)]
        public string FileTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInfo
        /// </summary>
        [DataMember(Name="process_info", EmitDefaultValue=false)]
        public BatchResponseBatchFilesProcessInfo ProcessInfo { get; set; }

        /// <summary>
        /// Track analysis progress until reaches 100.
        /// </summary>
        /// <value>Track analysis progress until reaches 100.</value>
        [DataMember(Name="progress_percentage", EmitDefaultValue=false)]
        public int ProgressPercentage { get; set; }



        /// <summary>
        /// The total number of engines used to analyze this file.
        /// </summary>
        /// <value>The total number of engines used to analyze this file.</value>
        [DataMember(Name="scanned_with", EmitDefaultValue=false)]
        public int ScannedWith { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchResponseBatchFilesFilesInBatch {\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  DetectedBy: ").Append(DetectedBy).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  FileTypeDescription: ").Append(FileTypeDescription).Append("\n");
            sb.Append("  ProcessInfo: ").Append(ProcessInfo).Append("\n");
            sb.Append("  ProgressPercentage: ").Append(ProgressPercentage).Append("\n");
            sb.Append("  ScanAllResultA: ").Append(ScanAllResultA).Append("\n");
            sb.Append("  ScanAllResultI: ").Append(ScanAllResultI).Append("\n");
            sb.Append("  ScannedWith: ").Append(ScannedWith).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchResponseBatchFilesFilesInBatch);
        }

        /// <summary>
        /// Returns true if BatchResponseBatchFilesFilesInBatch instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchResponseBatchFilesFilesInBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchResponseBatchFilesFilesInBatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.DetectedBy == input.DetectedBy ||
                    (this.DetectedBy != null &&
                    this.DetectedBy.Equals(input.DetectedBy))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.FileTypeDescription == input.FileTypeDescription ||
                    (this.FileTypeDescription != null &&
                    this.FileTypeDescription.Equals(input.FileTypeDescription))
                ) && 
                (
                    this.ProcessInfo == input.ProcessInfo ||
                    (this.ProcessInfo != null &&
                    this.ProcessInfo.Equals(input.ProcessInfo))
                ) && 
                (
                    this.ProgressPercentage == input.ProgressPercentage ||
                    (this.ProgressPercentage != null &&
                    this.ProgressPercentage.Equals(input.ProgressPercentage))
                ) && 
                (
                    this.ScanAllResultA == input.ScanAllResultA ||
                    (this.ScanAllResultA != null &&
                    this.ScanAllResultA.Equals(input.ScanAllResultA))
                ) && 
                (
                    this.ScanAllResultI == input.ScanAllResultI ||
                    (this.ScanAllResultI != null &&
                    this.ScanAllResultI.Equals(input.ScanAllResultI))
                ) && 
                (
                    this.ScannedWith == input.ScannedWith ||
                    (this.ScannedWith != null &&
                    this.ScannedWith.Equals(input.ScannedWith))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataId != null)
                    hashCode = hashCode * 59 + this.DataId.GetHashCode();
                if (this.DetectedBy != null)
                    hashCode = hashCode * 59 + this.DetectedBy.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.FileTypeDescription != null)
                    hashCode = hashCode * 59 + this.FileTypeDescription.GetHashCode();
                if (this.ProcessInfo != null)
                    hashCode = hashCode * 59 + this.ProcessInfo.GetHashCode();
                if (this.ProgressPercentage != null)
                    hashCode = hashCode * 59 + this.ProgressPercentage.GetHashCode();
                if (this.ScanAllResultA != null)
                    hashCode = hashCode * 59 + this.ScanAllResultA.GetHashCode();
                if (this.ScanAllResultI != null)
                    hashCode = hashCode * 59 + this.ScanAllResultI.GetHashCode();
                if (this.ScannedWith != null)
                    hashCode = hashCode * 59 + this.ScannedWith.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
