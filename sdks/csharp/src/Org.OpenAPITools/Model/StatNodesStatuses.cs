/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Node status
    /// </summary>
    [DataContract]
    public partial class StatNodesStatuses :  IEquatable<StatNodesStatuses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatNodesStatuses" /> class.
        /// </summary>
        /// <param name="address">The location of the Node. If local, is empty string..</param>
        /// <param name="cpuCores">The number of CPU Cores allocated to this Node..</param>
        /// <param name="engines">Summary of each engine status deployed on this Node..</param>
        /// <param name="freeDiskSpace">Reported available disk on that Node (in bytes)..</param>
        /// <param name="id">Node identfier.</param>
        /// <param name="issues">A list of all potentials problems on that Node..</param>
        /// <param name="load">Current CPU utilization on this Node (in percentage)..</param>
        /// <param name="os">Current used OS.</param>
        /// <param name="scanQueue">Current load on the Node, how many files are in the queue.</param>
        /// <param name="totalMemory">How much memory is allocated on this Node (in MB)..</param>
        /// <param name="version">Product version.</param>
        public StatNodesStatuses(string address = default(string), int cpuCores = default(int), List<StatNodesEngines> engines = default(List<StatNodesEngines>), int freeDiskSpace = default(int), string id = default(string), List<StatNodesIssues> issues = default(List<StatNodesIssues>), int load = default(int), string os = default(string), int scanQueue = default(int), int totalMemory = default(int), string version = default(string))
        {
            this.Address = address;
            this.CpuCores = cpuCores;
            this.Engines = engines;
            this.FreeDiskSpace = freeDiskSpace;
            this.Id = id;
            this.Issues = issues;
            this.Load = load;
            this.Os = os;
            this.ScanQueue = scanQueue;
            this.TotalMemory = totalMemory;
            this.Version = version;
        }
        
        /// <summary>
        /// The location of the Node. If local, is empty string.
        /// </summary>
        /// <value>The location of the Node. If local, is empty string.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The number of CPU Cores allocated to this Node.
        /// </summary>
        /// <value>The number of CPU Cores allocated to this Node.</value>
        [DataMember(Name="cpu_cores", EmitDefaultValue=false)]
        public int CpuCores { get; set; }

        /// <summary>
        /// Summary of each engine status deployed on this Node.
        /// </summary>
        /// <value>Summary of each engine status deployed on this Node.</value>
        [DataMember(Name="engines", EmitDefaultValue=false)]
        public List<StatNodesEngines> Engines { get; set; }

        /// <summary>
        /// Reported available disk on that Node (in bytes).
        /// </summary>
        /// <value>Reported available disk on that Node (in bytes).</value>
        [DataMember(Name="free_disk_space", EmitDefaultValue=false)]
        public int FreeDiskSpace { get; set; }

        /// <summary>
        /// Node identfier
        /// </summary>
        /// <value>Node identfier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A list of all potentials problems on that Node.
        /// </summary>
        /// <value>A list of all potentials problems on that Node.</value>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public List<StatNodesIssues> Issues { get; set; }

        /// <summary>
        /// Current CPU utilization on this Node (in percentage).
        /// </summary>
        /// <value>Current CPU utilization on this Node (in percentage).</value>
        [DataMember(Name="load", EmitDefaultValue=false)]
        public int Load { get; set; }

        /// <summary>
        /// Current used OS
        /// </summary>
        /// <value>Current used OS</value>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Current load on the Node, how many files are in the queue
        /// </summary>
        /// <value>Current load on the Node, how many files are in the queue</value>
        [DataMember(Name="scan_queue", EmitDefaultValue=false)]
        public int ScanQueue { get; set; }

        /// <summary>
        /// How much memory is allocated on this Node (in MB).
        /// </summary>
        /// <value>How much memory is allocated on this Node (in MB).</value>
        [DataMember(Name="total_memory", EmitDefaultValue=false)]
        public int TotalMemory { get; set; }

        /// <summary>
        /// Product version
        /// </summary>
        /// <value>Product version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatNodesStatuses {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CpuCores: ").Append(CpuCores).Append("\n");
            sb.Append("  Engines: ").Append(Engines).Append("\n");
            sb.Append("  FreeDiskSpace: ").Append(FreeDiskSpace).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Load: ").Append(Load).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  ScanQueue: ").Append(ScanQueue).Append("\n");
            sb.Append("  TotalMemory: ").Append(TotalMemory).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatNodesStatuses);
        }

        /// <summary>
        /// Returns true if StatNodesStatuses instances are equal
        /// </summary>
        /// <param name="input">Instance of StatNodesStatuses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatNodesStatuses input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CpuCores == input.CpuCores ||
                    (this.CpuCores != null &&
                    this.CpuCores.Equals(input.CpuCores))
                ) && 
                (
                    this.Engines == input.Engines ||
                    this.Engines != null &&
                    input.Engines != null &&
                    this.Engines.SequenceEqual(input.Engines)
                ) && 
                (
                    this.FreeDiskSpace == input.FreeDiskSpace ||
                    (this.FreeDiskSpace != null &&
                    this.FreeDiskSpace.Equals(input.FreeDiskSpace))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Issues == input.Issues ||
                    this.Issues != null &&
                    input.Issues != null &&
                    this.Issues.SequenceEqual(input.Issues)
                ) && 
                (
                    this.Load == input.Load ||
                    (this.Load != null &&
                    this.Load.Equals(input.Load))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.ScanQueue == input.ScanQueue ||
                    (this.ScanQueue != null &&
                    this.ScanQueue.Equals(input.ScanQueue))
                ) && 
                (
                    this.TotalMemory == input.TotalMemory ||
                    (this.TotalMemory != null &&
                    this.TotalMemory.Equals(input.TotalMemory))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.CpuCores != null)
                    hashCode = hashCode * 59 + this.CpuCores.GetHashCode();
                if (this.Engines != null)
                    hashCode = hashCode * 59 + this.Engines.GetHashCode();
                if (this.FreeDiskSpace != null)
                    hashCode = hashCode * 59 + this.FreeDiskSpace.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Issues != null)
                    hashCode = hashCode * 59 + this.Issues.GetHashCode();
                if (this.Load != null)
                    hashCode = hashCode * 59 + this.Load.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.ScanQueue != null)
                    hashCode = hashCode * 59 + this.ScanQueue.GetHashCode();
                if (this.TotalMemory != null)
                    hashCode = hashCode * 59 + this.TotalMemory.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
