/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A set of optional vulnerability details
    /// </summary>
    [DataContract]
    public partial class VulnerabilityResponseResultDetails :  IEquatable<VulnerabilityResponseResultDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityResponseResultDetails" /> class.
        /// </summary>
        /// <param name="cpe">A CPE product reference.</param>
        /// <param name="cve">A CVE identification string.</param>
        /// <param name="cvss">cvss.</param>
        /// <param name="cwe">A CWE group identification string.</param>
        /// <param name="lastModifiedEpoch">An epoch timestamp indicating source last update time.</param>
        /// <param name="publishedEpoch">An epoch timestamp indicating source publishing time.</param>
        /// <param name="references">An array of external reference links.</param>
        public VulnerabilityResponseResultDetails(string cpe = default(string), string cve = default(string), VulnerabilityResponseResultDetailsCvss cvss = default(VulnerabilityResponseResultDetailsCvss), string cwe = default(string), string lastModifiedEpoch = default(string), string publishedEpoch = default(string), List<string> references = default(List<string>))
        {
            this.Cpe = cpe;
            this.Cve = cve;
            this.Cvss = cvss;
            this.Cwe = cwe;
            this.LastModifiedEpoch = lastModifiedEpoch;
            this.PublishedEpoch = publishedEpoch;
            this.References = references;
        }
        
        /// <summary>
        /// A CPE product reference
        /// </summary>
        /// <value>A CPE product reference</value>
        [DataMember(Name="cpe", EmitDefaultValue=false)]
        public string Cpe { get; set; }

        /// <summary>
        /// A CVE identification string
        /// </summary>
        /// <value>A CVE identification string</value>
        [DataMember(Name="cve", EmitDefaultValue=false)]
        public string Cve { get; set; }

        /// <summary>
        /// Gets or Sets Cvss
        /// </summary>
        [DataMember(Name="cvss", EmitDefaultValue=false)]
        public VulnerabilityResponseResultDetailsCvss Cvss { get; set; }

        /// <summary>
        /// A CWE group identification string
        /// </summary>
        /// <value>A CWE group identification string</value>
        [DataMember(Name="cwe", EmitDefaultValue=false)]
        public string Cwe { get; set; }

        /// <summary>
        /// An epoch timestamp indicating source last update time
        /// </summary>
        /// <value>An epoch timestamp indicating source last update time</value>
        [DataMember(Name="last_modified_epoch", EmitDefaultValue=false)]
        public string LastModifiedEpoch { get; set; }

        /// <summary>
        /// An epoch timestamp indicating source publishing time
        /// </summary>
        /// <value>An epoch timestamp indicating source publishing time</value>
        [DataMember(Name="published-epoch", EmitDefaultValue=false)]
        public string PublishedEpoch { get; set; }

        /// <summary>
        /// An array of external reference links
        /// </summary>
        /// <value>An array of external reference links</value>
        [DataMember(Name="references", EmitDefaultValue=false)]
        public List<string> References { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityResponseResultDetails {\n");
            sb.Append("  Cpe: ").Append(Cpe).Append("\n");
            sb.Append("  Cve: ").Append(Cve).Append("\n");
            sb.Append("  Cvss: ").Append(Cvss).Append("\n");
            sb.Append("  Cwe: ").Append(Cwe).Append("\n");
            sb.Append("  LastModifiedEpoch: ").Append(LastModifiedEpoch).Append("\n");
            sb.Append("  PublishedEpoch: ").Append(PublishedEpoch).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityResponseResultDetails);
        }

        /// <summary>
        /// Returns true if VulnerabilityResponseResultDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityResponseResultDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityResponseResultDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cpe == input.Cpe ||
                    (this.Cpe != null &&
                    this.Cpe.Equals(input.Cpe))
                ) && 
                (
                    this.Cve == input.Cve ||
                    (this.Cve != null &&
                    this.Cve.Equals(input.Cve))
                ) && 
                (
                    this.Cvss == input.Cvss ||
                    (this.Cvss != null &&
                    this.Cvss.Equals(input.Cvss))
                ) && 
                (
                    this.Cwe == input.Cwe ||
                    (this.Cwe != null &&
                    this.Cwe.Equals(input.Cwe))
                ) && 
                (
                    this.LastModifiedEpoch == input.LastModifiedEpoch ||
                    (this.LastModifiedEpoch != null &&
                    this.LastModifiedEpoch.Equals(input.LastModifiedEpoch))
                ) && 
                (
                    this.PublishedEpoch == input.PublishedEpoch ||
                    (this.PublishedEpoch != null &&
                    this.PublishedEpoch.Equals(input.PublishedEpoch))
                ) && 
                (
                    this.References == input.References ||
                    this.References != null &&
                    input.References != null &&
                    this.References.SequenceEqual(input.References)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cpe != null)
                    hashCode = hashCode * 59 + this.Cpe.GetHashCode();
                if (this.Cve != null)
                    hashCode = hashCode * 59 + this.Cve.GetHashCode();
                if (this.Cvss != null)
                    hashCode = hashCode * 59 + this.Cvss.GetHashCode();
                if (this.Cwe != null)
                    hashCode = hashCode * 59 + this.Cwe.GetHashCode();
                if (this.LastModifiedEpoch != null)
                    hashCode = hashCode * 59 + this.LastModifiedEpoch.GetHashCode();
                if (this.PublishedEpoch != null)
                    hashCode = hashCode * 59 + this.PublishedEpoch.GetHashCode();
                if (this.References != null)
                    hashCode = hashCode * 59 + this.References.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
