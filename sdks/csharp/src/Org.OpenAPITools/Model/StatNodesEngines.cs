/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Engine summary
    /// </summary>
    [DataContract]
    public partial class StatNodesEngines :  IEquatable<StatNodesEngines>, IValidatableObject
    {
        /// <summary>
        /// Engine&#39;s type:    * av   * archive   * filetype 
        /// </summary>
        /// <value>Engine&#39;s type:    * av   * archive   * filetype </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EngineTypeEnum
        {
            /// <summary>
            /// Enum Av for value: av
            /// </summary>
            [EnumMember(Value = "av")]
            Av = 1,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            [EnumMember(Value = "archive")]
            Archive = 2,

            /// <summary>
            /// Enum Filetype for value: filetype
            /// </summary>
            [EnumMember(Value = "filetype")]
            Filetype = 3

        }

        /// <summary>
        /// Engine&#39;s type:    * av   * archive   * filetype 
        /// </summary>
        /// <value>Engine&#39;s type:    * av   * archive   * filetype </value>
        [DataMember(Name="engine_type", EmitDefaultValue=false)]
        public EngineTypeEnum? EngineType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatNodesEngines" /> class.
        /// </summary>
        /// <param name="active">If used by at least one engine.</param>
        /// <param name="dbVer">The database version for this engine.</param>
        /// <param name="defTime">The database definition time for this engine.</param>
        /// <param name="engName">Engine name.</param>
        /// <param name="engVer">Engine&#39;s version (format differs from one engine to another)..</param>
        /// <param name="engineType">Engine&#39;s type:    * av   * archive   * filetype .</param>
        /// <param name="id">Engine internal ID.</param>
        public StatNodesEngines(bool active = default(bool), string dbVer = default(string), string defTime = default(string), string engName = default(string), string engVer = default(string), EngineTypeEnum? engineType = default(EngineTypeEnum?), string id = default(string))
        {
            this.Active = active;
            this.DbVer = dbVer;
            this.DefTime = defTime;
            this.EngName = engName;
            this.EngVer = engVer;
            this.EngineType = engineType;
            this.Id = id;
        }
        
        /// <summary>
        /// If used by at least one engine
        /// </summary>
        /// <value>If used by at least one engine</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The database version for this engine
        /// </summary>
        /// <value>The database version for this engine</value>
        [DataMember(Name="db_ver", EmitDefaultValue=false)]
        public string DbVer { get; set; }

        /// <summary>
        /// The database definition time for this engine
        /// </summary>
        /// <value>The database definition time for this engine</value>
        [DataMember(Name="def_time", EmitDefaultValue=false)]
        public string DefTime { get; set; }

        /// <summary>
        /// Engine name
        /// </summary>
        /// <value>Engine name</value>
        [DataMember(Name="eng_name", EmitDefaultValue=false)]
        public string EngName { get; set; }

        /// <summary>
        /// Engine&#39;s version (format differs from one engine to another).
        /// </summary>
        /// <value>Engine&#39;s version (format differs from one engine to another).</value>
        [DataMember(Name="eng_ver", EmitDefaultValue=false)]
        public string EngVer { get; set; }


        /// <summary>
        /// Engine internal ID
        /// </summary>
        /// <value>Engine internal ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatNodesEngines {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DbVer: ").Append(DbVer).Append("\n");
            sb.Append("  DefTime: ").Append(DefTime).Append("\n");
            sb.Append("  EngName: ").Append(EngName).Append("\n");
            sb.Append("  EngVer: ").Append(EngVer).Append("\n");
            sb.Append("  EngineType: ").Append(EngineType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatNodesEngines);
        }

        /// <summary>
        /// Returns true if StatNodesEngines instances are equal
        /// </summary>
        /// <param name="input">Instance of StatNodesEngines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatNodesEngines input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.DbVer == input.DbVer ||
                    (this.DbVer != null &&
                    this.DbVer.Equals(input.DbVer))
                ) && 
                (
                    this.DefTime == input.DefTime ||
                    (this.DefTime != null &&
                    this.DefTime.Equals(input.DefTime))
                ) && 
                (
                    this.EngName == input.EngName ||
                    (this.EngName != null &&
                    this.EngName.Equals(input.EngName))
                ) && 
                (
                    this.EngVer == input.EngVer ||
                    (this.EngVer != null &&
                    this.EngVer.Equals(input.EngVer))
                ) && 
                (
                    this.EngineType == input.EngineType ||
                    (this.EngineType != null &&
                    this.EngineType.Equals(input.EngineType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.DbVer != null)
                    hashCode = hashCode * 59 + this.DbVer.GetHashCode();
                if (this.DefTime != null)
                    hashCode = hashCode * 59 + this.DefTime.GetHashCode();
                if (this.EngName != null)
                    hashCode = hashCode * 59 + this.EngName.GetHashCode();
                if (this.EngVer != null)
                    hashCode = hashCode * 59 + this.EngVer.GetHashCode();
                if (this.EngineType != null)
                    hashCode = hashCode * 59 + this.EngineType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
