/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An entry detailing the match.
    /// </summary>
    [DataContract]
    public partial class DLPRuleMatchResult :  IEquatable<DLPRuleMatchResult>, IValidatableObject
    {
        /// <summary>
        /// The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; 
        /// </summary>
        /// <value>The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CertaintyEnum
        {
            /// <summary>
            /// Enum VeryLow for value: Very Low
            /// </summary>
            [EnumMember(Value = "Very Low")]
            VeryLow = 1,

            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,

            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4,

            /// <summary>
            /// Enum VeryHigh for value: Very High
            /// </summary>
            [EnumMember(Value = "Very High")]
            VeryHigh = 5

        }

        /// <summary>
        /// The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; 
        /// </summary>
        /// <value>The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; </value>
        [DataMember(Name="certainty", EmitDefaultValue=false)]
        public CertaintyEnum? Certainty { get; set; }
        /// <summary>
        /// (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). 
        /// </summary>
        /// <value>(NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). 
        /// </summary>
        /// <value>(NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). </value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DLPRuleMatchResult" /> class.
        /// </summary>
        /// <param name="after">The context after the matched data..</param>
        /// <param name="before">The context before the matched data..</param>
        /// <param name="certainty">The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; .</param>
        /// <param name="certaintyScore">Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] .</param>
        /// <param name="hit">The matched data..</param>
        /// <param name="isRedacted">If file was redacted or not..</param>
        /// <param name="severity">(NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). .</param>
        public DLPRuleMatchResult(string after = default(string), string before = default(string), CertaintyEnum? certainty = default(CertaintyEnum?), int certaintyScore = default(int), string hit = default(string), bool isRedacted = default(bool), SeverityEnum? severity = default(SeverityEnum?))
        {
            this.After = after;
            this.Before = before;
            this.Certainty = certainty;
            this.CertaintyScore = certaintyScore;
            this.Hit = hit;
            this.IsRedacted = isRedacted;
            this.Severity = severity;
        }
        
        /// <summary>
        /// The context after the matched data.
        /// </summary>
        /// <value>The context after the matched data.</value>
        [DataMember(Name="after", EmitDefaultValue=false)]
        public string After { get; set; }

        /// <summary>
        /// The context before the matched data.
        /// </summary>
        /// <value>The context before the matched data.</value>
        [DataMember(Name="before", EmitDefaultValue=false)]
        public string Before { get; set; }


        /// <summary>
        /// Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] 
        /// </summary>
        /// <value>Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] </value>
        [DataMember(Name="certainty_score", EmitDefaultValue=false)]
        public int CertaintyScore { get; set; }

        /// <summary>
        /// The matched data.
        /// </summary>
        /// <value>The matched data.</value>
        [DataMember(Name="hit", EmitDefaultValue=false)]
        public string Hit { get; set; }

        /// <summary>
        /// If file was redacted or not.
        /// </summary>
        /// <value>If file was redacted or not.</value>
        [DataMember(Name="isRedacted", EmitDefaultValue=false)]
        public bool IsRedacted { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DLPRuleMatchResult {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Certainty: ").Append(Certainty).Append("\n");
            sb.Append("  CertaintyScore: ").Append(CertaintyScore).Append("\n");
            sb.Append("  Hit: ").Append(Hit).Append("\n");
            sb.Append("  IsRedacted: ").Append(IsRedacted).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DLPRuleMatchResult);
        }

        /// <summary>
        /// Returns true if DLPRuleMatchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DLPRuleMatchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DLPRuleMatchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.After == input.After ||
                    (this.After != null &&
                    this.After.Equals(input.After))
                ) && 
                (
                    this.Before == input.Before ||
                    (this.Before != null &&
                    this.Before.Equals(input.Before))
                ) && 
                (
                    this.Certainty == input.Certainty ||
                    (this.Certainty != null &&
                    this.Certainty.Equals(input.Certainty))
                ) && 
                (
                    this.CertaintyScore == input.CertaintyScore ||
                    (this.CertaintyScore != null &&
                    this.CertaintyScore.Equals(input.CertaintyScore))
                ) && 
                (
                    this.Hit == input.Hit ||
                    (this.Hit != null &&
                    this.Hit.Equals(input.Hit))
                ) && 
                (
                    this.IsRedacted == input.IsRedacted ||
                    (this.IsRedacted != null &&
                    this.IsRedacted.Equals(input.IsRedacted))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.After != null)
                    hashCode = hashCode * 59 + this.After.GetHashCode();
                if (this.Before != null)
                    hashCode = hashCode * 59 + this.Before.GetHashCode();
                if (this.Certainty != null)
                    hashCode = hashCode * 59 + this.Certainty.GetHashCode();
                if (this.CertaintyScore != null)
                    hashCode = hashCode * 59 + this.CertaintyScore.GetHashCode();
                if (this.Hit != null)
                    hashCode = hashCode * 59 + this.Hit.GetHashCode();
                if (this.IsRedacted != null)
                    hashCode = hashCode * 59 + this.IsRedacted.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
