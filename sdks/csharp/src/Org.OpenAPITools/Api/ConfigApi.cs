/* 
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  - -- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   - -- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Audit clean up
        /// </summary>
        /// <remarks>
        /// Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ConfigAuditLog (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Audit clean up
        /// </summary>
        /// <remarks>
        /// Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ConfigAuditLogWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Get &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Get the list of hashes whitelisted or blacklisted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>SkipList</returns>
        SkipList ConfigGetSkipHash (string apikey = default(string));

        /// <summary>
        /// Get &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Get the list of hashes whitelisted or blacklisted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>ApiResponse of SkipList</returns>
        ApiResponse<SkipList> ConfigGetSkipHashWithHttpInfo (string apikey = default(string));
        /// <summary>
        /// Quarantine clean up
        /// </summary>
        /// <remarks>
        /// Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ConfigQuarantine (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Quarantine clean up
        /// </summary>
        /// <remarks>
        /// Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ConfigQuarantineWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Sanitized files clean up
        /// </summary>
        /// <remarks>
        /// Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ConfigSanitizedRepo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1));

        /// <summary>
        /// Sanitized files clean up
        /// </summary>
        /// <remarks>
        /// Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ConfigSanitizedRepoWithHttpInfo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1));
        /// <summary>
        /// Processing history clean up
        /// </summary>
        /// <remarks>
        /// Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ConfigScanHistory (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Processing history clean up
        /// </summary>
        /// <remarks>
        /// Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ConfigScanHistoryWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Session settings
        /// </summary>
        /// <remarks>
        /// Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>AdminConfigSession</returns>
        AdminConfigSession ConfigSession (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession));

        /// <summary>
        /// Session settings
        /// </summary>
        /// <remarks>
        /// Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigSession</returns>
        ApiResponse<AdminConfigSession> ConfigSessionWithHttpInfo (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession));
        /// <summary>
        /// Modules Update Source and Frequency
        /// </summary>
        /// <remarks>
        /// Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>AdminConfigUpdate</returns>
        AdminConfigUpdate ConfigUpdate (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate));

        /// <summary>
        /// Modules Update Source and Frequency
        /// </summary>
        /// <remarks>
        /// Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigUpdate</returns>
        ApiResponse<AdminConfigUpdate> ConfigUpdateWithHttpInfo (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate));
        /// <summary>
        /// Modify &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>SkipList</returns>
        SkipList ConfigUpdateSkipHash (string apikey = default(string), SkipList skipList = default(SkipList));

        /// <summary>
        /// Modify &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>ApiResponse of SkipList</returns>
        ApiResponse<SkipList> ConfigUpdateSkipHashWithHttpInfo (string apikey = default(string), SkipList skipList = default(SkipList));
        /// <summary>
        /// Webhook set configuration
        /// </summary>
        /// <remarks>
        /// Modifying settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>AdminConfigWebhook</returns>
        AdminConfigWebhook ConfigUpdateWebhook (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook));

        /// <summary>
        /// Webhook set configuration
        /// </summary>
        /// <remarks>
        /// Modifying settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigWebhook</returns>
        ApiResponse<AdminConfigWebhook> ConfigUpdateWebhookWithHttpInfo (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook));
        /// <summary>
        /// Webhook get configuration
        /// </summary>
        /// <remarks>
        /// Getting settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>AdminConfigWebhook</returns>
        AdminConfigWebhook ConfigWebhook (string apikey = default(string));

        /// <summary>
        /// Webhook get configuration
        /// </summary>
        /// <remarks>
        /// Getting settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>ApiResponse of AdminConfigWebhook</returns>
        ApiResponse<AdminConfigWebhook> ConfigWebhookWithHttpInfo (string apikey = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Audit clean up
        /// </summary>
        /// <remarks>
        /// Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ConfigAuditLogAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Audit clean up
        /// </summary>
        /// <remarks>
        /// Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigAuditLogAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Get &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Get the list of hashes whitelisted or blacklisted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of SkipList</returns>
        System.Threading.Tasks.Task<SkipList> ConfigGetSkipHashAsync (string apikey = default(string));

        /// <summary>
        /// Get &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Get the list of hashes whitelisted or blacklisted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of ApiResponse (SkipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkipList>> ConfigGetSkipHashAsyncWithHttpInfo (string apikey = default(string));
        /// <summary>
        /// Quarantine clean up
        /// </summary>
        /// <remarks>
        /// Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ConfigQuarantineAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Quarantine clean up
        /// </summary>
        /// <remarks>
        /// Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigQuarantineAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Sanitized files clean up
        /// </summary>
        /// <remarks>
        /// Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ConfigSanitizedRepoAsync (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1));

        /// <summary>
        /// Sanitized files clean up
        /// </summary>
        /// <remarks>
        /// Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigSanitizedRepoAsyncWithHttpInfo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1));
        /// <summary>
        /// Processing history clean up
        /// </summary>
        /// <remarks>
        /// Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ConfigScanHistoryAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));

        /// <summary>
        /// Processing history clean up
        /// </summary>
        /// <remarks>
        /// Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigScanHistoryAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE));
        /// <summary>
        /// Session settings
        /// </summary>
        /// <remarks>
        /// Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>Task of AdminConfigSession</returns>
        System.Threading.Tasks.Task<AdminConfigSession> ConfigSessionAsync (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession));

        /// <summary>
        /// Session settings
        /// </summary>
        /// <remarks>
        /// Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminConfigSession>> ConfigSessionAsyncWithHttpInfo (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession));
        /// <summary>
        /// Modules Update Source and Frequency
        /// </summary>
        /// <remarks>
        /// Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>Task of AdminConfigUpdate</returns>
        System.Threading.Tasks.Task<AdminConfigUpdate> ConfigUpdateAsync (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate));

        /// <summary>
        /// Modules Update Source and Frequency
        /// </summary>
        /// <remarks>
        /// Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminConfigUpdate>> ConfigUpdateAsyncWithHttpInfo (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate));
        /// <summary>
        /// Modify &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>Task of SkipList</returns>
        System.Threading.Tasks.Task<SkipList> ConfigUpdateSkipHashAsync (string apikey = default(string), SkipList skipList = default(SkipList));

        /// <summary>
        /// Modify &#39;skip by hash&#39; list
        /// </summary>
        /// <remarks>
        /// Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>Task of ApiResponse (SkipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkipList>> ConfigUpdateSkipHashAsyncWithHttpInfo (string apikey = default(string), SkipList skipList = default(SkipList));
        /// <summary>
        /// Webhook set configuration
        /// </summary>
        /// <remarks>
        /// Modifying settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>Task of AdminConfigWebhook</returns>
        System.Threading.Tasks.Task<AdminConfigWebhook> ConfigUpdateWebhookAsync (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook));

        /// <summary>
        /// Webhook set configuration
        /// </summary>
        /// <remarks>
        /// Modifying settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminConfigWebhook>> ConfigUpdateWebhookAsyncWithHttpInfo (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook));
        /// <summary>
        /// Webhook get configuration
        /// </summary>
        /// <remarks>
        /// Getting settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of AdminConfigWebhook</returns>
        System.Threading.Tasks.Task<AdminConfigWebhook> ConfigWebhookAsync (string apikey = default(string));

        /// <summary>
        /// Webhook get configuration
        /// </summary>
        /// <remarks>
        /// Getting settings supported for webhook mode 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdminConfigWebhook>> ConfigWebhookAsyncWithHttpInfo (string apikey = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigApi : IConfigApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConfigApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Audit clean up Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ConfigAuditLog (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = ConfigAuditLogWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Audit clean up Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> ConfigAuditLogWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigAuditLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Audit clean up Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ConfigAuditLogAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = await ConfigAuditLogAsyncWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Audit clean up Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigAuditLogAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigAuditLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get &#39;skip by hash&#39; list Get the list of hashes whitelisted or blacklisted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>SkipList</returns>
        public SkipList ConfigGetSkipHash (string apikey = default(string))
        {
             ApiResponse<SkipList> localVarResponse = ConfigGetSkipHashWithHttpInfo(apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get &#39;skip by hash&#39; list Get the list of hashes whitelisted or blacklisted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>ApiResponse of SkipList</returns>
        public ApiResponse<SkipList> ConfigGetSkipHashWithHttpInfo (string apikey = default(string))
        {

            var localVarPath = "/admin/config/skip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigGetSkipHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkipList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkipList)));
        }

        /// <summary>
        /// Get &#39;skip by hash&#39; list Get the list of hashes whitelisted or blacklisted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of SkipList</returns>
        public async System.Threading.Tasks.Task<SkipList> ConfigGetSkipHashAsync (string apikey = default(string))
        {
             ApiResponse<SkipList> localVarResponse = await ConfigGetSkipHashAsyncWithHttpInfo(apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get &#39;skip by hash&#39; list Get the list of hashes whitelisted or blacklisted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of ApiResponse (SkipList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SkipList>> ConfigGetSkipHashAsyncWithHttpInfo (string apikey = default(string))
        {

            var localVarPath = "/admin/config/skip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigGetSkipHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkipList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkipList)));
        }

        /// <summary>
        /// Quarantine clean up Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ConfigQuarantine (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = ConfigQuarantineWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Quarantine clean up Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> ConfigQuarantineWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/quarantine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigQuarantine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Quarantine clean up Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ConfigQuarantineAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = await ConfigQuarantineAsyncWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Quarantine clean up Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigQuarantineAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/quarantine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigQuarantine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Sanitized files clean up Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ConfigSanitizedRepo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1))
        {
             ApiResponse<InlineResponse2001> localVarResponse = ConfigSanitizedRepoWithHttpInfo(apikey, inlineObject1);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sanitized files clean up Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> ConfigSanitizedRepoWithHttpInfo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1))
        {

            var localVarPath = "/admin/config/sanitize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigSanitizedRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Sanitized files clean up Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ConfigSanitizedRepoAsync (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1))
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ConfigSanitizedRepoAsyncWithHttpInfo(apikey, inlineObject1);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sanitized files clean up Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ConfigSanitizedRepoAsyncWithHttpInfo (string apikey = default(string), InlineObject1 inlineObject1 = default(InlineObject1))
        {

            var localVarPath = "/admin/config/sanitize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigSanitizedRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Processing history clean up Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ConfigScanHistory (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = ConfigScanHistoryWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Processing history clean up Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> ConfigScanHistoryWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/scanhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigScanHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Processing history clean up Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ConfigScanHistoryAsync (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {
             ApiResponse<InlineResponse200> localVarResponse = await ConfigScanHistoryAsyncWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Processing history clean up Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ConfigScanHistoryAsyncWithHttpInfo (string apikey = default(string), UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = default(UNKNOWN_BASE_TYPE))
        {

            var localVarPath = "/admin/config/scanhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigScanHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Session settings Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>AdminConfigSession</returns>
        public AdminConfigSession ConfigSession (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession))
        {
             ApiResponse<AdminConfigSession> localVarResponse = ConfigSessionWithHttpInfo(apikey, adminConfigSession);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Session settings Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigSession</returns>
        public ApiResponse<AdminConfigSession> ConfigSessionWithHttpInfo (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession))
        {

            var localVarPath = "/admin/config/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigSession != null && adminConfigSession.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigSession); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigSession; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigSession)));
        }

        /// <summary>
        /// Session settings Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>Task of AdminConfigSession</returns>
        public async System.Threading.Tasks.Task<AdminConfigSession> ConfigSessionAsync (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession))
        {
             ApiResponse<AdminConfigSession> localVarResponse = await ConfigSessionAsyncWithHttpInfo(apikey, adminConfigSession);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Session settings Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigSession"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminConfigSession>> ConfigSessionAsyncWithHttpInfo (string apikey = default(string), AdminConfigSession adminConfigSession = default(AdminConfigSession))
        {

            var localVarPath = "/admin/config/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigSession != null && adminConfigSession.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigSession); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigSession; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigSession)));
        }

        /// <summary>
        /// Modules Update Source and Frequency Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>AdminConfigUpdate</returns>
        public AdminConfigUpdate ConfigUpdate (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate))
        {
             ApiResponse<AdminConfigUpdate> localVarResponse = ConfigUpdateWithHttpInfo(apikey, adminConfigUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modules Update Source and Frequency Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigUpdate</returns>
        public ApiResponse<AdminConfigUpdate> ConfigUpdateWithHttpInfo (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate))
        {

            var localVarPath = "/admin/config/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigUpdate != null && adminConfigUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigUpdate; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigUpdate)));
        }

        /// <summary>
        /// Modules Update Source and Frequency Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>Task of AdminConfigUpdate</returns>
        public async System.Threading.Tasks.Task<AdminConfigUpdate> ConfigUpdateAsync (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate))
        {
             ApiResponse<AdminConfigUpdate> localVarResponse = await ConfigUpdateAsyncWithHttpInfo(apikey, adminConfigUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modules Update Source and Frequency Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigUpdate"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminConfigUpdate>> ConfigUpdateAsyncWithHttpInfo (string apikey = default(string), AdminConfigUpdate adminConfigUpdate = default(AdminConfigUpdate))
        {

            var localVarPath = "/admin/config/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigUpdate != null && adminConfigUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigUpdate; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigUpdate)));
        }

        /// <summary>
        /// Modify &#39;skip by hash&#39; list Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>SkipList</returns>
        public SkipList ConfigUpdateSkipHash (string apikey = default(string), SkipList skipList = default(SkipList))
        {
             ApiResponse<SkipList> localVarResponse = ConfigUpdateSkipHashWithHttpInfo(apikey, skipList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify &#39;skip by hash&#39; list Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>ApiResponse of SkipList</returns>
        public ApiResponse<SkipList> ConfigUpdateSkipHashWithHttpInfo (string apikey = default(string), SkipList skipList = default(SkipList))
        {

            var localVarPath = "/admin/config/skip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (skipList != null && skipList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(skipList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = skipList; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdateSkipHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkipList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkipList)));
        }

        /// <summary>
        /// Modify &#39;skip by hash&#39; list Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>Task of SkipList</returns>
        public async System.Threading.Tasks.Task<SkipList> ConfigUpdateSkipHashAsync (string apikey = default(string), SkipList skipList = default(SkipList))
        {
             ApiResponse<SkipList> localVarResponse = await ConfigUpdateSkipHashAsyncWithHttpInfo(apikey, skipList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify &#39;skip by hash&#39; list Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="skipList">A list of all skip/white/black-listed hashes. (optional)</param>
        /// <returns>Task of ApiResponse (SkipList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SkipList>> ConfigUpdateSkipHashAsyncWithHttpInfo (string apikey = default(string), SkipList skipList = default(SkipList))
        {

            var localVarPath = "/admin/config/skip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (skipList != null && skipList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(skipList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = skipList; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdateSkipHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkipList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkipList)));
        }

        /// <summary>
        /// Webhook set configuration Modifying settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>AdminConfigWebhook</returns>
        public AdminConfigWebhook ConfigUpdateWebhook (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook))
        {
             ApiResponse<AdminConfigWebhook> localVarResponse = ConfigUpdateWebhookWithHttpInfo(apikey, adminConfigWebhook);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Webhook set configuration Modifying settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>ApiResponse of AdminConfigWebhook</returns>
        public ApiResponse<AdminConfigWebhook> ConfigUpdateWebhookWithHttpInfo (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook))
        {

            var localVarPath = "/admin/config/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigWebhook != null && adminConfigWebhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigWebhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigWebhook; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigWebhook)));
        }

        /// <summary>
        /// Webhook set configuration Modifying settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>Task of AdminConfigWebhook</returns>
        public async System.Threading.Tasks.Task<AdminConfigWebhook> ConfigUpdateWebhookAsync (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook))
        {
             ApiResponse<AdminConfigWebhook> localVarResponse = await ConfigUpdateWebhookAsyncWithHttpInfo(apikey, adminConfigWebhook);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Webhook set configuration Modifying settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <param name="adminConfigWebhook"> (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminConfigWebhook>> ConfigUpdateWebhookAsyncWithHttpInfo (string apikey = default(string), AdminConfigWebhook adminConfigWebhook = default(AdminConfigWebhook))
        {

            var localVarPath = "/admin/config/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter
            if (adminConfigWebhook != null && adminConfigWebhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(adminConfigWebhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = adminConfigWebhook; // byte array
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarHeaderParams["apikey"] = this.Configuration.GetApiKeyWithPrefix("apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigUpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigWebhook)));
        }

        /// <summary>
        /// Webhook get configuration Getting settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>AdminConfigWebhook</returns>
        public AdminConfigWebhook ConfigWebhook (string apikey = default(string))
        {
             ApiResponse<AdminConfigWebhook> localVarResponse = ConfigWebhookWithHttpInfo(apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Webhook get configuration Getting settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>ApiResponse of AdminConfigWebhook</returns>
        public ApiResponse<AdminConfigWebhook> ConfigWebhookWithHttpInfo (string apikey = default(string))
        {

            var localVarPath = "/admin/config/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigWebhook)));
        }

        /// <summary>
        /// Webhook get configuration Getting settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of AdminConfigWebhook</returns>
        public async System.Threading.Tasks.Task<AdminConfigWebhook> ConfigWebhookAsync (string apikey = default(string))
        {
             ApiResponse<AdminConfigWebhook> localVarResponse = await ConfigWebhookAsyncWithHttpInfo(apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Webhook get configuration Getting settings supported for webhook mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikey">Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)</param>
        /// <returns>Task of ApiResponse (AdminConfigWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdminConfigWebhook>> ConfigWebhookAsyncWithHttpInfo (string apikey = default(string))
        {

            var localVarPath = "/admin/config/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikey != null) localVarHeaderParams.Add("apikey", this.Configuration.ApiClient.ParameterToString(apikey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdminConfigWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdminConfigWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdminConfigWebhook)));
        }

    }
}
