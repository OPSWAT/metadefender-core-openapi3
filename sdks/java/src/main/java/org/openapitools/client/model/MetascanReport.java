/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.MetascanReportScanDetails;
import org.openapitools.client.model.ProcessingResultsIndexEnum;
import org.openapitools.client.model.ProcessingResultsStringEnum;

/**
 * Result of the scanning process.
 */
@ApiModel(description = "Result of the scanning process.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class MetascanReport {
  public static final String SERIALIZED_NAME_DATA_ID = "data_id";
  @SerializedName(SERIALIZED_NAME_DATA_ID)
  private String dataId;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progress_percentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  private Integer progressPercentage;

  public static final String SERIALIZED_NAME_SCAN_ALL_RESULT_A = "scan_all_result_a";
  @SerializedName(SERIALIZED_NAME_SCAN_ALL_RESULT_A)
  private ProcessingResultsStringEnum scanAllResultA = null;

  public static final String SERIALIZED_NAME_SCAN_ALL_RESULT_I = "scan_all_result_i";
  @SerializedName(SERIALIZED_NAME_SCAN_ALL_RESULT_I)
  private ProcessingResultsIndexEnum scanAllResultI = null;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TOTAL_AVS = "total_avs";
  @SerializedName(SERIALIZED_NAME_TOTAL_AVS)
  private Integer totalAvs;

  public static final String SERIALIZED_NAME_TOTAL_TIME = "total_time";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME)
  private Integer totalTime;

  public static final String SERIALIZED_NAME_SCAN_DETAILS = "scan_details";
  @SerializedName(SERIALIZED_NAME_SCAN_DETAILS)
  private MetascanReportScanDetails scanDetails;


  public MetascanReport dataId(String dataId) {
    
    this.dataId = dataId;
    return this;
  }

   /**
   * Data ID of the requested file
   * @return dataId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8101abae27be4d63859c55d9e0ed0135", value = "Data ID of the requested file")

  public String getDataId() {
    return dataId;
  }


  public void setDataId(String dataId) {
    this.dataId = dataId;
  }


  public MetascanReport progressPercentage(Integer progressPercentage) {
    
    this.progressPercentage = progressPercentage;
    return this;
  }

   /**
   * Track analysis progress until reaches 100.
   * @return progressPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Track analysis progress until reaches 100.")

  public Integer getProgressPercentage() {
    return progressPercentage;
  }


  public void setProgressPercentage(Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }


  public MetascanReport scanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    
    this.scanAllResultA = scanAllResultA;
    return this;
  }

   /**
   * The overall scan result as string
   * @return scanAllResultA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sensitive Data Found", value = "The overall scan result as string")

  public ProcessingResultsStringEnum getScanAllResultA() {
    return scanAllResultA;
  }


  public void setScanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    this.scanAllResultA = scanAllResultA;
  }


  public MetascanReport scanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    
    this.scanAllResultI = scanAllResultI;
    return this;
  }

   /**
   * The overall scan result as index in the Processing Results table.
   * @return scanAllResultI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The overall scan result as index in the Processing Results table.")

  public ProcessingResultsIndexEnum getScanAllResultI() {
    return scanAllResultI;
  }


  public void setScanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    this.scanAllResultI = scanAllResultI;
  }


  public MetascanReport startTime(String startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Timestamp when the scanning process starts.
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-03-12T08:37:05.427Z", value = "Timestamp when the scanning process starts.")

  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public MetascanReport totalAvs(Integer totalAvs) {
    
    this.totalAvs = totalAvs;
    return this;
  }

   /**
   * Total number of scanning engines used as part of this analysis.
   * @return totalAvs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Total number of scanning engines used as part of this analysis.")

  public Integer getTotalAvs() {
    return totalAvs;
  }


  public void setTotalAvs(Integer totalAvs) {
    this.totalAvs = totalAvs;
  }


  public MetascanReport totalTime(Integer totalTime) {
    
    this.totalTime = totalTime;
    return this;
  }

   /**
   * Total time elapsed during scan (in milliseconds).
   * @return totalTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4804", value = "Total time elapsed during scan (in milliseconds).")

  public Integer getTotalTime() {
    return totalTime;
  }


  public void setTotalTime(Integer totalTime) {
    this.totalTime = totalTime;
  }


  public MetascanReport scanDetails(MetascanReportScanDetails scanDetails) {
    
    this.scanDetails = scanDetails;
    return this;
  }

   /**
   * Get scanDetails
   * @return scanDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetascanReportScanDetails getScanDetails() {
    return scanDetails;
  }


  public void setScanDetails(MetascanReportScanDetails scanDetails) {
    this.scanDetails = scanDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetascanReport metascanReport = (MetascanReport) o;
    return Objects.equals(this.dataId, metascanReport.dataId) &&
        Objects.equals(this.progressPercentage, metascanReport.progressPercentage) &&
        Objects.equals(this.scanAllResultA, metascanReport.scanAllResultA) &&
        Objects.equals(this.scanAllResultI, metascanReport.scanAllResultI) &&
        Objects.equals(this.startTime, metascanReport.startTime) &&
        Objects.equals(this.totalAvs, metascanReport.totalAvs) &&
        Objects.equals(this.totalTime, metascanReport.totalTime) &&
        Objects.equals(this.scanDetails, metascanReport.scanDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataId, progressPercentage, scanAllResultA, scanAllResultI, startTime, totalAvs, totalTime, scanDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetascanReport {\n");
    sb.append("    dataId: ").append(toIndentedString(dataId)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("    scanAllResultA: ").append(toIndentedString(scanAllResultA)).append("\n");
    sb.append("    scanAllResultI: ").append(toIndentedString(scanAllResultI)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalAvs: ").append(toIndentedString(totalAvs)).append("\n");
    sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
    sb.append("    scanDetails: ").append(toIndentedString(scanDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

