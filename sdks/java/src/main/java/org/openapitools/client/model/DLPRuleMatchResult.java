/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * An entry detailing the match.
 */
@ApiModel(description = "An entry detailing the match.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class DLPRuleMatchResult {
  public static final String SERIALIZED_NAME_AFTER = "after";
  @SerializedName(SERIALIZED_NAME_AFTER)
  private String after;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  private String before;

  /**
   * The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; 
   */
  @JsonAdapter(CertaintyEnum.Adapter.class)
  public enum CertaintyEnum {
    VERY_LOW("Very Low"),
    
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High"),
    
    VERY_HIGH("Very High");

    private String value;

    CertaintyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertaintyEnum fromValue(String value) {
      for (CertaintyEnum b : CertaintyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertaintyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertaintyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertaintyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertaintyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CERTAINTY = "certainty";
  @SerializedName(SERIALIZED_NAME_CERTAINTY)
  private CertaintyEnum certainty;

  public static final String SERIALIZED_NAME_CERTAINTY_SCORE = "certainty_score";
  @SerializedName(SERIALIZED_NAME_CERTAINTY_SCORE)
  private Integer certaintyScore;

  public static final String SERIALIZED_NAME_HIT = "hit";
  @SerializedName(SERIALIZED_NAME_HIT)
  private String hit;

  public static final String SERIALIZED_NAME_IS_REDACTED = "isRedacted";
  @SerializedName(SERIALIZED_NAME_IS_REDACTED)
  private Boolean isRedacted;

  /**
   * (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). 
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    SeverityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(Integer value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SeverityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;


  public DLPRuleMatchResult after(String after) {
    
    this.after = after;
    return this;
  }

   /**
   * The context after the matched data.
   * @return after
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123 Cherry Lane st.", value = "The context after the matched data.")

  public String getAfter() {
    return after;
  }


  public void setAfter(String after) {
    this.after = after;
  }


  public DLPRuleMatchResult before(String before) {
    
    this.before = before;
    return this;
  }

   /**
   * The context before the matched data.
   * @return before
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Card Number", value = "The context before the matched data.")

  public String getBefore() {
    return before;
  }


  public void setBefore(String before) {
    this.before = before;
  }


  public DLPRuleMatchResult certainty(CertaintyEnum certainty) {
    
    this.certainty = certainty;
    return this;
  }

   /**
   * The text version of \&quot;certainty_score\&quot;, possible values:   * &#x60;Very Low&#x60;     * &#x60;Low&#x60;     * &#x60;Medium&#x60;     * &#x60;High&#x60;     * &#x60;Very High&#x60; 
   * @return certainty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Very High", value = "The text version of \"certainty_score\", possible values:   * `Very Low`     * `Low`     * `Medium`     * `High`     * `Very High` ")

  public CertaintyEnum getCertainty() {
    return certainty;
  }


  public void setCertainty(CertaintyEnum certainty) {
    this.certainty = certainty;
  }


  public DLPRuleMatchResult certaintyScore(Integer certaintyScore) {
    
    this.certaintyScore = certaintyScore;
    return this;
  }

   /**
   * Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] 
   * @return certaintyScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] ")

  public Integer getCertaintyScore() {
    return certaintyScore;
  }


  public void setCertaintyScore(Integer certaintyScore) {
    this.certaintyScore = certaintyScore;
  }


  public DLPRuleMatchResult hit(String hit) {
    
    this.hit = hit;
    return this;
  }

   /**
   * The matched data.
   * @return hit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "XXXXXXXXXXXXXXX1938", value = "The matched data.")

  public String getHit() {
    return hit;
  }


  public void setHit(String hit) {
    this.hit = hit;
  }


  public DLPRuleMatchResult isRedacted(Boolean isRedacted) {
    
    this.isRedacted = isRedacted;
    return this;
  }

   /**
   * If file was redacted or not.
   * @return isRedacted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If file was redacted or not.")

  public Boolean getIsRedacted() {
    return isRedacted;
  }


  public void setIsRedacted(Boolean isRedacted) {
    this.isRedacted = isRedacted;
  }


  public DLPRuleMatchResult severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). 
   * @return severity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "(NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). ")

  public SeverityEnum getSeverity() {
    return severity;
  }


  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DLPRuleMatchResult dlPRuleMatchResult = (DLPRuleMatchResult) o;
    return Objects.equals(this.after, dlPRuleMatchResult.after) &&
        Objects.equals(this.before, dlPRuleMatchResult.before) &&
        Objects.equals(this.certainty, dlPRuleMatchResult.certainty) &&
        Objects.equals(this.certaintyScore, dlPRuleMatchResult.certaintyScore) &&
        Objects.equals(this.hit, dlPRuleMatchResult.hit) &&
        Objects.equals(this.isRedacted, dlPRuleMatchResult.isRedacted) &&
        Objects.equals(this.severity, dlPRuleMatchResult.severity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(after, before, certainty, certaintyScore, hit, isRedacted, severity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DLPRuleMatchResult {\n");
    sb.append("    after: ").append(toIndentedString(after)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("    certainty: ").append(toIndentedString(certainty)).append("\n");
    sb.append("    certaintyScore: ").append(toIndentedString(certaintyScore)).append("\n");
    sb.append("    hit: ").append(toIndentedString(hit)).append("\n");
    sb.append("    isRedacted: ").append(toIndentedString(isRedacted)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

