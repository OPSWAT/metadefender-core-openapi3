/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BatchResponseBatchFilesProcessInfo;
import org.openapitools.client.model.ProcessingResultsIndexEnum;
import org.openapitools.client.model.ProcessingResultsStringEnum;

/**
 * BatchResponseBatchFilesFilesInBatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class BatchResponseBatchFilesFilesInBatch {
  public static final String SERIALIZED_NAME_DATA_ID = "data_id";
  @SerializedName(SERIALIZED_NAME_DATA_ID)
  private String dataId;

  public static final String SERIALIZED_NAME_DETECTED_BY = "detected_by";
  @SerializedName(SERIALIZED_NAME_DETECTED_BY)
  private Integer detectedBy;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_FILE_TYPE_DESCRIPTION = "file_type_description";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE_DESCRIPTION)
  private String fileTypeDescription;

  public static final String SERIALIZED_NAME_PROCESS_INFO = "process_info";
  @SerializedName(SERIALIZED_NAME_PROCESS_INFO)
  private BatchResponseBatchFilesProcessInfo processInfo;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progress_percentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  private Integer progressPercentage;

  public static final String SERIALIZED_NAME_SCAN_ALL_RESULT_A = "scan_all_result_a";
  @SerializedName(SERIALIZED_NAME_SCAN_ALL_RESULT_A)
  private ProcessingResultsStringEnum scanAllResultA = null;

  public static final String SERIALIZED_NAME_SCAN_ALL_RESULT_I = "scan_all_result_i";
  @SerializedName(SERIALIZED_NAME_SCAN_ALL_RESULT_I)
  private ProcessingResultsIndexEnum scanAllResultI = null;

  public static final String SERIALIZED_NAME_SCANNED_WITH = "scanned_with";
  @SerializedName(SERIALIZED_NAME_SCANNED_WITH)
  private Integer scannedWith;


  public BatchResponseBatchFilesFilesInBatch dataId(String dataId) {
    
    this.dataId = dataId;
    return this;
  }

   /**
   * Unique identifer for the file.
   * @return dataId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "24c8b5dadd48445989ac3431544fdc34", value = "Unique identifer for the file.")

  public String getDataId() {
    return dataId;
  }


  public void setDataId(String dataId) {
    this.dataId = dataId;
  }


  public BatchResponseBatchFilesFilesInBatch detectedBy(Integer detectedBy) {
    
    this.detectedBy = detectedBy;
    return this;
  }

   /**
   * Total number of engines that detected this file.
   * @return detectedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "Total number of engines that detected this file.")

  public Integer getDetectedBy() {
    return detectedBy;
  }


  public void setDetectedBy(Integer detectedBy) {
    this.detectedBy = detectedBy;
  }


  public BatchResponseBatchFilesFilesInBatch displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The filename reported via &#x60;filename&#x60; header.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "eicar.com", value = "The filename reported via `filename` header.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public BatchResponseBatchFilesFilesInBatch fileSize(Integer fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Total file size in bytes.
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "68", value = "Total file size in bytes.")

  public Integer getFileSize() {
    return fileSize;
  }


  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public BatchResponseBatchFilesFilesInBatch fileType(String fileType) {
    
    this.fileType = fileType;
    return this;
  }

   /**
   * The filetype using mimetype.
   * @return fileType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "application/octet-stream", value = "The filetype using mimetype.")

  public String getFileType() {
    return fileType;
  }


  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public BatchResponseBatchFilesFilesInBatch fileTypeDescription(String fileTypeDescription) {
    
    this.fileTypeDescription = fileTypeDescription;
    return this;
  }

   /**
   * The filetype in human readable format.
   * @return fileTypeDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EICAR virus test files", value = "The filetype in human readable format.")

  public String getFileTypeDescription() {
    return fileTypeDescription;
  }


  public void setFileTypeDescription(String fileTypeDescription) {
    this.fileTypeDescription = fileTypeDescription;
  }


  public BatchResponseBatchFilesFilesInBatch processInfo(BatchResponseBatchFilesProcessInfo processInfo) {
    
    this.processInfo = processInfo;
    return this;
  }

   /**
   * Get processInfo
   * @return processInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BatchResponseBatchFilesProcessInfo getProcessInfo() {
    return processInfo;
  }


  public void setProcessInfo(BatchResponseBatchFilesProcessInfo processInfo) {
    this.processInfo = processInfo;
  }


  public BatchResponseBatchFilesFilesInBatch progressPercentage(Integer progressPercentage) {
    
    this.progressPercentage = progressPercentage;
    return this;
  }

   /**
   * Track analysis progress until reaches 100.
   * @return progressPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Track analysis progress until reaches 100.")

  public Integer getProgressPercentage() {
    return progressPercentage;
  }


  public void setProgressPercentage(Integer progressPercentage) {
    this.progressPercentage = progressPercentage;
  }


  public BatchResponseBatchFilesFilesInBatch scanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    
    this.scanAllResultA = scanAllResultA;
    return this;
  }

   /**
   * The overall scan result as string
   * @return scanAllResultA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Infected", value = "The overall scan result as string")

  public ProcessingResultsStringEnum getScanAllResultA() {
    return scanAllResultA;
  }


  public void setScanAllResultA(ProcessingResultsStringEnum scanAllResultA) {
    this.scanAllResultA = scanAllResultA;
  }


  public BatchResponseBatchFilesFilesInBatch scanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    
    this.scanAllResultI = scanAllResultI;
    return this;
  }

   /**
   * The overall scan result as index in the Processing Results table.
   * @return scanAllResultI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The overall scan result as index in the Processing Results table.")

  public ProcessingResultsIndexEnum getScanAllResultI() {
    return scanAllResultI;
  }


  public void setScanAllResultI(ProcessingResultsIndexEnum scanAllResultI) {
    this.scanAllResultI = scanAllResultI;
  }


  public BatchResponseBatchFilesFilesInBatch scannedWith(Integer scannedWith) {
    
    this.scannedWith = scannedWith;
    return this;
  }

   /**
   * The total number of engines used to analyze this file.
   * @return scannedWith
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "The total number of engines used to analyze this file.")

  public Integer getScannedWith() {
    return scannedWith;
  }


  public void setScannedWith(Integer scannedWith) {
    this.scannedWith = scannedWith;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchResponseBatchFilesFilesInBatch batchResponseBatchFilesFilesInBatch = (BatchResponseBatchFilesFilesInBatch) o;
    return Objects.equals(this.dataId, batchResponseBatchFilesFilesInBatch.dataId) &&
        Objects.equals(this.detectedBy, batchResponseBatchFilesFilesInBatch.detectedBy) &&
        Objects.equals(this.displayName, batchResponseBatchFilesFilesInBatch.displayName) &&
        Objects.equals(this.fileSize, batchResponseBatchFilesFilesInBatch.fileSize) &&
        Objects.equals(this.fileType, batchResponseBatchFilesFilesInBatch.fileType) &&
        Objects.equals(this.fileTypeDescription, batchResponseBatchFilesFilesInBatch.fileTypeDescription) &&
        Objects.equals(this.processInfo, batchResponseBatchFilesFilesInBatch.processInfo) &&
        Objects.equals(this.progressPercentage, batchResponseBatchFilesFilesInBatch.progressPercentage) &&
        Objects.equals(this.scanAllResultA, batchResponseBatchFilesFilesInBatch.scanAllResultA) &&
        Objects.equals(this.scanAllResultI, batchResponseBatchFilesFilesInBatch.scanAllResultI) &&
        Objects.equals(this.scannedWith, batchResponseBatchFilesFilesInBatch.scannedWith);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataId, detectedBy, displayName, fileSize, fileType, fileTypeDescription, processInfo, progressPercentage, scanAllResultA, scanAllResultI, scannedWith);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchResponseBatchFilesFilesInBatch {\n");
    sb.append("    dataId: ").append(toIndentedString(dataId)).append("\n");
    sb.append("    detectedBy: ").append(toIndentedString(detectedBy)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    fileTypeDescription: ").append(toIndentedString(fileTypeDescription)).append("\n");
    sb.append("    processInfo: ").append(toIndentedString(processInfo)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("    scanAllResultA: ").append(toIndentedString(scanAllResultA)).append("\n");
    sb.append("    scanAllResultI: ").append(toIndentedString(scanAllResultI)).append("\n");
    sb.append("    scannedWith: ").append(toIndentedString(scannedWith)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

