/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminConfigSession;
import org.openapitools.client.model.AdminConfigUpdate;
import org.openapitools.client.model.AdminConfigWebhook;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse500;
import org.openapitools.client.model.SkipList;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigApi {
    private ApiClient localVarApiClient;

    public ConfigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for configAuditLog
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configAuditLogCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/admin/config/auditlog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configAuditLogValidateBeforeCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configAuditLogCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Audit clean up
     * Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 configAuditLog(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = configAuditLogWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Audit clean up
     * Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> configAuditLogWithHttpInfo(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = configAuditLogValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Audit clean up (asynchronously)
     * Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configAuditLogAsync(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = configAuditLogValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGetSkipHash
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGetSkipHashCall(String apikey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/config/skip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGetSkipHashValidateBeforeCall(String apikey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGetSkipHashCall(apikey, _callback);
        return localVarCall;

    }

    /**
     * Get &#39;skip by hash&#39; list
     * Get the list of hashes whitelisted or blacklisted.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @return SkipList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public SkipList configGetSkipHash(String apikey) throws ApiException {
        ApiResponse<SkipList> localVarResp = configGetSkipHashWithHttpInfo(apikey);
        return localVarResp.getData();
    }

    /**
     * Get &#39;skip by hash&#39; list
     * Get the list of hashes whitelisted or blacklisted.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @return ApiResponse&lt;SkipList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkipList> configGetSkipHashWithHttpInfo(String apikey) throws ApiException {
        okhttp3.Call localVarCall = configGetSkipHashValidateBeforeCall(apikey, null);
        Type localVarReturnType = new TypeToken<SkipList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get &#39;skip by hash&#39; list (asynchronously)
     * Get the list of hashes whitelisted or blacklisted.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGetSkipHashAsync(String apikey, final ApiCallback<SkipList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGetSkipHashValidateBeforeCall(apikey, _callback);
        Type localVarReturnType = new TypeToken<SkipList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configQuarantine
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configQuarantineCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/admin/config/quarantine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configQuarantineValidateBeforeCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configQuarantineCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Quarantine clean up
     * Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 configQuarantine(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = configQuarantineWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Quarantine clean up
     * Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> configQuarantineWithHttpInfo(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = configQuarantineValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Quarantine clean up (asynchronously)
     * Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configQuarantineAsync(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = configQuarantineValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configSanitizedRepo
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configSanitizedRepoCall(String apikey, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/admin/config/sanitize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configSanitizedRepoValidateBeforeCall(String apikey, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configSanitizedRepoCall(apikey, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Sanitized files clean up
     * Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param inlineObject1  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 configSanitizedRepo(String apikey, InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = configSanitizedRepoWithHttpInfo(apikey, inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Sanitized files clean up
     * Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> configSanitizedRepoWithHttpInfo(String apikey, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = configSanitizedRepoValidateBeforeCall(apikey, inlineObject1, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sanitized files clean up (asynchronously)
     * Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configSanitizedRepoAsync(String apikey, InlineObject1 inlineObject1, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = configSanitizedRepoValidateBeforeCall(apikey, inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configScanHistory
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configScanHistoryCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/admin/config/scanhistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configScanHistoryValidateBeforeCall(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configScanHistoryCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Processing history clean up
     * Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 configScanHistory(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = configScanHistoryWithHttpInfo(apikey, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Processing history clean up
     * Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> configScanHistoryWithHttpInfo(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = configScanHistoryValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Processing history clean up (asynchronously)
     * Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configScanHistoryAsync(String apikey, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = configScanHistoryValidateBeforeCall(apikey, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configSession
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigSession  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configSessionCall(String apikey, AdminConfigSession adminConfigSession, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adminConfigSession;

        // create path and map variables
        String localVarPath = "/admin/config/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configSessionValidateBeforeCall(String apikey, AdminConfigSession adminConfigSession, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configSessionCall(apikey, adminConfigSession, _callback);
        return localVarCall;

    }

    /**
     * Session settings
     * Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigSession  (optional)
     * @return AdminConfigSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public AdminConfigSession configSession(String apikey, AdminConfigSession adminConfigSession) throws ApiException {
        ApiResponse<AdminConfigSession> localVarResp = configSessionWithHttpInfo(apikey, adminConfigSession);
        return localVarResp.getData();
    }

    /**
     * Session settings
     * Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigSession  (optional)
     * @return ApiResponse&lt;AdminConfigSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminConfigSession> configSessionWithHttpInfo(String apikey, AdminConfigSession adminConfigSession) throws ApiException {
        okhttp3.Call localVarCall = configSessionValidateBeforeCall(apikey, adminConfigSession, null);
        Type localVarReturnType = new TypeToken<AdminConfigSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Session settings (asynchronously)
     * Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigSession  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configSessionAsync(String apikey, AdminConfigSession adminConfigSession, final ApiCallback<AdminConfigSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = configSessionValidateBeforeCall(apikey, adminConfigSession, _callback);
        Type localVarReturnType = new TypeToken<AdminConfigSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configUpdate
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateCall(String apikey, AdminConfigUpdate adminConfigUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adminConfigUpdate;

        // create path and map variables
        String localVarPath = "/admin/config/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configUpdateValidateBeforeCall(String apikey, AdminConfigUpdate adminConfigUpdate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configUpdateCall(apikey, adminConfigUpdate, _callback);
        return localVarCall;

    }

    /**
     * Modules Update Source and Frequency
     * Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigUpdate  (optional)
     * @return AdminConfigUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public AdminConfigUpdate configUpdate(String apikey, AdminConfigUpdate adminConfigUpdate) throws ApiException {
        ApiResponse<AdminConfigUpdate> localVarResp = configUpdateWithHttpInfo(apikey, adminConfigUpdate);
        return localVarResp.getData();
    }

    /**
     * Modules Update Source and Frequency
     * Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigUpdate  (optional)
     * @return ApiResponse&lt;AdminConfigUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminConfigUpdate> configUpdateWithHttpInfo(String apikey, AdminConfigUpdate adminConfigUpdate) throws ApiException {
        okhttp3.Call localVarCall = configUpdateValidateBeforeCall(apikey, adminConfigUpdate, null);
        Type localVarReturnType = new TypeToken<AdminConfigUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modules Update Source and Frequency (asynchronously)
     * Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateAsync(String apikey, AdminConfigUpdate adminConfigUpdate, final ApiCallback<AdminConfigUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = configUpdateValidateBeforeCall(apikey, adminConfigUpdate, _callback);
        Type localVarReturnType = new TypeToken<AdminConfigUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configUpdateSkipHash
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param skipList A list of all skip/white/black-listed hashes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateSkipHashCall(String apikey, SkipList skipList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = skipList;

        // create path and map variables
        String localVarPath = "/admin/config/skip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configUpdateSkipHashValidateBeforeCall(String apikey, SkipList skipList, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configUpdateSkipHashCall(apikey, skipList, _callback);
        return localVarCall;

    }

    /**
     * Modify &#39;skip by hash&#39; list
     * Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param skipList A list of all skip/white/black-listed hashes. (optional)
     * @return SkipList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public SkipList configUpdateSkipHash(String apikey, SkipList skipList) throws ApiException {
        ApiResponse<SkipList> localVarResp = configUpdateSkipHashWithHttpInfo(apikey, skipList);
        return localVarResp.getData();
    }

    /**
     * Modify &#39;skip by hash&#39; list
     * Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param skipList A list of all skip/white/black-listed hashes. (optional)
     * @return ApiResponse&lt;SkipList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkipList> configUpdateSkipHashWithHttpInfo(String apikey, SkipList skipList) throws ApiException {
        okhttp3.Call localVarCall = configUpdateSkipHashValidateBeforeCall(apikey, skipList, null);
        Type localVarReturnType = new TypeToken<SkipList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify &#39;skip by hash&#39; list (asynchronously)
     * Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param skipList A list of all skip/white/black-listed hashes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all skip/white/black-listed hashes. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateSkipHashAsync(String apikey, SkipList skipList, final ApiCallback<SkipList> _callback) throws ApiException {

        okhttp3.Call localVarCall = configUpdateSkipHashValidateBeforeCall(apikey, skipList, _callback);
        Type localVarReturnType = new TypeToken<SkipList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configUpdateWebhook
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigWebhook  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateWebhookCall(String apikey, AdminConfigWebhook adminConfigWebhook, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adminConfigWebhook;

        // create path and map variables
        String localVarPath = "/admin/config/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configUpdateWebhookValidateBeforeCall(String apikey, AdminConfigWebhook adminConfigWebhook, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configUpdateWebhookCall(apikey, adminConfigWebhook, _callback);
        return localVarCall;

    }

    /**
     * Webhook set configuration
     * Modifying settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigWebhook  (optional)
     * @return AdminConfigWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public AdminConfigWebhook configUpdateWebhook(String apikey, AdminConfigWebhook adminConfigWebhook) throws ApiException {
        ApiResponse<AdminConfigWebhook> localVarResp = configUpdateWebhookWithHttpInfo(apikey, adminConfigWebhook);
        return localVarResp.getData();
    }

    /**
     * Webhook set configuration
     * Modifying settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigWebhook  (optional)
     * @return ApiResponse&lt;AdminConfigWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminConfigWebhook> configUpdateWebhookWithHttpInfo(String apikey, AdminConfigWebhook adminConfigWebhook) throws ApiException {
        okhttp3.Call localVarCall = configUpdateWebhookValidateBeforeCall(apikey, adminConfigWebhook, null);
        Type localVarReturnType = new TypeToken<AdminConfigWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Webhook set configuration (asynchronously)
     * Modifying settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param adminConfigWebhook  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requests resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configUpdateWebhookAsync(String apikey, AdminConfigWebhook adminConfigWebhook, final ApiCallback<AdminConfigWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = configUpdateWebhookValidateBeforeCall(apikey, adminConfigWebhook, _callback);
        Type localVarReturnType = new TypeToken<AdminConfigWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configWebhook
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configWebhookCall(String apikey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/config/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configWebhookValidateBeforeCall(String apikey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configWebhookCall(apikey, _callback);
        return localVarCall;

    }

    /**
     * Webhook get configuration
     * Getting settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @return AdminConfigWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public AdminConfigWebhook configWebhook(String apikey) throws ApiException {
        ApiResponse<AdminConfigWebhook> localVarResp = configWebhookWithHttpInfo(apikey);
        return localVarResp.getData();
    }

    /**
     * Webhook get configuration
     * Getting settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @return ApiResponse&lt;AdminConfigWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminConfigWebhook> configWebhookWithHttpInfo(String apikey) throws ApiException {
        okhttp3.Call localVarCall = configWebhookValidateBeforeCall(apikey, null);
        Type localVarReturnType = new TypeToken<AdminConfigWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Webhook get configuration (asynchronously)
     * Getting settings supported for webhook mode 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configWebhookAsync(String apikey, final ApiCallback<AdminConfigWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = configWebhookValidateBeforeCall(apikey, _callback);
        Type localVarReturnType = new TypeToken<AdminConfigWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
