/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Object containing detailed patch information
 */
@ApiModel(description = "Object containing detailed patch information")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class VulnerabilityResponseResultDetectedProductVersionData {
  public static final String SERIALIZED_NAME_COUNT_BEHIND = "count_behind";
  @SerializedName(SERIALIZED_NAME_COUNT_BEHIND)
  private Integer countBehind;

  public static final String SERIALIZED_NAME_FEED_ID = "feed_id";
  @SerializedName(SERIALIZED_NAME_FEED_ID)
  private Integer feedId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;


  public VulnerabilityResponseResultDetectedProductVersionData countBehind(Integer countBehind) {
    
    this.countBehind = countBehind;
    return this;
  }

   /**
   * The number of patches behind of the installed product
   * @return countBehind
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "65", value = "The number of patches behind of the installed product")

  public Integer getCountBehind() {
    return countBehind;
  }


  public void setCountBehind(Integer countBehind) {
    this.countBehind = countBehind;
  }


  public VulnerabilityResponseResultDetectedProductVersionData feedId(Integer feedId) {
    
    this.feedId = feedId;
    return this;
  }

   /**
   * The remote feed ID used to determine patch level
   * @return feedId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200005", value = "The remote feed ID used to determine patch level")

  public Integer getFeedId() {
    return feedId;
  }


  public void setFeedId(Integer feedId) {
    this.feedId = feedId;
  }


  public VulnerabilityResponseResultDetectedProductVersionData version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the product in the remote feed
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25.0.0.149", value = "The current version of the product in the remote feed")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityResponseResultDetectedProductVersionData vulnerabilityResponseResultDetectedProductVersionData = (VulnerabilityResponseResultDetectedProductVersionData) o;
    return Objects.equals(this.countBehind, vulnerabilityResponseResultDetectedProductVersionData.countBehind) &&
        Objects.equals(this.feedId, vulnerabilityResponseResultDetectedProductVersionData.feedId) &&
        Objects.equals(this.version, vulnerabilityResponseResultDetectedProductVersionData.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countBehind, feedId, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityResponseResultDetectedProductVersionData {\n");
    sb.append("    countBehind: ").append(toIndentedString(countBehind)).append("\n");
    sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

