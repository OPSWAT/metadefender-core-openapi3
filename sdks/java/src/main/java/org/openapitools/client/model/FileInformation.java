/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * basic information of the scanned file
 */
@ApiModel(description = "basic information of the scanned file")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class FileInformation {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_FILE_TYPE_DESCRIPTION = "file_type_description";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE_DESCRIPTION)
  private String fileTypeDescription;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public static final String SERIALIZED_NAME_SHA1 = "sha1";
  @SerializedName(SERIALIZED_NAME_SHA1)
  private String sha1;

  public static final String SERIALIZED_NAME_SHA256 = "sha256";
  @SerializedName(SERIALIZED_NAME_SHA256)
  private String sha256;

  public static final String SERIALIZED_NAME_UPLOAD_TIMESTAMP = "upload_timestamp";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TIMESTAMP)
  private String uploadTimestamp;


  public FileInformation displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The filename reported via &#x60;filename&#x60; header.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPSWAT_Proactive_DLP_CCN.pdf", value = "The filename reported via `filename` header.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FileInformation fileSize(Integer fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Total file size in bytes.
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "75906", value = "Total file size in bytes.")

  public Integer getFileSize() {
    return fileSize;
  }


  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public FileInformation fileType(String fileType) {
    
    this.fileType = fileType;
    return this;
  }

   /**
   * The filetype using mimetype.
   * @return fileType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "application/pdf", value = "The filetype using mimetype.")

  public String getFileType() {
    return fileType;
  }


  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public FileInformation fileTypeDescription(String fileTypeDescription) {
    
    this.fileTypeDescription = fileTypeDescription;
    return this;
  }

   /**
   * The filetype in human readable format.
   * @return fileTypeDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Adobe Portable Document Format", value = "The filetype in human readable format.")

  public String getFileTypeDescription() {
    return fileTypeDescription;
  }


  public void setFileTypeDescription(String fileTypeDescription) {
    this.fileTypeDescription = fileTypeDescription;
  }


  public FileInformation md5(String md5) {
    
    this.md5 = md5;
    return this;
  }

   /**
   * File&#39;s MD5 hash.
   * @return md5
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "c4863c8ce44fb7ae84eb48c9b78f8b5e", value = "File's MD5 hash.")

  public String getMd5() {
    return md5;
  }


  public void setMd5(String md5) {
    this.md5 = md5;
  }


  public FileInformation sha1(String sha1) {
    
    this.sha1 = sha1;
    return this;
  }

   /**
   * File&#39;s SHA1 hash.
   * @return sha1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a33c72a996a9603d479e3dff3d23bf619c975fbe", value = "File's SHA1 hash.")

  public String getSha1() {
    return sha1;
  }


  public void setSha1(String sha1) {
    this.sha1 = sha1;
  }


  public FileInformation sha256(String sha256) {
    
    this.sha256 = sha256;
    return this;
  }

   /**
   * File&#39;s SHA256 Hash.
   * @return sha256
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "b9fdc10b47950b9e503ef4dc0ef42d28e7c37ccd749d4a5dcd7d9b3218996b7f", value = "File's SHA256 Hash.")

  public String getSha256() {
    return sha256;
  }


  public void setSha256(String sha256) {
    this.sha256 = sha256;
  }


  public FileInformation uploadTimestamp(String uploadTimestamp) {
    
    this.uploadTimestamp = uploadTimestamp;
    return this;
  }

   /**
   * The timestamp when file was successfully uploaded to MetaDefender.
   * @return uploadTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-03-12T08:37:05.412Z", value = "The timestamp when file was successfully uploaded to MetaDefender.")

  public String getUploadTimestamp() {
    return uploadTimestamp;
  }


  public void setUploadTimestamp(String uploadTimestamp) {
    this.uploadTimestamp = uploadTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileInformation fileInformation = (FileInformation) o;
    return Objects.equals(this.displayName, fileInformation.displayName) &&
        Objects.equals(this.fileSize, fileInformation.fileSize) &&
        Objects.equals(this.fileType, fileInformation.fileType) &&
        Objects.equals(this.fileTypeDescription, fileInformation.fileTypeDescription) &&
        Objects.equals(this.md5, fileInformation.md5) &&
        Objects.equals(this.sha1, fileInformation.sha1) &&
        Objects.equals(this.sha256, fileInformation.sha256) &&
        Objects.equals(this.uploadTimestamp, fileInformation.uploadTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, fileSize, fileType, fileTypeDescription, md5, sha1, sha256, uploadTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileInformation {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    fileTypeDescription: ").append(toIndentedString(fileTypeDescription)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    sha1: ").append(toIndentedString(sha1)).append("\n");
    sb.append("    sha256: ").append(toIndentedString(sha256)).append("\n");
    sb.append("    uploadTimestamp: ").append(toIndentedString(uploadTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

