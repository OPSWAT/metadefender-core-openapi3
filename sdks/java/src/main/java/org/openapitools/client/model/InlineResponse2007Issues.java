/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InlineResponse2007IssuesGeneral;
import org.openapitools.client.model.InlineResponse2007IssuesSource;

/**
 * Stores a map of issues. Each key represents the according source, except \&quot;general\&quot;, which contains general errors occurred during the generation process
 */
@ApiModel(description = "Stores a map of issues. Each key represents the according source, except \"general\", which contains general errors occurred during the generation process")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-15T23:48:50.618888Z[UTC]")
public class InlineResponse2007Issues {
  public static final String SERIALIZED_NAME_GENERAL = "general";
  @SerializedName(SERIALIZED_NAME_GENERAL)
  private List<InlineResponse2007IssuesGeneral> general = null;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private List<InlineResponse2007IssuesSource> source = null;


  public InlineResponse2007Issues general(List<InlineResponse2007IssuesGeneral> general) {
    
    this.general = general;
    return this;
  }

  public InlineResponse2007Issues addGeneralItem(InlineResponse2007IssuesGeneral generalItem) {
    if (this.general == null) {
      this.general = new ArrayList<InlineResponse2007IssuesGeneral>();
    }
    this.general.add(generalItem);
    return this;
  }

   /**
   * Contains general errors occurred during the generation process
   * @return general
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contains general errors occurred during the generation process")

  public List<InlineResponse2007IssuesGeneral> getGeneral() {
    return general;
  }


  public void setGeneral(List<InlineResponse2007IssuesGeneral> general) {
    this.general = general;
  }


  public InlineResponse2007Issues source(List<InlineResponse2007IssuesSource> source) {
    
    this.source = source;
    return this;
  }

  public InlineResponse2007Issues addSourceItem(InlineResponse2007IssuesSource sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<InlineResponse2007IssuesSource>();
    }
    this.source.add(sourceItem);
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InlineResponse2007IssuesSource> getSource() {
    return source;
  }


  public void setSource(List<InlineResponse2007IssuesSource> source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2007Issues inlineResponse2007Issues = (InlineResponse2007Issues) o;
    return Objects.equals(this.general, inlineResponse2007Issues.general) &&
        Objects.equals(this.source, inlineResponse2007Issues.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(general, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2007Issues {\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

