/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse500;
import org.openapitools.client.model.NewUserRoleRequest;
import org.openapitools.client.model.NewUserRoleResponse;
import org.openapitools.client.model.UserRequest;
import org.openapitools.client.model.UserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient localVarApiClient;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adminImport
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The configuration has not changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminImportCall(String apikey, File body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/admin/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminImportValidateBeforeCall(String apikey, File body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = adminImportCall(apikey, body, _callback);
        return localVarCall;

    }

    /**
     * Import configuration
     * Import configuration from file.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param body  (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The configuration has not changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 adminImport(String apikey, File body) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = adminImportWithHttpInfo(apikey, body);
        return localVarResp.getData();
    }

    /**
     * Import configuration
     * Import configuration from file.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The configuration has not changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> adminImportWithHttpInfo(String apikey, File body) throws ApiException {
        okhttp3.Call localVarCall = adminImportValidateBeforeCall(apikey, body, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import configuration (asynchronously)
     * Import configuration from file.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The configuration has not changed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminImportAsync(String apikey, File body, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminImportValidateBeforeCall(apikey, body, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleCreate
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param newUserRoleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleCreateCall(String apikey, NewUserRoleRequest newUserRoleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newUserRoleRequest;

        // create path and map variables
        String localVarPath = "/admin/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleCreateValidateBeforeCall(String apikey, NewUserRoleRequest newUserRoleRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = roleCreateCall(apikey, newUserRoleRequest, _callback);
        return localVarCall;

    }

    /**
     * Create new role
     * Add a new user role to the system.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param newUserRoleRequest  (optional)
     * @return NewUserRoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public NewUserRoleResponse roleCreate(String apikey, NewUserRoleRequest newUserRoleRequest) throws ApiException {
        ApiResponse<NewUserRoleResponse> localVarResp = roleCreateWithHttpInfo(apikey, newUserRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create new role
     * Add a new user role to the system.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param newUserRoleRequest  (optional)
     * @return ApiResponse&lt;NewUserRoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewUserRoleResponse> roleCreateWithHttpInfo(String apikey, NewUserRoleRequest newUserRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = roleCreateValidateBeforeCall(apikey, newUserRoleRequest, null);
        Type localVarReturnType = new TypeToken<NewUserRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new role (asynchronously)
     * Add a new user role to the system.
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param newUserRoleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleCreateAsync(String apikey, NewUserRoleRequest newUserRoleRequest, final ApiCallback<NewUserRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleCreateValidateBeforeCall(apikey, newUserRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<NewUserRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreate
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param userRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateCall(String apikey, UserRequest userRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userRequest;

        // create path and map variables
        String localVarPath = "/admin/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreateValidateBeforeCall(String apikey, UserRequest userRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userCreateCall(apikey, userRequest, _callback);
        return localVarCall;

    }

    /**
     * Create user
     * 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param userRequest  (optional)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse userCreate(String apikey, UserRequest userRequest) throws ApiException {
        ApiResponse<UserResponse> localVarResp = userCreateWithHttpInfo(apikey, userRequest);
        return localVarResp.getData();
    }

    /**
     * Create user
     * 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param userRequest  (optional)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> userCreateWithHttpInfo(String apikey, UserRequest userRequest) throws ApiException {
        okhttp3.Call localVarCall = userCreateValidateBeforeCall(apikey, userRequest, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create user (asynchronously)
     * 
     * @param apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
     * @param userRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request (e.g. invalid header, apikey is missing or invalid). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user information or Not Allowed </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> The user has no rights for this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected event on server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateAsync(String apikey, UserRequest userRequest, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreateValidateBeforeCall(apikey, userRequest, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
