/*
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminConfigSession;
import org.openapitools.client.model.AdminConfigUpdate;
import org.openapitools.client.model.AdminConfigWebhook;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse500;
import org.openapitools.client.model.SkipList;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * Audit clean up
     *
     * Setting audit records (update history) clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configAuditLogTest() throws ApiException {
        String apikey = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        InlineResponse200 response = api.configAuditLog(apikey, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Get &#39;skip by hash&#39; list
     *
     * Get the list of hashes whitelisted or blacklisted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configGetSkipHashTest() throws ApiException {
        String apikey = null;
        SkipList response = api.configGetSkipHash(apikey);

        // TODO: test validations
    }
    
    /**
     * Quarantine clean up
     *
     * Setting quarantine clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configQuarantineTest() throws ApiException {
        String apikey = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        InlineResponse200 response = api.configQuarantine(apikey, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Sanitized files clean up
     *
     * Setting sanitized files clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configSanitizedRepoTest() throws ApiException {
        String apikey = null;
        InlineObject1 inlineObject1 = null;
        InlineResponse2001 response = api.configSanitizedRepo(apikey, inlineObject1);

        // TODO: test validations
    }
    
    /**
     * Processing history clean up
     *
     * Setting processing history clean up time (clean up records older than).  &gt; _**Note**_:The clean up range is defined in &#x60;hours&#x60;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configScanHistoryTest() throws ApiException {
        String apikey = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        InlineResponse200 response = api.configScanHistory(apikey, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Session settings
     *
     * Configure settings for session generated upon a successful login See more at [Login](#operation/userLogin) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configSessionTest() throws ApiException {
        String apikey = null;
        AdminConfigSession adminConfigSession = null;
        AdminConfigSession response = api.configSession(apikey, adminConfigSession);

        // TODO: test validations
    }
    
    /**
     * Modules Update Source and Frequency
     *
     * Setting update frequency for all modules and engines.  &gt; _**Note**_:The clean up range is defined in &#x60;minutes&#x60;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configUpdateTest() throws ApiException {
        String apikey = null;
        AdminConfigUpdate adminConfigUpdate = null;
        AdminConfigUpdate response = api.configUpdate(apikey, adminConfigUpdate);

        // TODO: test validations
    }
    
    /**
     * Modify &#39;skip by hash&#39; list
     *
     * Modify one (or more) of the sources for the Yara Engine. The request body containing whitelist&#39;s rules in array under \&quot;whitelist\&quot; key; Each object in the array represents a whitelist: comment: same comment for detailed more information this whitelist settings. engines: containing engine id&#39;s strings in array hash: md5, sha1 or sha256 hash 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configUpdateSkipHashTest() throws ApiException {
        String apikey = null;
        SkipList skipList = null;
        SkipList response = api.configUpdateSkipHash(apikey, skipList);

        // TODO: test validations
    }
    
    /**
     * Webhook set configuration
     *
     * Modifying settings supported for webhook mode 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configUpdateWebhookTest() throws ApiException {
        String apikey = null;
        AdminConfigWebhook adminConfigWebhook = null;
        AdminConfigWebhook response = api.configUpdateWebhook(apikey, adminConfigWebhook);

        // TODO: test validations
    }
    
    /**
     * Webhook get configuration
     *
     * Getting settings supported for webhook mode 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configWebhookTest() throws ApiException {
        String apikey = null;
        AdminConfigWebhook response = api.configWebhook(apikey);

        // TODO: test validations
    }
    
}
