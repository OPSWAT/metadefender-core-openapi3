<?php
/**
 * VulnerabilityResponseResultDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VulnerabilityResponseResultDetails Class Doc Comment
 *
 * @category Class
 * @description A set of optional vulnerability details
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VulnerabilityResponseResultDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VulnerabilityResponse_result_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpe' => 'string',
        'cve' => 'string',
        'cvss' => '\OpenAPI\Client\Model\VulnerabilityResponseResultDetailsCvss',
        'cwe' => 'string',
        'last_modified_epoch' => 'string',
        'published_epoch' => 'string',
        'references' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cpe' => null,
        'cve' => null,
        'cvss' => null,
        'cwe' => null,
        'last_modified_epoch' => null,
        'published_epoch' => null,
        'references' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpe' => 'cpe',
        'cve' => 'cve',
        'cvss' => 'cvss',
        'cwe' => 'cwe',
        'last_modified_epoch' => 'last_modified_epoch',
        'published_epoch' => 'published-epoch',
        'references' => 'references'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpe' => 'setCpe',
        'cve' => 'setCve',
        'cvss' => 'setCvss',
        'cwe' => 'setCwe',
        'last_modified_epoch' => 'setLastModifiedEpoch',
        'published_epoch' => 'setPublishedEpoch',
        'references' => 'setReferences'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpe' => 'getCpe',
        'cve' => 'getCve',
        'cvss' => 'getCvss',
        'cwe' => 'getCwe',
        'last_modified_epoch' => 'getLastModifiedEpoch',
        'published_epoch' => 'getPublishedEpoch',
        'references' => 'getReferences'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpe'] = isset($data['cpe']) ? $data['cpe'] : null;
        $this->container['cve'] = isset($data['cve']) ? $data['cve'] : null;
        $this->container['cvss'] = isset($data['cvss']) ? $data['cvss'] : null;
        $this->container['cwe'] = isset($data['cwe']) ? $data['cwe'] : null;
        $this->container['last_modified_epoch'] = isset($data['last_modified_epoch']) ? $data['last_modified_epoch'] : null;
        $this->container['published_epoch'] = isset($data['published_epoch']) ? $data['published_epoch'] : null;
        $this->container['references'] = isset($data['references']) ? $data['references'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpe
     *
     * @return string|null
     */
    public function getCpe()
    {
        return $this->container['cpe'];
    }

    /**
     * Sets cpe
     *
     * @param string|null $cpe A CPE product reference
     *
     * @return $this
     */
    public function setCpe($cpe)
    {
        $this->container['cpe'] = $cpe;

        return $this;
    }

    /**
     * Gets cve
     *
     * @return string|null
     */
    public function getCve()
    {
        return $this->container['cve'];
    }

    /**
     * Sets cve
     *
     * @param string|null $cve A CVE identification string
     *
     * @return $this
     */
    public function setCve($cve)
    {
        $this->container['cve'] = $cve;

        return $this;
    }

    /**
     * Gets cvss
     *
     * @return \OpenAPI\Client\Model\VulnerabilityResponseResultDetailsCvss|null
     */
    public function getCvss()
    {
        return $this->container['cvss'];
    }

    /**
     * Sets cvss
     *
     * @param \OpenAPI\Client\Model\VulnerabilityResponseResultDetailsCvss|null $cvss cvss
     *
     * @return $this
     */
    public function setCvss($cvss)
    {
        $this->container['cvss'] = $cvss;

        return $this;
    }

    /**
     * Gets cwe
     *
     * @return string|null
     */
    public function getCwe()
    {
        return $this->container['cwe'];
    }

    /**
     * Sets cwe
     *
     * @param string|null $cwe A CWE group identification string
     *
     * @return $this
     */
    public function setCwe($cwe)
    {
        $this->container['cwe'] = $cwe;

        return $this;
    }

    /**
     * Gets last_modified_epoch
     *
     * @return string|null
     */
    public function getLastModifiedEpoch()
    {
        return $this->container['last_modified_epoch'];
    }

    /**
     * Sets last_modified_epoch
     *
     * @param string|null $last_modified_epoch An epoch timestamp indicating source last update time
     *
     * @return $this
     */
    public function setLastModifiedEpoch($last_modified_epoch)
    {
        $this->container['last_modified_epoch'] = $last_modified_epoch;

        return $this;
    }

    /**
     * Gets published_epoch
     *
     * @return string|null
     */
    public function getPublishedEpoch()
    {
        return $this->container['published_epoch'];
    }

    /**
     * Sets published_epoch
     *
     * @param string|null $published_epoch An epoch timestamp indicating source publishing time
     *
     * @return $this
     */
    public function setPublishedEpoch($published_epoch)
    {
        $this->container['published_epoch'] = $published_epoch;

        return $this;
    }

    /**
     * Gets references
     *
     * @return string[]|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param string[]|null $references An array of external reference links
     *
     * @return $this
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


