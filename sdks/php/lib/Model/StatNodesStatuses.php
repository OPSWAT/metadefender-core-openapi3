<?php
/**
 * StatNodesStatuses
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatNodesStatuses Class Doc Comment
 *
 * @category Class
 * @description Node status
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StatNodesStatuses implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_stat_nodes_statuses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'cpu_cores' => 'int',
        'engines' => '\OpenAPI\Client\Model\StatNodesEngines[]',
        'free_disk_space' => 'int',
        'id' => 'string',
        'issues' => '\OpenAPI\Client\Model\StatNodesIssues[]',
        'load' => 'int',
        'os' => 'string',
        'scan_queue' => 'int',
        'total_memory' => 'int',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'address' => null,
        'cpu_cores' => null,
        'engines' => null,
        'free_disk_space' => null,
        'id' => null,
        'issues' => null,
        'load' => null,
        'os' => null,
        'scan_queue' => null,
        'total_memory' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'cpu_cores' => 'cpu_cores',
        'engines' => 'engines',
        'free_disk_space' => 'free_disk_space',
        'id' => 'id',
        'issues' => 'issues',
        'load' => 'load',
        'os' => 'os',
        'scan_queue' => 'scan_queue',
        'total_memory' => 'total_memory',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'cpu_cores' => 'setCpuCores',
        'engines' => 'setEngines',
        'free_disk_space' => 'setFreeDiskSpace',
        'id' => 'setId',
        'issues' => 'setIssues',
        'load' => 'setLoad',
        'os' => 'setOs',
        'scan_queue' => 'setScanQueue',
        'total_memory' => 'setTotalMemory',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'cpu_cores' => 'getCpuCores',
        'engines' => 'getEngines',
        'free_disk_space' => 'getFreeDiskSpace',
        'id' => 'getId',
        'issues' => 'getIssues',
        'load' => 'getLoad',
        'os' => 'getOs',
        'scan_queue' => 'getScanQueue',
        'total_memory' => 'getTotalMemory',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['cpu_cores'] = isset($data['cpu_cores']) ? $data['cpu_cores'] : null;
        $this->container['engines'] = isset($data['engines']) ? $data['engines'] : null;
        $this->container['free_disk_space'] = isset($data['free_disk_space']) ? $data['free_disk_space'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['issues'] = isset($data['issues']) ? $data['issues'] : null;
        $this->container['load'] = isset($data['load']) ? $data['load'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['scan_queue'] = isset($data['scan_queue']) ? $data['scan_queue'] : null;
        $this->container['total_memory'] = isset($data['total_memory']) ? $data['total_memory'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The location of the Node. If local, is empty string.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets cpu_cores
     *
     * @return int|null
     */
    public function getCpuCores()
    {
        return $this->container['cpu_cores'];
    }

    /**
     * Sets cpu_cores
     *
     * @param int|null $cpu_cores The number of CPU Cores allocated to this Node.
     *
     * @return $this
     */
    public function setCpuCores($cpu_cores)
    {
        $this->container['cpu_cores'] = $cpu_cores;

        return $this;
    }

    /**
     * Gets engines
     *
     * @return \OpenAPI\Client\Model\StatNodesEngines[]|null
     */
    public function getEngines()
    {
        return $this->container['engines'];
    }

    /**
     * Sets engines
     *
     * @param \OpenAPI\Client\Model\StatNodesEngines[]|null $engines Summary of each engine status deployed on this Node.
     *
     * @return $this
     */
    public function setEngines($engines)
    {
        $this->container['engines'] = $engines;

        return $this;
    }

    /**
     * Gets free_disk_space
     *
     * @return int|null
     */
    public function getFreeDiskSpace()
    {
        return $this->container['free_disk_space'];
    }

    /**
     * Sets free_disk_space
     *
     * @param int|null $free_disk_space Reported available disk on that Node (in bytes).
     *
     * @return $this
     */
    public function setFreeDiskSpace($free_disk_space)
    {
        $this->container['free_disk_space'] = $free_disk_space;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Node identfier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return \OpenAPI\Client\Model\StatNodesIssues[]|null
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param \OpenAPI\Client\Model\StatNodesIssues[]|null $issues A list of all potentials problems on that Node.
     *
     * @return $this
     */
    public function setIssues($issues)
    {
        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets load
     *
     * @return int|null
     */
    public function getLoad()
    {
        return $this->container['load'];
    }

    /**
     * Sets load
     *
     * @param int|null $load Current CPU utilization on this Node (in percentage).
     *
     * @return $this
     */
    public function setLoad($load)
    {
        $this->container['load'] = $load;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os Current used OS
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets scan_queue
     *
     * @return int|null
     */
    public function getScanQueue()
    {
        return $this->container['scan_queue'];
    }

    /**
     * Sets scan_queue
     *
     * @param int|null $scan_queue Current load on the Node, how many files are in the queue
     *
     * @return $this
     */
    public function setScanQueue($scan_queue)
    {
        $this->container['scan_queue'] = $scan_queue;

        return $this;
    }

    /**
     * Gets total_memory
     *
     * @return int|null
     */
    public function getTotalMemory()
    {
        return $this->container['total_memory'];
    }

    /**
     * Sets total_memory
     *
     * @param int|null $total_memory How much memory is allocated on this Node (in MB).
     *
     * @return $this
     */
    public function setTotalMemory($total_memory)
    {
        $this->container['total_memory'] = $total_memory;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Product version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


