<?php
/**
 * AnalysisResultProcessInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalysisResultProcessInfo Class Doc Comment
 *
 * @category Class
 * @description Processing information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalysisResultProcessInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalysisResult_process_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blocked_reason' => 'string',
        'file_type_skipped_scan' => 'bool',
        'outdated_data' => 'string[]',
        'processing_time' => 'int',
        'profile' => 'string',
        'progress_percentage' => 'int',
        'queue_time' => 'int',
        'result' => 'string',
        'user_agent' => 'string',
        'username' => 'string',
        'verdicts' => 'string[]',
        'post_processing' => '\OpenAPI\Client\Model\AnalysisResultProcessInfoPostProcessing'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'blocked_reason' => null,
        'file_type_skipped_scan' => null,
        'outdated_data' => null,
        'processing_time' => null,
        'profile' => null,
        'progress_percentage' => null,
        'queue_time' => null,
        'result' => null,
        'user_agent' => null,
        'username' => null,
        'verdicts' => null,
        'post_processing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blocked_reason' => 'blocked_reason',
        'file_type_skipped_scan' => 'file_type_skipped_scan',
        'outdated_data' => 'outdated_data',
        'processing_time' => 'processing_time',
        'profile' => 'profile',
        'progress_percentage' => 'progress_percentage',
        'queue_time' => 'queue_time',
        'result' => 'result',
        'user_agent' => 'user_agent',
        'username' => 'username',
        'verdicts' => 'verdicts',
        'post_processing' => 'post_processing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blocked_reason' => 'setBlockedReason',
        'file_type_skipped_scan' => 'setFileTypeSkippedScan',
        'outdated_data' => 'setOutdatedData',
        'processing_time' => 'setProcessingTime',
        'profile' => 'setProfile',
        'progress_percentage' => 'setProgressPercentage',
        'queue_time' => 'setQueueTime',
        'result' => 'setResult',
        'user_agent' => 'setUserAgent',
        'username' => 'setUsername',
        'verdicts' => 'setVerdicts',
        'post_processing' => 'setPostProcessing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blocked_reason' => 'getBlockedReason',
        'file_type_skipped_scan' => 'getFileTypeSkippedScan',
        'outdated_data' => 'getOutdatedData',
        'processing_time' => 'getProcessingTime',
        'profile' => 'getProfile',
        'progress_percentage' => 'getProgressPercentage',
        'queue_time' => 'getQueueTime',
        'result' => 'getResult',
        'user_agent' => 'getUserAgent',
        'username' => 'getUsername',
        'verdicts' => 'getVerdicts',
        'post_processing' => 'getPostProcessing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OUTDATED_DATA_ENGINEDEFINITION = 'enginedefinition';
    const OUTDATED_DATA_CONFIGURATION = 'configuration';
    const OUTDATED_DATA_SANITIZATION = 'sanitization';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutdatedDataAllowableValues()
    {
        return [
            self::OUTDATED_DATA_ENGINEDEFINITION,
            self::OUTDATED_DATA_CONFIGURATION,
            self::OUTDATED_DATA_SANITIZATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blocked_reason'] = isset($data['blocked_reason']) ? $data['blocked_reason'] : null;
        $this->container['file_type_skipped_scan'] = isset($data['file_type_skipped_scan']) ? $data['file_type_skipped_scan'] : null;
        $this->container['outdated_data'] = isset($data['outdated_data']) ? $data['outdated_data'] : null;
        $this->container['processing_time'] = isset($data['processing_time']) ? $data['processing_time'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['progress_percentage'] = isset($data['progress_percentage']) ? $data['progress_percentage'] : null;
        $this->container['queue_time'] = isset($data['queue_time']) ? $data['queue_time'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['verdicts'] = isset($data['verdicts']) ? $data['verdicts'] : null;
        $this->container['post_processing'] = isset($data['post_processing']) ? $data['post_processing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blocked_reason
     *
     * @return string|null
     */
    public function getBlockedReason()
    {
        return $this->container['blocked_reason'];
    }

    /**
     * Sets blocked_reason
     *
     * @param string|null $blocked_reason Provides the reason why the file is blocked (if so).
     *
     * @return $this
     */
    public function setBlockedReason($blocked_reason)
    {
        $this->container['blocked_reason'] = $blocked_reason;

        return $this;
    }

    /**
     * Gets file_type_skipped_scan
     *
     * @return bool|null
     */
    public function getFileTypeSkippedScan()
    {
        return $this->container['file_type_skipped_scan'];
    }

    /**
     * Sets file_type_skipped_scan
     *
     * @param bool|null $file_type_skipped_scan Indicates if the input file's detected type was configured to skip scanning.
     *
     * @return $this
     */
    public function setFileTypeSkippedScan($file_type_skipped_scan)
    {
        $this->container['file_type_skipped_scan'] = $file_type_skipped_scan;

        return $this;
    }

    /**
     * Gets outdated_data
     *
     * @return string[]|null
     */
    public function getOutdatedData()
    {
        return $this->container['outdated_data'];
    }

    /**
     * Sets outdated_data
     *
     * @param string[]|null $outdated_data array of flags - if occur - describing outdated data in the result, these can be   * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database   * configuration: the process' rule - or any item used by the rule - was modified since the item was processed   * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available
     *
     * @return $this
     */
    public function setOutdatedData($outdated_data)
    {
        $allowedValues = $this->getOutdatedDataAllowableValues();
        if (!is_null($outdated_data) && array_diff($outdated_data, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outdated_data', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outdated_data'] = $outdated_data;

        return $this;
    }

    /**
     * Gets processing_time
     *
     * @return int|null
     */
    public function getProcessingTime()
    {
        return $this->container['processing_time'];
    }

    /**
     * Sets processing_time
     *
     * @param int|null $processing_time Total time elapsed during processing file on the node (in milliseconds).
     *
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        $this->container['processing_time'] = $processing_time;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile The used rule name.
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets progress_percentage
     *
     * @return int|null
     */
    public function getProgressPercentage()
    {
        return $this->container['progress_percentage'];
    }

    /**
     * Sets progress_percentage
     *
     * @param int|null $progress_percentage Percentage of processing completed (from 1-100).
     *
     * @return $this
     */
    public function setProgressPercentage($progress_percentage)
    {
        $this->container['progress_percentage'] = $progress_percentage;

        return $this;
    }

    /**
     * Gets queue_time
     *
     * @return int|null
     */
    public function getQueueTime()
    {
        return $this->container['queue_time'];
    }

    /**
     * Sets queue_time
     *
     * @param int|null $queue_time Total time elapsed while the file waits in the queue (in milliseconds).
     *
     * @return $this
     */
    public function setQueueTime($queue_time)
    {
        $this->container['queue_time'] = $queue_time;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result The final result of processing the file (Allowed / Blocked / Processing).
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent Identifier for the REST Client that calls the API.
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username User identifier who submitted scan request earlier.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets verdicts
     *
     * @return string[]|null
     */
    public function getVerdicts()
    {
        return $this->container['verdicts'];
    }

    /**
     * Sets verdicts
     *
     * @param string[]|null $verdicts Aggregated list of potential issues.
     *
     * @return $this
     */
    public function setVerdicts($verdicts)
    {
        $this->container['verdicts'] = $verdicts;

        return $this;
    }

    /**
     * Gets post_processing
     *
     * @return \OpenAPI\Client\Model\AnalysisResultProcessInfoPostProcessing|null
     */
    public function getPostProcessing()
    {
        return $this->container['post_processing'];
    }

    /**
     * Sets post_processing
     *
     * @param \OpenAPI\Client\Model\AnalysisResultProcessInfoPostProcessing|null $post_processing post_processing
     *
     * @return $this
     */
    public function setPostProcessing($post_processing)
    {
        $this->container['post_processing'] = $post_processing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


