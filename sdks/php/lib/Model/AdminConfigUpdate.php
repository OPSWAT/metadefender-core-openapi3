<?php
/**
 * AdminConfigUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdminConfigUpdate Class Doc Comment
 *
 * @category Class
 * @description API object for /admin/config/update
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminConfigUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdminConfigUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'autoupdateperiod' => 'int',
        'deleteafterimport' => 'bool',
        'disabledupdate' => '\OpenAPI\Client\Model\AdminConfigUpdateDisabledupdate[]',
        'pickupfolder' => 'string',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'autoupdateperiod' => null,
        'deleteafterimport' => null,
        'disabledupdate' => null,
        'pickupfolder' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autoupdateperiod' => 'autoupdateperiod',
        'deleteafterimport' => 'deleteafterimport',
        'disabledupdate' => 'disabledupdate',
        'pickupfolder' => 'pickupfolder',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autoupdateperiod' => 'setAutoupdateperiod',
        'deleteafterimport' => 'setDeleteafterimport',
        'disabledupdate' => 'setDisabledupdate',
        'pickupfolder' => 'setPickupfolder',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autoupdateperiod' => 'getAutoupdateperiod',
        'deleteafterimport' => 'getDeleteafterimport',
        'disabledupdate' => 'getDisabledupdate',
        'pickupfolder' => 'getPickupfolder',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_INTERNET = 'internet';
    const SOURCE_FOLDER = 'folder';
    const SOURCE_MANUAL = 'manual';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_INTERNET,
            self::SOURCE_FOLDER,
            self::SOURCE_MANUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['autoupdateperiod'] = isset($data['autoupdateperiod']) ? $data['autoupdateperiod'] : null;
        $this->container['deleteafterimport'] = isset($data['deleteafterimport']) ? $data['deleteafterimport'] : null;
        $this->container['disabledupdate'] = isset($data['disabledupdate']) ? $data['disabledupdate'] : null;
        $this->container['pickupfolder'] = isset($data['pickupfolder']) ? $data['pickupfolder'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autoupdateperiod
     *
     * @return int|null
     */
    public function getAutoupdateperiod()
    {
        return $this->container['autoupdateperiod'];
    }

    /**
     * Sets autoupdateperiod
     *
     * @param int|null $autoupdateperiod The interval (in minutes) for checking for new updates.
     *
     * @return $this
     */
    public function setAutoupdateperiod($autoupdateperiod)
    {
        $this->container['autoupdateperiod'] = $autoupdateperiod;

        return $this;
    }

    /**
     * Gets deleteafterimport
     *
     * @return bool|null
     */
    public function getDeleteafterimport()
    {
        return $this->container['deleteafterimport'];
    }

    /**
     * Sets deleteafterimport
     *
     * @param bool|null $deleteafterimport If you want to clean the pickup folder after the updates have been applied.
     *
     * @return $this
     */
    public function setDeleteafterimport($deleteafterimport)
    {
        $this->container['deleteafterimport'] = $deleteafterimport;

        return $this;
    }

    /**
     * Gets disabledupdate
     *
     * @return \OpenAPI\Client\Model\AdminConfigUpdateDisabledupdate[]|null
     */
    public function getDisabledupdate()
    {
        return $this->container['disabledupdate'];
    }

    /**
     * Sets disabledupdate
     *
     * @param \OpenAPI\Client\Model\AdminConfigUpdateDisabledupdate[]|null $disabledupdate Lockdown a time interval when the engines are not allowed to update.
     *
     * @return $this
     */
    public function setDisabledupdate($disabledupdate)
    {
        $this->container['disabledupdate'] = $disabledupdate;

        return $this;
    }

    /**
     * Gets pickupfolder
     *
     * @return string|null
     */
    public function getPickupfolder()
    {
        return $this->container['pickupfolder'];
    }

    /**
     * Sets pickupfolder
     *
     * @param string|null $pickupfolder The folder where MetaDefender will look for the new engine files.
     *
     * @return $this
     */
    public function setPickupfolder($pickupfolder)
    {
        $this->container['pickupfolder'] = $pickupfolder;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Define where the updates will be loaded from. <p> This can be either:   * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes   * `folder` -> make sure that MetaDefender has access/permission to that folder   * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


