<?php
/**
 * AnalysisResultProcessInfoPostProcessing
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalysisResultProcessInfoPostProcessing Class Doc Comment
 *
 * @category Class
 * @description Contains information about result of sanitization process and any action done after finalizing the process using Post Actions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalysisResultProcessInfoPostProcessing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalysisResult_process_info_post_processing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actions_failed' => 'string',
        'actions_ran' => 'string',
        'converted_destination' => 'string',
        'converted_to' => 'string',
        'copy_move_destination' => 'string',
        'sanitization_details' => 'DeepCDRDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'actions_failed' => null,
        'actions_ran' => null,
        'converted_destination' => null,
        'converted_to' => null,
        'copy_move_destination' => null,
        'sanitization_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actions_failed' => 'actions_failed',
        'actions_ran' => 'actions_ran',
        'converted_destination' => 'converted_destination',
        'converted_to' => 'converted_to',
        'copy_move_destination' => 'copy_move_destination',
        'sanitization_details' => 'sanitization_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actions_failed' => 'setActionsFailed',
        'actions_ran' => 'setActionsRan',
        'converted_destination' => 'setConvertedDestination',
        'converted_to' => 'setConvertedTo',
        'copy_move_destination' => 'setCopyMoveDestination',
        'sanitization_details' => 'setSanitizationDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actions_failed' => 'getActionsFailed',
        'actions_ran' => 'getActionsRan',
        'converted_destination' => 'getConvertedDestination',
        'converted_to' => 'getConvertedTo',
        'copy_move_destination' => 'getCopyMoveDestination',
        'sanitization_details' => 'getSanitizationDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions_failed'] = isset($data['actions_failed']) ? $data['actions_failed'] : null;
        $this->container['actions_ran'] = isset($data['actions_ran']) ? $data['actions_ran'] : null;
        $this->container['converted_destination'] = isset($data['converted_destination']) ? $data['converted_destination'] : null;
        $this->container['converted_to'] = isset($data['converted_to']) ? $data['converted_to'] : null;
        $this->container['copy_move_destination'] = isset($data['copy_move_destination']) ? $data['copy_move_destination'] : null;
        $this->container['sanitization_details'] = isset($data['sanitization_details']) ? $data['sanitization_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actions_failed
     *
     * @return string|null
     */
    public function getActionsFailed()
    {
        return $this->container['actions_failed'];
    }

    /**
     * Sets actions_failed
     *
     * @param string|null $actions_failed Empty string if no action failed or list of failed actions, separated by \"|\".
     *
     * @return $this
     */
    public function setActionsFailed($actions_failed)
    {
        $this->container['actions_failed'] = $actions_failed;

        return $this;
    }

    /**
     * Gets actions_ran
     *
     * @return string|null
     */
    public function getActionsRan()
    {
        return $this->container['actions_ran'];
    }

    /**
     * Sets actions_ran
     *
     * @param string|null $actions_ran List of successful actions, separated by \"|\". Empty string if otherwise.
     *
     * @return $this
     */
    public function setActionsRan($actions_ran)
    {
        $this->container['actions_ran'] = $actions_ran;

        return $this;
    }

    /**
     * Gets converted_destination
     *
     * @return string|null
     */
    public function getConvertedDestination()
    {
        return $this->container['converted_destination'];
    }

    /**
     * Sets converted_destination
     *
     * @param string|null $converted_destination Contains the name of the sanitized file.
     *
     * @return $this
     */
    public function setConvertedDestination($converted_destination)
    {
        $this->container['converted_destination'] = $converted_destination;

        return $this;
    }

    /**
     * Gets converted_to
     *
     * @return string|null
     */
    public function getConvertedTo()
    {
        return $this->container['converted_to'];
    }

    /**
     * Sets converted_to
     *
     * @param string|null $converted_to Contains target type name of sanitization.
     *
     * @return $this
     */
    public function setConvertedTo($converted_to)
    {
        $this->container['converted_to'] = $converted_to;

        return $this;
    }

    /**
     * Gets copy_move_destination
     *
     * @return string|null
     */
    public function getCopyMoveDestination()
    {
        return $this->container['copy_move_destination'];
    }

    /**
     * Sets copy_move_destination
     *
     * @param string|null $copy_move_destination Contains target type name of sanitization.
     *
     * @return $this
     */
    public function setCopyMoveDestination($copy_move_destination)
    {
        $this->container['copy_move_destination'] = $copy_move_destination;

        return $this;
    }

    /**
     * Gets sanitization_details
     *
     * @return DeepCDRDetails|null
     */
    public function getSanitizationDetails()
    {
        return $this->container['sanitization_details'];
    }

    /**
     * Sets sanitization_details
     *
     * @param DeepCDRDetails|null $sanitization_details Contains target type name of sanitization.
     *
     * @return $this
     */
    public function setSanitizationDetails($sanitization_details)
    {
        $this->container['sanitization_details'] = $sanitization_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


