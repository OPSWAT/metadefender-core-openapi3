<?php
/**
 * AnalysisResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalysisResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalysisResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalysisResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_id' => 'string',
        'dlp_info' => '\OpenAPI\Client\Model\DLPResponse',
        'file_info' => '\OpenAPI\Client\Model\FileInformation',
        'process_info' => '\OpenAPI\Client\Model\AnalysisResultProcessInfo',
        'scan_results' => '\OpenAPI\Client\Model\MetascanReport',
        'vulnerability_info' => '\OpenAPI\Client\Model\VulnerabilityResponse',
        'yara' => '\OpenAPI\Client\Model\YaraReport'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'data_id' => null,
        'dlp_info' => null,
        'file_info' => null,
        'process_info' => null,
        'scan_results' => null,
        'vulnerability_info' => null,
        'yara' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_id' => 'data_id',
        'dlp_info' => 'dlp_info',
        'file_info' => 'file_info',
        'process_info' => 'process_info',
        'scan_results' => 'scan_results',
        'vulnerability_info' => 'vulnerability_info',
        'yara' => 'yara'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_id' => 'setDataId',
        'dlp_info' => 'setDlpInfo',
        'file_info' => 'setFileInfo',
        'process_info' => 'setProcessInfo',
        'scan_results' => 'setScanResults',
        'vulnerability_info' => 'setVulnerabilityInfo',
        'yara' => 'setYara'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_id' => 'getDataId',
        'dlp_info' => 'getDlpInfo',
        'file_info' => 'getFileInfo',
        'process_info' => 'getProcessInfo',
        'scan_results' => 'getScanResults',
        'vulnerability_info' => 'getVulnerabilityInfo',
        'yara' => 'getYara'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_id'] = isset($data['data_id']) ? $data['data_id'] : null;
        $this->container['dlp_info'] = isset($data['dlp_info']) ? $data['dlp_info'] : null;
        $this->container['file_info'] = isset($data['file_info']) ? $data['file_info'] : null;
        $this->container['process_info'] = isset($data['process_info']) ? $data['process_info'] : null;
        $this->container['scan_results'] = isset($data['scan_results']) ? $data['scan_results'] : null;
        $this->container['vulnerability_info'] = isset($data['vulnerability_info']) ? $data['vulnerability_info'] : null;
        $this->container['yara'] = isset($data['yara']) ? $data['yara'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_id
     *
     * @return string|null
     */
    public function getDataId()
    {
        return $this->container['data_id'];
    }

    /**
     * Sets data_id
     *
     * @param string|null $data_id data identifier of the requested file
     *
     * @return $this
     */
    public function setDataId($data_id)
    {
        $this->container['data_id'] = $data_id;

        return $this;
    }

    /**
     * Gets dlp_info
     *
     * @return \OpenAPI\Client\Model\DLPResponse|null
     */
    public function getDlpInfo()
    {
        return $this->container['dlp_info'];
    }

    /**
     * Sets dlp_info
     *
     * @param \OpenAPI\Client\Model\DLPResponse|null $dlp_info dlp_info
     *
     * @return $this
     */
    public function setDlpInfo($dlp_info)
    {
        $this->container['dlp_info'] = $dlp_info;

        return $this;
    }

    /**
     * Gets file_info
     *
     * @return \OpenAPI\Client\Model\FileInformation|null
     */
    public function getFileInfo()
    {
        return $this->container['file_info'];
    }

    /**
     * Sets file_info
     *
     * @param \OpenAPI\Client\Model\FileInformation|null $file_info file_info
     *
     * @return $this
     */
    public function setFileInfo($file_info)
    {
        $this->container['file_info'] = $file_info;

        return $this;
    }

    /**
     * Gets process_info
     *
     * @return \OpenAPI\Client\Model\AnalysisResultProcessInfo|null
     */
    public function getProcessInfo()
    {
        return $this->container['process_info'];
    }

    /**
     * Sets process_info
     *
     * @param \OpenAPI\Client\Model\AnalysisResultProcessInfo|null $process_info process_info
     *
     * @return $this
     */
    public function setProcessInfo($process_info)
    {
        $this->container['process_info'] = $process_info;

        return $this;
    }

    /**
     * Gets scan_results
     *
     * @return \OpenAPI\Client\Model\MetascanReport|null
     */
    public function getScanResults()
    {
        return $this->container['scan_results'];
    }

    /**
     * Sets scan_results
     *
     * @param \OpenAPI\Client\Model\MetascanReport|null $scan_results scan_results
     *
     * @return $this
     */
    public function setScanResults($scan_results)
    {
        $this->container['scan_results'] = $scan_results;

        return $this;
    }

    /**
     * Gets vulnerability_info
     *
     * @return \OpenAPI\Client\Model\VulnerabilityResponse|null
     */
    public function getVulnerabilityInfo()
    {
        return $this->container['vulnerability_info'];
    }

    /**
     * Sets vulnerability_info
     *
     * @param \OpenAPI\Client\Model\VulnerabilityResponse|null $vulnerability_info vulnerability_info
     *
     * @return $this
     */
    public function setVulnerabilityInfo($vulnerability_info)
    {
        $this->container['vulnerability_info'] = $vulnerability_info;

        return $this;
    }

    /**
     * Gets yara
     *
     * @return \OpenAPI\Client\Model\YaraReport|null
     */
    public function getYara()
    {
        return $this->container['yara'];
    }

    /**
     * Sets yara
     *
     * @param \OpenAPI\Client\Model\YaraReport|null $yara yara
     *
     * @return $this
     */
    public function setYara($yara)
    {
        $this->container['yara'] = $yara;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


