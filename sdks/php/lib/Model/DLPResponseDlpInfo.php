<?php
/**
 * DLPResponseDlpInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DLPResponseDlpInfo Class Doc Comment
 *
 * @category Class
 * @description Information on matched sensitive data
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DLPResponseDlpInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DLPResponse_dlp_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'certainty' => 'string',
        'errors' => 'object',
        'filename' => 'string',
        'hits' => '\OpenAPI\Client\Model\DLPResponseDlpInfoHits',
        'metadata_removal' => '\OpenAPI\Client\Model\DLPResponseDlpInfoMetadataRemoval',
        'redact' => '\OpenAPI\Client\Model\DLPResponseDlpInfoRedact',
        'severity' => 'int',
        'verdict' => 'int',
        'watermark' => '\OpenAPI\Client\Model\DLPResponseDlpInfoWatermark'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'certainty' => null,
        'errors' => null,
        'filename' => null,
        'hits' => null,
        'metadata_removal' => null,
        'redact' => null,
        'severity' => null,
        'verdict' => null,
        'watermark' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certainty' => 'certainty',
        'errors' => 'errors',
        'filename' => 'filename',
        'hits' => 'hits',
        'metadata_removal' => 'metadata_removal',
        'redact' => 'redact',
        'severity' => 'severity',
        'verdict' => 'verdict',
        'watermark' => 'watermark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certainty' => 'setCertainty',
        'errors' => 'setErrors',
        'filename' => 'setFilename',
        'hits' => 'setHits',
        'metadata_removal' => 'setMetadataRemoval',
        'redact' => 'setRedact',
        'severity' => 'setSeverity',
        'verdict' => 'setVerdict',
        'watermark' => 'setWatermark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certainty' => 'getCertainty',
        'errors' => 'getErrors',
        'filename' => 'getFilename',
        'hits' => 'getHits',
        'metadata_removal' => 'getMetadataRemoval',
        'redact' => 'getRedact',
        'severity' => 'getSeverity',
        'verdict' => 'getVerdict',
        'watermark' => 'getWatermark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CERTAINTY_VERY_LOW = 'Very Low';
    const CERTAINTY_LOW = 'Low';
    const CERTAINTY_MEDIUM = 'Medium';
    const CERTAINTY_HIGH = 'High';
    const CERTAINTY_VERY_HIGH = 'Very High';
    const SEVERITY_0 = 0;
    const SEVERITY_1 = 1;
    const VERDICT_0 = 0;
    const VERDICT_1 = 1;
    const VERDICT_2 = 2;
    const VERDICT_3 = 3;
    const VERDICT_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCertaintyAllowableValues()
    {
        return [
            self::CERTAINTY_VERY_LOW,
            self::CERTAINTY_LOW,
            self::CERTAINTY_MEDIUM,
            self::CERTAINTY_HIGH,
            self::CERTAINTY_VERY_HIGH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_0,
            self::SEVERITY_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerdictAllowableValues()
    {
        return [
            self::VERDICT_0,
            self::VERDICT_1,
            self::VERDICT_2,
            self::VERDICT_3,
            self::VERDICT_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certainty'] = isset($data['certainty']) ? $data['certainty'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['hits'] = isset($data['hits']) ? $data['hits'] : null;
        $this->container['metadata_removal'] = isset($data['metadata_removal']) ? $data['metadata_removal'] : null;
        $this->container['redact'] = isset($data['redact']) ? $data['redact'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['verdict'] = isset($data['verdict']) ? $data['verdict'] : null;
        $this->container['watermark'] = isset($data['watermark']) ? $data['watermark'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCertaintyAllowableValues();
        if (!is_null($this->container['certainty']) && !in_array($this->container['certainty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'certainty', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerdictAllowableValues();
        if (!is_null($this->container['verdict']) && !in_array($this->container['verdict'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verdict', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certainty
     *
     * @return string|null
     */
    public function getCertainty()
    {
        return $this->container['certainty'];
    }

    /**
     * Sets certainty
     *
     * @param string|null $certainty Describes how certain the hit is, possible values:   * `Very Low`   * `Low`   * `Medium`   * `High`   * `Very High`
     *
     * @return $this
     */
    public function setCertainty($certainty)
    {
        $allowedValues = $this->getCertaintyAllowableValues();
        if (!is_null($certainty) && !in_array($certainty, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'certainty', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['certainty'] = $certainty;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return object|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param object|null $errors A  list of error objects (empty if no errors happened), each error object contains following keys:   * `scan`: scan related error description   * `redact`: redaction related error description   * `watermark`: watermark related error description   * `metadata_removal`: metadata removal related error description
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Output processed file name (pre-configured on engine settings under Core's worflow rule)
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets hits
     *
     * @return \OpenAPI\Client\Model\DLPResponseDlpInfoHits|null
     */
    public function getHits()
    {
        return $this->container['hits'];
    }

    /**
     * Sets hits
     *
     * @param \OpenAPI\Client\Model\DLPResponseDlpInfoHits|null $hits hits
     *
     * @return $this
     */
    public function setHits($hits)
    {
        $this->container['hits'] = $hits;

        return $this;
    }

    /**
     * Gets metadata_removal
     *
     * @return \OpenAPI\Client\Model\DLPResponseDlpInfoMetadataRemoval|null
     */
    public function getMetadataRemoval()
    {
        return $this->container['metadata_removal'];
    }

    /**
     * Sets metadata_removal
     *
     * @param \OpenAPI\Client\Model\DLPResponseDlpInfoMetadataRemoval|null $metadata_removal metadata_removal
     *
     * @return $this
     */
    public function setMetadataRemoval($metadata_removal)
    {
        $this->container['metadata_removal'] = $metadata_removal;

        return $this;
    }

    /**
     * Gets redact
     *
     * @return \OpenAPI\Client\Model\DLPResponseDlpInfoRedact|null
     */
    public function getRedact()
    {
        return $this->container['redact'];
    }

    /**
     * Sets redact
     *
     * @param \OpenAPI\Client\Model\DLPResponseDlpInfoRedact|null $redact redact
     *
     * @return $this
     */
    public function setRedact($redact)
    {
        $this->container['redact'] = $redact;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return int|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param int|null $severity (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * `0` - Certainly is data loss   * `1` - Might be data loss
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets verdict
     *
     * @return int|null
     */
    public function getVerdict()
    {
        return $this->container['verdict'];
    }

    /**
     * Sets verdict
     *
     * @param int|null $verdict The overall result for the scanned file. It can be   | index         | status                       |   |---------------|------------------------------|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  |
     *
     * @return $this
     */
    public function setVerdict($verdict)
    {
        $allowedValues = $this->getVerdictAllowableValues();
        if (!is_null($verdict) && !in_array($verdict, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verdict', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verdict'] = $verdict;

        return $this;
    }

    /**
     * Gets watermark
     *
     * @return \OpenAPI\Client\Model\DLPResponseDlpInfoWatermark|null
     */
    public function getWatermark()
    {
        return $this->container['watermark'];
    }

    /**
     * Sets watermark
     *
     * @param \OpenAPI\Client\Model\DLPResponseDlpInfoWatermark|null $watermark watermark
     *
     * @return $this
     */
    public function setWatermark($watermark)
    {
        $this->container['watermark'] = $watermark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


