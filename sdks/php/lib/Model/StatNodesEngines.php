<?php
/**
 * StatNodesEngines
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatNodesEngines Class Doc Comment
 *
 * @category Class
 * @description Engine summary
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StatNodesEngines implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_stat_nodes_engines';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'db_ver' => 'string',
        'def_time' => 'string',
        'eng_name' => 'string',
        'eng_ver' => 'string',
        'engine_type' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'active' => null,
        'db_ver' => null,
        'def_time' => null,
        'eng_name' => null,
        'eng_ver' => null,
        'engine_type' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'db_ver' => 'db_ver',
        'def_time' => 'def_time',
        'eng_name' => 'eng_name',
        'eng_ver' => 'eng_ver',
        'engine_type' => 'engine_type',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'db_ver' => 'setDbVer',
        'def_time' => 'setDefTime',
        'eng_name' => 'setEngName',
        'eng_ver' => 'setEngVer',
        'engine_type' => 'setEngineType',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'db_ver' => 'getDbVer',
        'def_time' => 'getDefTime',
        'eng_name' => 'getEngName',
        'eng_ver' => 'getEngVer',
        'engine_type' => 'getEngineType',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENGINE_TYPE_AV = 'av';
    const ENGINE_TYPE_ARCHIVE = 'archive';
    const ENGINE_TYPE_FILETYPE = 'filetype';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEngineTypeAllowableValues()
    {
        return [
            self::ENGINE_TYPE_AV,
            self::ENGINE_TYPE_ARCHIVE,
            self::ENGINE_TYPE_FILETYPE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['db_ver'] = isset($data['db_ver']) ? $data['db_ver'] : null;
        $this->container['def_time'] = isset($data['def_time']) ? $data['def_time'] : null;
        $this->container['eng_name'] = isset($data['eng_name']) ? $data['eng_name'] : null;
        $this->container['eng_ver'] = isset($data['eng_ver']) ? $data['eng_ver'] : null;
        $this->container['engine_type'] = isset($data['engine_type']) ? $data['engine_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEngineTypeAllowableValues();
        if (!is_null($this->container['engine_type']) && !in_array($this->container['engine_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'engine_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active If used by at least one engine
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets db_ver
     *
     * @return string|null
     */
    public function getDbVer()
    {
        return $this->container['db_ver'];
    }

    /**
     * Sets db_ver
     *
     * @param string|null $db_ver The database version for this engine
     *
     * @return $this
     */
    public function setDbVer($db_ver)
    {
        $this->container['db_ver'] = $db_ver;

        return $this;
    }

    /**
     * Gets def_time
     *
     * @return string|null
     */
    public function getDefTime()
    {
        return $this->container['def_time'];
    }

    /**
     * Sets def_time
     *
     * @param string|null $def_time The database definition time for this engine
     *
     * @return $this
     */
    public function setDefTime($def_time)
    {
        $this->container['def_time'] = $def_time;

        return $this;
    }

    /**
     * Gets eng_name
     *
     * @return string|null
     */
    public function getEngName()
    {
        return $this->container['eng_name'];
    }

    /**
     * Sets eng_name
     *
     * @param string|null $eng_name Engine name
     *
     * @return $this
     */
    public function setEngName($eng_name)
    {
        $this->container['eng_name'] = $eng_name;

        return $this;
    }

    /**
     * Gets eng_ver
     *
     * @return string|null
     */
    public function getEngVer()
    {
        return $this->container['eng_ver'];
    }

    /**
     * Sets eng_ver
     *
     * @param string|null $eng_ver Engine's version (format differs from one engine to another).
     *
     * @return $this
     */
    public function setEngVer($eng_ver)
    {
        $this->container['eng_ver'] = $eng_ver;

        return $this;
    }

    /**
     * Gets engine_type
     *
     * @return string|null
     */
    public function getEngineType()
    {
        return $this->container['engine_type'];
    }

    /**
     * Sets engine_type
     *
     * @param string|null $engine_type Engine's type:    * av   * archive   * filetype
     *
     * @return $this
     */
    public function setEngineType($engine_type)
    {
        $allowedValues = $this->getEngineTypeAllowableValues();
        if (!is_null($engine_type) && !in_array($engine_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'engine_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['engine_type'] = $engine_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Engine internal ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


