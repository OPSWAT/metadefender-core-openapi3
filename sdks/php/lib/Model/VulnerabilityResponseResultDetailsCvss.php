<?php
/**
 * VulnerabilityResponseResultDetailsCvss
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works.
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VulnerabilityResponseResultDetailsCvss Class Doc Comment
 *
 * @category Class
 * @description A set of cvss severity information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VulnerabilityResponseResultDetailsCvss implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VulnerabilityResponse_result_details_cvss';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_complexity' => 'string',
        'access_vector' => 'string',
        'authentication' => 'string',
        'availability_impact' => 'string',
        'confidentiality_impact' => 'string',
        'generated_on_epoch' => 'string',
        'integrity_impact' => 'string',
        'score' => 'string',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'access_complexity' => null,
        'access_vector' => null,
        'authentication' => null,
        'availability_impact' => null,
        'confidentiality_impact' => null,
        'generated_on_epoch' => null,
        'integrity_impact' => null,
        'score' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_complexity' => 'access-complexity',
        'access_vector' => 'access-vector',
        'authentication' => 'authentication',
        'availability_impact' => 'availability-impact',
        'confidentiality_impact' => 'confidentiality-impact',
        'generated_on_epoch' => 'generated-on-epoch',
        'integrity_impact' => 'integrity-impact',
        'score' => 'score',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_complexity' => 'setAccessComplexity',
        'access_vector' => 'setAccessVector',
        'authentication' => 'setAuthentication',
        'availability_impact' => 'setAvailabilityImpact',
        'confidentiality_impact' => 'setConfidentialityImpact',
        'generated_on_epoch' => 'setGeneratedOnEpoch',
        'integrity_impact' => 'setIntegrityImpact',
        'score' => 'setScore',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_complexity' => 'getAccessComplexity',
        'access_vector' => 'getAccessVector',
        'authentication' => 'getAuthentication',
        'availability_impact' => 'getAvailabilityImpact',
        'confidentiality_impact' => 'getConfidentialityImpact',
        'generated_on_epoch' => 'getGeneratedOnEpoch',
        'integrity_impact' => 'getIntegrityImpact',
        'score' => 'getScore',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_complexity'] = isset($data['access_complexity']) ? $data['access_complexity'] : null;
        $this->container['access_vector'] = isset($data['access_vector']) ? $data['access_vector'] : null;
        $this->container['authentication'] = isset($data['authentication']) ? $data['authentication'] : null;
        $this->container['availability_impact'] = isset($data['availability_impact']) ? $data['availability_impact'] : null;
        $this->container['confidentiality_impact'] = isset($data['confidentiality_impact']) ? $data['confidentiality_impact'] : null;
        $this->container['generated_on_epoch'] = isset($data['generated_on_epoch']) ? $data['generated_on_epoch'] : null;
        $this->container['integrity_impact'] = isset($data['integrity_impact']) ? $data['integrity_impact'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_complexity
     *
     * @return string|null
     */
    public function getAccessComplexity()
    {
        return $this->container['access_complexity'];
    }

    /**
     * Sets access_complexity
     *
     * @param string|null $access_complexity A CVSS access-complexity descriptor
     *
     * @return $this
     */
    public function setAccessComplexity($access_complexity)
    {
        $this->container['access_complexity'] = $access_complexity;

        return $this;
    }

    /**
     * Gets access_vector
     *
     * @return string|null
     */
    public function getAccessVector()
    {
        return $this->container['access_vector'];
    }

    /**
     * Sets access_vector
     *
     * @param string|null $access_vector A CVSS access-vector descriptor
     *
     * @return $this
     */
    public function setAccessVector($access_vector)
    {
        $this->container['access_vector'] = $access_vector;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return string|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param string|null $authentication A CVSS authentication descriptor
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets availability_impact
     *
     * @return string|null
     */
    public function getAvailabilityImpact()
    {
        return $this->container['availability_impact'];
    }

    /**
     * Sets availability_impact
     *
     * @param string|null $availability_impact A CVSS availability impact descriptor
     *
     * @return $this
     */
    public function setAvailabilityImpact($availability_impact)
    {
        $this->container['availability_impact'] = $availability_impact;

        return $this;
    }

    /**
     * Gets confidentiality_impact
     *
     * @return string|null
     */
    public function getConfidentialityImpact()
    {
        return $this->container['confidentiality_impact'];
    }

    /**
     * Sets confidentiality_impact
     *
     * @param string|null $confidentiality_impact A CVSS confidentiality impact descriptor
     *
     * @return $this
     */
    public function setConfidentialityImpact($confidentiality_impact)
    {
        $this->container['confidentiality_impact'] = $confidentiality_impact;

        return $this;
    }

    /**
     * Gets generated_on_epoch
     *
     * @return string|null
     */
    public function getGeneratedOnEpoch()
    {
        return $this->container['generated_on_epoch'];
    }

    /**
     * Sets generated_on_epoch
     *
     * @param string|null $generated_on_epoch An epoch timestamp indicating CVSS generation time
     *
     * @return $this
     */
    public function setGeneratedOnEpoch($generated_on_epoch)
    {
        $this->container['generated_on_epoch'] = $generated_on_epoch;

        return $this;
    }

    /**
     * Gets integrity_impact
     *
     * @return string|null
     */
    public function getIntegrityImpact()
    {
        return $this->container['integrity_impact'];
    }

    /**
     * Sets integrity_impact
     *
     * @param string|null $integrity_impact A CVSS integrity impact descriptor
     *
     * @return $this
     */
    public function setIntegrityImpact($integrity_impact)
    {
        $this->container['integrity_impact'] = $integrity_impact;

        return $this;
    }

    /**
     * Gets score
     *
     * @return string|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param string|null $score A CVSS 10-point severity score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source A CVSS source descriptor
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


