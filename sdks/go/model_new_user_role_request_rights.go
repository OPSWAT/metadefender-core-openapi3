/*
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * API version: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// NewUserRoleRequestRights A list of rights for each permission
type NewUserRoleRequestRights struct {
	// What permissions are allowed for Node.
	Agents RolePermissionObject `json:"agents,omitempty"`
	// What permissions are allowed for Certificates.
	Cert RolePermissionObject `json:"cert,omitempty"`
	// What permissions are allowed for Configuration logs.
	Configlog RolePermissionObject `json:"configlog,omitempty"`
	// What permissions are allowed for Engines and Modules.
	Engines RolePermissionObject `json:"engines,omitempty"`
	// What permissions are allowed for External actions (External Scanner/Post Actions).
	External RolePermissionObject `json:"external,omitempty"`
	// What permissions are allowed for managing the License.
	License RolePermissionObject `json:"license,omitempty"`
	// What permissions are allowed for managing the Quarantine.
	Quarantine RolePermissionObject `json:"quarantine,omitempty"`
	// What permissions are allowed for managing the retention policies.
	Retention RolePermissionObject `json:"retention,omitempty"`
	// What permissions are allowed for managing the workflow rules.
	Rule RolePermissionObject `json:"rule,omitempty"`
	// What permissions are allowed for managing analysis actions.
	Scan RolePermissionObject `json:"scan,omitempty"`
	// What permissions are allowed for managing the analysis logs.
	Scanlog RolePermissionObject `json:"scanlog,omitempty"`
	// What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.
	Skip RolePermissionObject `json:"skip,omitempty"`
	// What permissions are allowed for managing the update configuration.
	Update RolePermissionObject `json:"update,omitempty"`
	// What permissions are allowed for managing the update logs.
	Updatelog RolePermissionObject `json:"updatelog,omitempty"`
	// What permissions are allowed for managing the users.
	Users RolePermissionObject `json:"users,omitempty"`
	// What permissions are allowed for managing the workflow templates.
	Workflow RolePermissionObject `json:"workflow,omitempty"`
	// What permissions are allowed for managing the network zones.
	Zone RolePermissionObject `json:"zone,omitempty"`
}
