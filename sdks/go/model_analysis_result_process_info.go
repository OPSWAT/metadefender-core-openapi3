/*
 * MetaDefender Core
 *
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * API version: v4.18.0
 * Contact: feedback@opswat.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// AnalysisResultProcessInfo Processing information
type AnalysisResultProcessInfo struct {
	// Provides the reason why the file is blocked (if so).
	BlockedReason string `json:"blocked_reason,omitempty"`
	// Indicates if the input file's detected type was configured to skip scanning.
	FileTypeSkippedScan bool `json:"file_type_skipped_scan,omitempty"`
	// array of flags - if occur - describing outdated data in the result, these can be   * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database   * configuration: the process' rule - or any item used by the rule - was modified since the item was processed   * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available               
	OutdatedData []string `json:"outdated_data,omitempty"`
	// Total time elapsed during processing file on the node (in milliseconds).
	ProcessingTime int32 `json:"processing_time,omitempty"`
	// The used rule name.
	Profile string `json:"profile,omitempty"`
	// Percentage of processing completed (from 1-100).
	ProgressPercentage int32 `json:"progress_percentage,omitempty"`
	// Total time elapsed while the file waits in the queue (in milliseconds).
	QueueTime int32 `json:"queue_time,omitempty"`
	// The final result of processing the file (Allowed / Blocked / Processing).
	Result string `json:"result,omitempty"`
	// Identifier for the REST Client that calls the API.
	UserAgent string `json:"user_agent,omitempty"`
	// User identifier who submitted scan request earlier.
	Username string `json:"username,omitempty"`
	// Aggregated list of potential issues.
	Verdicts []string `json:"verdicts,omitempty"`
	PostProcessing AnalysisResultProcessInfoPostProcessing `json:"post_processing,omitempty"`
}
