/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResponse_batch_files_files_in_batch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResponse_batch_files_files_in_batch::OAIBatchResponse_batch_files_files_in_batch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResponse_batch_files_files_in_batch::OAIBatchResponse_batch_files_files_in_batch() {
    this->initializeModel();
}

OAIBatchResponse_batch_files_files_in_batch::~OAIBatchResponse_batch_files_files_in_batch() {}

void OAIBatchResponse_batch_files_files_in_batch::initializeModel() {

    m_data_id_isSet = false;
    m_data_id_isValid = false;

    m_detected_by_isSet = false;
    m_detected_by_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_file_type_description_isSet = false;
    m_file_type_description_isValid = false;

    m_process_info_isSet = false;
    m_process_info_isValid = false;

    m_progress_percentage_isSet = false;
    m_progress_percentage_isValid = false;

    m_scan_all_result_a_isSet = false;
    m_scan_all_result_a_isValid = false;

    m_scan_all_result_i_isSet = false;
    m_scan_all_result_i_isValid = false;

    m_scanned_with_isSet = false;
    m_scanned_with_isValid = false;
}

void OAIBatchResponse_batch_files_files_in_batch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResponse_batch_files_files_in_batch::fromJsonObject(QJsonObject json) {

    m_data_id_isValid = ::OpenAPI::fromJsonValue(data_id, json[QString("data_id")]);
    m_data_id_isSet = !json[QString("data_id")].isNull() && m_data_id_isValid;

    m_detected_by_isValid = ::OpenAPI::fromJsonValue(detected_by, json[QString("detected_by")]);
    m_detected_by_isSet = !json[QString("detected_by")].isNull() && m_detected_by_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(file_type, json[QString("file_type")]);
    m_file_type_isSet = !json[QString("file_type")].isNull() && m_file_type_isValid;

    m_file_type_description_isValid = ::OpenAPI::fromJsonValue(file_type_description, json[QString("file_type_description")]);
    m_file_type_description_isSet = !json[QString("file_type_description")].isNull() && m_file_type_description_isValid;

    m_process_info_isValid = ::OpenAPI::fromJsonValue(process_info, json[QString("process_info")]);
    m_process_info_isSet = !json[QString("process_info")].isNull() && m_process_info_isValid;

    m_progress_percentage_isValid = ::OpenAPI::fromJsonValue(progress_percentage, json[QString("progress_percentage")]);
    m_progress_percentage_isSet = !json[QString("progress_percentage")].isNull() && m_progress_percentage_isValid;

    m_scan_all_result_a_isValid = ::OpenAPI::fromJsonValue(scan_all_result_a, json[QString("scan_all_result_a")]);
    m_scan_all_result_a_isSet = !json[QString("scan_all_result_a")].isNull() && m_scan_all_result_a_isValid;

    m_scan_all_result_i_isValid = ::OpenAPI::fromJsonValue(scan_all_result_i, json[QString("scan_all_result_i")]);
    m_scan_all_result_i_isSet = !json[QString("scan_all_result_i")].isNull() && m_scan_all_result_i_isValid;

    m_scanned_with_isValid = ::OpenAPI::fromJsonValue(scanned_with, json[QString("scanned_with")]);
    m_scanned_with_isSet = !json[QString("scanned_with")].isNull() && m_scanned_with_isValid;
}

QString OAIBatchResponse_batch_files_files_in_batch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResponse_batch_files_files_in_batch::asJsonObject() const {
    QJsonObject obj;
    if (m_data_id_isSet) {
        obj.insert(QString("data_id"), ::OpenAPI::toJsonValue(data_id));
    }
    if (m_detected_by_isSet) {
        obj.insert(QString("detected_by"), ::OpenAPI::toJsonValue(detected_by));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(display_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(file_size));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("file_type"), ::OpenAPI::toJsonValue(file_type));
    }
    if (m_file_type_description_isSet) {
        obj.insert(QString("file_type_description"), ::OpenAPI::toJsonValue(file_type_description));
    }
    if (process_info.isSet()) {
        obj.insert(QString("process_info"), ::OpenAPI::toJsonValue(process_info));
    }
    if (m_progress_percentage_isSet) {
        obj.insert(QString("progress_percentage"), ::OpenAPI::toJsonValue(progress_percentage));
    }
    if (scan_all_result_a.isSet()) {
        obj.insert(QString("scan_all_result_a"), ::OpenAPI::toJsonValue(scan_all_result_a));
    }
    if (scan_all_result_i.isSet()) {
        obj.insert(QString("scan_all_result_i"), ::OpenAPI::toJsonValue(scan_all_result_i));
    }
    if (m_scanned_with_isSet) {
        obj.insert(QString("scanned_with"), ::OpenAPI::toJsonValue(scanned_with));
    }
    return obj;
}

QString OAIBatchResponse_batch_files_files_in_batch::getDataId() const {
    return data_id;
}
void OAIBatchResponse_batch_files_files_in_batch::setDataId(const QString &data_id) {
    this->data_id = data_id;
    this->m_data_id_isSet = true;
}

qint32 OAIBatchResponse_batch_files_files_in_batch::getDetectedBy() const {
    return detected_by;
}
void OAIBatchResponse_batch_files_files_in_batch::setDetectedBy(const qint32 &detected_by) {
    this->detected_by = detected_by;
    this->m_detected_by_isSet = true;
}

QString OAIBatchResponse_batch_files_files_in_batch::getDisplayName() const {
    return display_name;
}
void OAIBatchResponse_batch_files_files_in_batch::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

qint32 OAIBatchResponse_batch_files_files_in_batch::getFileSize() const {
    return file_size;
}
void OAIBatchResponse_batch_files_files_in_batch::setFileSize(const qint32 &file_size) {
    this->file_size = file_size;
    this->m_file_size_isSet = true;
}

QString OAIBatchResponse_batch_files_files_in_batch::getFileType() const {
    return file_type;
}
void OAIBatchResponse_batch_files_files_in_batch::setFileType(const QString &file_type) {
    this->file_type = file_type;
    this->m_file_type_isSet = true;
}

QString OAIBatchResponse_batch_files_files_in_batch::getFileTypeDescription() const {
    return file_type_description;
}
void OAIBatchResponse_batch_files_files_in_batch::setFileTypeDescription(const QString &file_type_description) {
    this->file_type_description = file_type_description;
    this->m_file_type_description_isSet = true;
}

OAIBatchResponse_batch_files_process_info OAIBatchResponse_batch_files_files_in_batch::getProcessInfo() const {
    return process_info;
}
void OAIBatchResponse_batch_files_files_in_batch::setProcessInfo(const OAIBatchResponse_batch_files_process_info &process_info) {
    this->process_info = process_info;
    this->m_process_info_isSet = true;
}

qint32 OAIBatchResponse_batch_files_files_in_batch::getProgressPercentage() const {
    return progress_percentage;
}
void OAIBatchResponse_batch_files_files_in_batch::setProgressPercentage(const qint32 &progress_percentage) {
    this->progress_percentage = progress_percentage;
    this->m_progress_percentage_isSet = true;
}

OAIProcessingResultsStringEnum OAIBatchResponse_batch_files_files_in_batch::getScanAllResultA() const {
    return scan_all_result_a;
}
void OAIBatchResponse_batch_files_files_in_batch::setScanAllResultA(const OAIProcessingResultsStringEnum &scan_all_result_a) {
    this->scan_all_result_a = scan_all_result_a;
    this->m_scan_all_result_a_isSet = true;
}

OAIProcessingResultsIndexEnum OAIBatchResponse_batch_files_files_in_batch::getScanAllResultI() const {
    return scan_all_result_i;
}
void OAIBatchResponse_batch_files_files_in_batch::setScanAllResultI(const OAIProcessingResultsIndexEnum &scan_all_result_i) {
    this->scan_all_result_i = scan_all_result_i;
    this->m_scan_all_result_i_isSet = true;
}

qint32 OAIBatchResponse_batch_files_files_in_batch::getScannedWith() const {
    return scanned_with;
}
void OAIBatchResponse_batch_files_files_in_batch::setScannedWith(const qint32 &scanned_with) {
    this->scanned_with = scanned_with;
    this->m_scanned_with_isSet = true;
}

bool OAIBatchResponse_batch_files_files_in_batch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (process_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (scan_all_result_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (scan_all_result_i.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_with_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResponse_batch_files_files_in_batch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
