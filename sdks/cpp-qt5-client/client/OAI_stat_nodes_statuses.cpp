/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_stat_nodes_statuses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_stat_nodes_statuses::OAI_stat_nodes_statuses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_stat_nodes_statuses::OAI_stat_nodes_statuses() {
    this->initializeModel();
}

OAI_stat_nodes_statuses::~OAI_stat_nodes_statuses() {}

void OAI_stat_nodes_statuses::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_cpu_cores_isSet = false;
    m_cpu_cores_isValid = false;

    m_engines_isSet = false;
    m_engines_isValid = false;

    m_free_disk_space_isSet = false;
    m_free_disk_space_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_load_isSet = false;
    m_load_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_scan_queue_isSet = false;
    m_scan_queue_isValid = false;

    m_total_memory_isSet = false;
    m_total_memory_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAI_stat_nodes_statuses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_stat_nodes_statuses::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_cpu_cores_isValid = ::OpenAPI::fromJsonValue(cpu_cores, json[QString("cpu_cores")]);
    m_cpu_cores_isSet = !json[QString("cpu_cores")].isNull() && m_cpu_cores_isValid;

    m_engines_isValid = ::OpenAPI::fromJsonValue(engines, json[QString("engines")]);
    m_engines_isSet = !json[QString("engines")].isNull() && m_engines_isValid;

    m_free_disk_space_isValid = ::OpenAPI::fromJsonValue(free_disk_space, json[QString("free_disk_space")]);
    m_free_disk_space_isSet = !json[QString("free_disk_space")].isNull() && m_free_disk_space_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_load_isValid = ::OpenAPI::fromJsonValue(load, json[QString("load")]);
    m_load_isSet = !json[QString("load")].isNull() && m_load_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_scan_queue_isValid = ::OpenAPI::fromJsonValue(scan_queue, json[QString("scan_queue")]);
    m_scan_queue_isSet = !json[QString("scan_queue")].isNull() && m_scan_queue_isValid;

    m_total_memory_isValid = ::OpenAPI::fromJsonValue(total_memory, json[QString("total_memory")]);
    m_total_memory_isSet = !json[QString("total_memory")].isNull() && m_total_memory_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAI_stat_nodes_statuses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_stat_nodes_statuses::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(address));
    }
    if (m_cpu_cores_isSet) {
        obj.insert(QString("cpu_cores"), ::OpenAPI::toJsonValue(cpu_cores));
    }
    if (engines.size() > 0) {
        obj.insert(QString("engines"), ::OpenAPI::toJsonValue(engines));
    }
    if (m_free_disk_space_isSet) {
        obj.insert(QString("free_disk_space"), ::OpenAPI::toJsonValue(free_disk_space));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(issues));
    }
    if (m_load_isSet) {
        obj.insert(QString("load"), ::OpenAPI::toJsonValue(load));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(os));
    }
    if (m_scan_queue_isSet) {
        obj.insert(QString("scan_queue"), ::OpenAPI::toJsonValue(scan_queue));
    }
    if (m_total_memory_isSet) {
        obj.insert(QString("total_memory"), ::OpenAPI::toJsonValue(total_memory));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(version));
    }
    return obj;
}

QString OAI_stat_nodes_statuses::getAddress() const {
    return address;
}
void OAI_stat_nodes_statuses::setAddress(const QString &address) {
    this->address = address;
    this->m_address_isSet = true;
}

qint32 OAI_stat_nodes_statuses::getCpuCores() const {
    return cpu_cores;
}
void OAI_stat_nodes_statuses::setCpuCores(const qint32 &cpu_cores) {
    this->cpu_cores = cpu_cores;
    this->m_cpu_cores_isSet = true;
}

QList<OAI_stat_nodes_engines> OAI_stat_nodes_statuses::getEngines() const {
    return engines;
}
void OAI_stat_nodes_statuses::setEngines(const QList<OAI_stat_nodes_engines> &engines) {
    this->engines = engines;
    this->m_engines_isSet = true;
}

qint32 OAI_stat_nodes_statuses::getFreeDiskSpace() const {
    return free_disk_space;
}
void OAI_stat_nodes_statuses::setFreeDiskSpace(const qint32 &free_disk_space) {
    this->free_disk_space = free_disk_space;
    this->m_free_disk_space_isSet = true;
}

QString OAI_stat_nodes_statuses::getId() const {
    return id;
}
void OAI_stat_nodes_statuses::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QList<OAI_stat_nodes_issues> OAI_stat_nodes_statuses::getIssues() const {
    return issues;
}
void OAI_stat_nodes_statuses::setIssues(const QList<OAI_stat_nodes_issues> &issues) {
    this->issues = issues;
    this->m_issues_isSet = true;
}

qint32 OAI_stat_nodes_statuses::getLoad() const {
    return load;
}
void OAI_stat_nodes_statuses::setLoad(const qint32 &load) {
    this->load = load;
    this->m_load_isSet = true;
}

QString OAI_stat_nodes_statuses::getOs() const {
    return os;
}
void OAI_stat_nodes_statuses::setOs(const QString &os) {
    this->os = os;
    this->m_os_isSet = true;
}

qint32 OAI_stat_nodes_statuses::getScanQueue() const {
    return scan_queue;
}
void OAI_stat_nodes_statuses::setScanQueue(const qint32 &scan_queue) {
    this->scan_queue = scan_queue;
    this->m_scan_queue_isSet = true;
}

qint32 OAI_stat_nodes_statuses::getTotalMemory() const {
    return total_memory;
}
void OAI_stat_nodes_statuses::setTotalMemory(const qint32 &total_memory) {
    this->total_memory = total_memory;
    this->m_total_memory_isSet = true;
}

QString OAI_stat_nodes_statuses::getVersion() const {
    return version;
}
void OAI_stat_nodes_statuses::setVersion(const QString &version) {
    this->version = version;
    this->m_version_isSet = true;
}

bool OAI_stat_nodes_statuses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (engines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_disk_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_stat_nodes_statuses::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
