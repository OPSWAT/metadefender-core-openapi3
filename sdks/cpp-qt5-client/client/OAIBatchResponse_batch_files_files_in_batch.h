/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchResponse_batch_files_files_in_batch.h
 *
 * 
 */

#ifndef OAIBatchResponse_batch_files_files_in_batch_H
#define OAIBatchResponse_batch_files_files_in_batch_H

#include <QJsonObject>

#include "OAIBatchResponse_batch_files_process_info.h"
#include "OAIProcessingResultsIndexEnum.h"
#include "OAIProcessingResultsStringEnum.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBatchResponse_batch_files_files_in_batch : public OAIObject {
public:
    OAIBatchResponse_batch_files_files_in_batch();
    OAIBatchResponse_batch_files_files_in_batch(QString json);
    ~OAIBatchResponse_batch_files_files_in_batch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataId() const;
    void setDataId(const QString &data_id);

    qint32 getDetectedBy() const;
    void setDetectedBy(const qint32 &detected_by);

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);

    qint32 getFileSize() const;
    void setFileSize(const qint32 &file_size);

    QString getFileType() const;
    void setFileType(const QString &file_type);

    QString getFileTypeDescription() const;
    void setFileTypeDescription(const QString &file_type_description);

    OAIBatchResponse_batch_files_process_info getProcessInfo() const;
    void setProcessInfo(const OAIBatchResponse_batch_files_process_info &process_info);

    qint32 getProgressPercentage() const;
    void setProgressPercentage(const qint32 &progress_percentage);

    OAIProcessingResultsStringEnum getScanAllResultA() const;
    void setScanAllResultA(const OAIProcessingResultsStringEnum &scan_all_result_a);

    OAIProcessingResultsIndexEnum getScanAllResultI() const;
    void setScanAllResultI(const OAIProcessingResultsIndexEnum &scan_all_result_i);

    qint32 getScannedWith() const;
    void setScannedWith(const qint32 &scanned_with);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString data_id;
    bool m_data_id_isSet;
    bool m_data_id_isValid;

    qint32 detected_by;
    bool m_detected_by_isSet;
    bool m_detected_by_isValid;

    QString display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 file_size;
    bool m_file_size_isSet;
    bool m_file_size_isValid;

    QString file_type;
    bool m_file_type_isSet;
    bool m_file_type_isValid;

    QString file_type_description;
    bool m_file_type_description_isSet;
    bool m_file_type_description_isValid;

    OAIBatchResponse_batch_files_process_info process_info;
    bool m_process_info_isSet;
    bool m_process_info_isValid;

    qint32 progress_percentage;
    bool m_progress_percentage_isSet;
    bool m_progress_percentage_isValid;

    OAIProcessingResultsStringEnum scan_all_result_a;
    bool m_scan_all_result_a_isSet;
    bool m_scan_all_result_a_isValid;

    OAIProcessingResultsIndexEnum scan_all_result_i;
    bool m_scan_all_result_i_isSet;
    bool m_scan_all_result_i_isValid;

    qint32 scanned_with;
    bool m_scanned_with_isSet;
    bool m_scanned_with_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchResponse_batch_files_files_in_batch)

#endif // OAIBatchResponse_batch_files_files_in_batch_H
