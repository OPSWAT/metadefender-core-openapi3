/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalysisResult_process_info.h
 *
 * Processing information
 */

#ifndef OAIAnalysisResult_process_info_H
#define OAIAnalysisResult_process_info_H

#include <QJsonObject>

#include "OAIAnalysisResult_process_info_post_processing.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAnalysisResult_process_info : public OAIObject {
public:
    OAIAnalysisResult_process_info();
    OAIAnalysisResult_process_info(QString json);
    ~OAIAnalysisResult_process_info() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBlockedReason() const;
    void setBlockedReason(const QString &blocked_reason);

    bool isFileTypeSkippedScan() const;
    void setFileTypeSkippedScan(const bool &file_type_skipped_scan);

    QList<QString> getOutdatedData() const;
    void setOutdatedData(const QList<QString> &outdated_data);

    qint32 getProcessingTime() const;
    void setProcessingTime(const qint32 &processing_time);

    QString getProfile() const;
    void setProfile(const QString &profile);

    qint32 getProgressPercentage() const;
    void setProgressPercentage(const qint32 &progress_percentage);

    qint32 getQueueTime() const;
    void setQueueTime(const qint32 &queue_time);

    QString getResult() const;
    void setResult(const QString &result);

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);

    QString getUsername() const;
    void setUsername(const QString &username);

    QList<QString> getVerdicts() const;
    void setVerdicts(const QList<QString> &verdicts);

    OAIAnalysisResult_process_info_post_processing getPostProcessing() const;
    void setPostProcessing(const OAIAnalysisResult_process_info_post_processing &post_processing);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString blocked_reason;
    bool m_blocked_reason_isSet;
    bool m_blocked_reason_isValid;

    bool file_type_skipped_scan;
    bool m_file_type_skipped_scan_isSet;
    bool m_file_type_skipped_scan_isValid;

    QList<QString> outdated_data;
    bool m_outdated_data_isSet;
    bool m_outdated_data_isValid;

    qint32 processing_time;
    bool m_processing_time_isSet;
    bool m_processing_time_isValid;

    QString profile;
    bool m_profile_isSet;
    bool m_profile_isValid;

    qint32 progress_percentage;
    bool m_progress_percentage_isSet;
    bool m_progress_percentage_isValid;

    qint32 queue_time;
    bool m_queue_time_isSet;
    bool m_queue_time_isValid;

    QString result;
    bool m_result_isSet;
    bool m_result_isValid;

    QString user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;

    QString username;
    bool m_username_isSet;
    bool m_username_isValid;

    QList<QString> verdicts;
    bool m_verdicts_isSet;
    bool m_verdicts_isValid;

    OAIAnalysisResult_process_info_post_processing post_processing;
    bool m_post_processing_isSet;
    bool m_post_processing_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalysisResult_process_info)

#endif // OAIAnalysisResult_process_info_H
