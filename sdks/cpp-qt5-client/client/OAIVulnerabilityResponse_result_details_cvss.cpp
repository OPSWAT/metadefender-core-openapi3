/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityResponse_result_details_cvss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityResponse_result_details_cvss::OAIVulnerabilityResponse_result_details_cvss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityResponse_result_details_cvss::OAIVulnerabilityResponse_result_details_cvss() {
    this->initializeModel();
}

OAIVulnerabilityResponse_result_details_cvss::~OAIVulnerabilityResponse_result_details_cvss() {}

void OAIVulnerabilityResponse_result_details_cvss::initializeModel() {

    m_access_complexity_isSet = false;
    m_access_complexity_isValid = false;

    m_access_vector_isSet = false;
    m_access_vector_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_availability_impact_isSet = false;
    m_availability_impact_isValid = false;

    m_confidentiality_impact_isSet = false;
    m_confidentiality_impact_isValid = false;

    m_generated_on_epoch_isSet = false;
    m_generated_on_epoch_isValid = false;

    m_integrity_impact_isSet = false;
    m_integrity_impact_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIVulnerabilityResponse_result_details_cvss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityResponse_result_details_cvss::fromJsonObject(QJsonObject json) {

    m_access_complexity_isValid = ::OpenAPI::fromJsonValue(access_complexity, json[QString("access-complexity")]);
    m_access_complexity_isSet = !json[QString("access-complexity")].isNull() && m_access_complexity_isValid;

    m_access_vector_isValid = ::OpenAPI::fromJsonValue(access_vector, json[QString("access-vector")]);
    m_access_vector_isSet = !json[QString("access-vector")].isNull() && m_access_vector_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_availability_impact_isValid = ::OpenAPI::fromJsonValue(availability_impact, json[QString("availability-impact")]);
    m_availability_impact_isSet = !json[QString("availability-impact")].isNull() && m_availability_impact_isValid;

    m_confidentiality_impact_isValid = ::OpenAPI::fromJsonValue(confidentiality_impact, json[QString("confidentiality-impact")]);
    m_confidentiality_impact_isSet = !json[QString("confidentiality-impact")].isNull() && m_confidentiality_impact_isValid;

    m_generated_on_epoch_isValid = ::OpenAPI::fromJsonValue(generated_on_epoch, json[QString("generated-on-epoch")]);
    m_generated_on_epoch_isSet = !json[QString("generated-on-epoch")].isNull() && m_generated_on_epoch_isValid;

    m_integrity_impact_isValid = ::OpenAPI::fromJsonValue(integrity_impact, json[QString("integrity-impact")]);
    m_integrity_impact_isSet = !json[QString("integrity-impact")].isNull() && m_integrity_impact_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIVulnerabilityResponse_result_details_cvss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityResponse_result_details_cvss::asJsonObject() const {
    QJsonObject obj;
    if (m_access_complexity_isSet) {
        obj.insert(QString("access-complexity"), ::OpenAPI::toJsonValue(access_complexity));
    }
    if (m_access_vector_isSet) {
        obj.insert(QString("access-vector"), ::OpenAPI::toJsonValue(access_vector));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(authentication));
    }
    if (m_availability_impact_isSet) {
        obj.insert(QString("availability-impact"), ::OpenAPI::toJsonValue(availability_impact));
    }
    if (m_confidentiality_impact_isSet) {
        obj.insert(QString("confidentiality-impact"), ::OpenAPI::toJsonValue(confidentiality_impact));
    }
    if (m_generated_on_epoch_isSet) {
        obj.insert(QString("generated-on-epoch"), ::OpenAPI::toJsonValue(generated_on_epoch));
    }
    if (m_integrity_impact_isSet) {
        obj.insert(QString("integrity-impact"), ::OpenAPI::toJsonValue(integrity_impact));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(score));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(source));
    }
    return obj;
}

QString OAIVulnerabilityResponse_result_details_cvss::getAccessComplexity() const {
    return access_complexity;
}
void OAIVulnerabilityResponse_result_details_cvss::setAccessComplexity(const QString &access_complexity) {
    this->access_complexity = access_complexity;
    this->m_access_complexity_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getAccessVector() const {
    return access_vector;
}
void OAIVulnerabilityResponse_result_details_cvss::setAccessVector(const QString &access_vector) {
    this->access_vector = access_vector;
    this->m_access_vector_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getAuthentication() const {
    return authentication;
}
void OAIVulnerabilityResponse_result_details_cvss::setAuthentication(const QString &authentication) {
    this->authentication = authentication;
    this->m_authentication_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getAvailabilityImpact() const {
    return availability_impact;
}
void OAIVulnerabilityResponse_result_details_cvss::setAvailabilityImpact(const QString &availability_impact) {
    this->availability_impact = availability_impact;
    this->m_availability_impact_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getConfidentialityImpact() const {
    return confidentiality_impact;
}
void OAIVulnerabilityResponse_result_details_cvss::setConfidentialityImpact(const QString &confidentiality_impact) {
    this->confidentiality_impact = confidentiality_impact;
    this->m_confidentiality_impact_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getGeneratedOnEpoch() const {
    return generated_on_epoch;
}
void OAIVulnerabilityResponse_result_details_cvss::setGeneratedOnEpoch(const QString &generated_on_epoch) {
    this->generated_on_epoch = generated_on_epoch;
    this->m_generated_on_epoch_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getIntegrityImpact() const {
    return integrity_impact;
}
void OAIVulnerabilityResponse_result_details_cvss::setIntegrityImpact(const QString &integrity_impact) {
    this->integrity_impact = integrity_impact;
    this->m_integrity_impact_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getScore() const {
    return score;
}
void OAIVulnerabilityResponse_result_details_cvss::setScore(const QString &score) {
    this->score = score;
    this->m_score_isSet = true;
}

QString OAIVulnerabilityResponse_result_details_cvss::getSource() const {
    return source;
}
void OAIVulnerabilityResponse_result_details_cvss::setSource(const QString &source) {
    this->source = source;
    this->m_source_isSet = true;
}

bool OAIVulnerabilityResponse_result_details_cvss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_complexity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidentiality_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_on_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrity_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityResponse_result_details_cvss::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
