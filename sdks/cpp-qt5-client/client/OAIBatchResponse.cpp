/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResponse::OAIBatchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResponse::OAIBatchResponse() {
    this->initializeModel();
}

OAIBatchResponse::~OAIBatchResponse() {}

void OAIBatchResponse::initializeModel() {

    m_batch_files_isSet = false;
    m_batch_files_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_process_info_isSet = false;
    m_process_info_isValid = false;

    m_scan_results_isSet = false;
    m_scan_results_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAIBatchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResponse::fromJsonObject(QJsonObject json) {

    m_batch_files_isValid = ::OpenAPI::fromJsonValue(batch_files, json[QString("batch_files")]);
    m_batch_files_isSet = !json[QString("batch_files")].isNull() && m_batch_files_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(batch_id, json[QString("batch_id")]);
    m_batch_id_isSet = !json[QString("batch_id")].isNull() && m_batch_id_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(is_closed, json[QString("is_closed")]);
    m_is_closed_isSet = !json[QString("is_closed")].isNull() && m_is_closed_isValid;

    m_process_info_isValid = ::OpenAPI::fromJsonValue(process_info, json[QString("process_info")]);
    m_process_info_isSet = !json[QString("process_info")].isNull() && m_process_info_isValid;

    m_scan_results_isValid = ::OpenAPI::fromJsonValue(scan_results, json[QString("scan_results")]);
    m_scan_results_isSet = !json[QString("scan_results")].isNull() && m_scan_results_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(user_data, json[QString("user_data")]);
    m_user_data_isSet = !json[QString("user_data")].isNull() && m_user_data_isValid;
}

QString OAIBatchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResponse::asJsonObject() const {
    QJsonObject obj;
    if (batch_files.isSet()) {
        obj.insert(QString("batch_files"), ::OpenAPI::toJsonValue(batch_files));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batch_id"), ::OpenAPI::toJsonValue(batch_id));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("is_closed"), ::OpenAPI::toJsonValue(is_closed));
    }
    if (process_info.isSet()) {
        obj.insert(QString("process_info"), ::OpenAPI::toJsonValue(process_info));
    }
    if (scan_results.isSet()) {
        obj.insert(QString("scan_results"), ::OpenAPI::toJsonValue(scan_results));
    }
    if (m_user_data_isSet) {
        obj.insert(QString("user_data"), ::OpenAPI::toJsonValue(user_data));
    }
    return obj;
}

OAIBatchResponse_batch_files OAIBatchResponse::getBatchFiles() const {
    return batch_files;
}
void OAIBatchResponse::setBatchFiles(const OAIBatchResponse_batch_files &batch_files) {
    this->batch_files = batch_files;
    this->m_batch_files_isSet = true;
}

QString OAIBatchResponse::getBatchId() const {
    return batch_id;
}
void OAIBatchResponse::setBatchId(const QString &batch_id) {
    this->batch_id = batch_id;
    this->m_batch_id_isSet = true;
}

bool OAIBatchResponse::isIsClosed() const {
    return is_closed;
}
void OAIBatchResponse::setIsClosed(const bool &is_closed) {
    this->is_closed = is_closed;
    this->m_is_closed_isSet = true;
}

OAIBatchResponse_process_info OAIBatchResponse::getProcessInfo() const {
    return process_info;
}
void OAIBatchResponse::setProcessInfo(const OAIBatchResponse_process_info &process_info) {
    this->process_info = process_info;
    this->m_process_info_isSet = true;
}

OAIBatchResponse_scan_results OAIBatchResponse::getScanResults() const {
    return scan_results;
}
void OAIBatchResponse::setScanResults(const OAIBatchResponse_scan_results &scan_results) {
    this->scan_results = scan_results;
    this->m_scan_results_isSet = true;
}

QString OAIBatchResponse::getUserData() const {
    return user_data;
}
void OAIBatchResponse::setUserData(const QString &user_data) {
    this->user_data = user_data;
    this->m_user_data_isSet = true;
}

bool OAIBatchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (batch_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (process_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (scan_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
