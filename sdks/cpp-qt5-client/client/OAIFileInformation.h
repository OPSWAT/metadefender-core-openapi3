/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileInformation.h
 *
 * basic information of the scanned file
 */

#ifndef OAIFileInformation_H
#define OAIFileInformation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFileInformation : public OAIObject {
public:
    OAIFileInformation();
    OAIFileInformation(QString json);
    ~OAIFileInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);

    qint32 getFileSize() const;
    void setFileSize(const qint32 &file_size);

    QString getFileType() const;
    void setFileType(const QString &file_type);

    QString getFileTypeDescription() const;
    void setFileTypeDescription(const QString &file_type_description);

    QString getMd5() const;
    void setMd5(const QString &md5);

    QString getSha1() const;
    void setSha1(const QString &sha1);

    QString getSha256() const;
    void setSha256(const QString &sha256);

    QString getUploadTimestamp() const;
    void setUploadTimestamp(const QString &upload_timestamp);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 file_size;
    bool m_file_size_isSet;
    bool m_file_size_isValid;

    QString file_type;
    bool m_file_type_isSet;
    bool m_file_type_isValid;

    QString file_type_description;
    bool m_file_type_description_isSet;
    bool m_file_type_description_isValid;

    QString md5;
    bool m_md5_isSet;
    bool m_md5_isValid;

    QString sha1;
    bool m_sha1_isSet;
    bool m_sha1_isValid;

    QString sha256;
    bool m_sha256_isSet;
    bool m_sha256_isValid;

    QString upload_timestamp;
    bool m_upload_timestamp_isSet;
    bool m_upload_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileInformation)

#endif // OAIFileInformation_H
