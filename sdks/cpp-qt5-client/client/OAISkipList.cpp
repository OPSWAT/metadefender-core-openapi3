/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkipList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkipList::OAISkipList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkipList::OAISkipList() {
    this->initializeModel();
}

OAISkipList::~OAISkipList() {}

void OAISkipList::initializeModel() {

    m_blacklist_isSet = false;
    m_blacklist_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_whitelist_isSet = false;
    m_whitelist_isValid = false;
}

void OAISkipList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkipList::fromJsonObject(QJsonObject json) {

    m_blacklist_isValid = ::OpenAPI::fromJsonValue(blacklist, json[QString("blacklist")]);
    m_blacklist_isSet = !json[QString("blacklist")].isNull() && m_blacklist_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_whitelist_isValid = ::OpenAPI::fromJsonValue(whitelist, json[QString("whitelist")]);
    m_whitelist_isSet = !json[QString("whitelist")].isNull() && m_whitelist_isValid;
}

QString OAISkipList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkipList::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklist_isSet) {
        obj.insert(QString("blacklist"), ::OpenAPI::toJsonValue(blacklist));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(skip));
    }
    if (m_whitelist_isSet) {
        obj.insert(QString("whitelist"), ::OpenAPI::toJsonValue(whitelist));
    }
    return obj;
}

OAIObject OAISkipList::getBlacklist() const {
    return blacklist;
}
void OAISkipList::setBlacklist(const OAIObject &blacklist) {
    this->blacklist = blacklist;
    this->m_blacklist_isSet = true;
}

OAIObject OAISkipList::getSkip() const {
    return skip;
}
void OAISkipList::setSkip(const OAIObject &skip) {
    this->skip = skip;
    this->m_skip_isSet = true;
}

OAIObject OAISkipList::getWhitelist() const {
    return whitelist;
}
void OAISkipList::setWhitelist(const OAIObject &whitelist) {
    this->whitelist = whitelist;
    this->m_whitelist_isSet = true;
}

bool OAISkipList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkipList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
