/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanResultEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanResultEnum::OAIScanResultEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanResultEnum::OAIScanResultEnum() {
    this->initializeModel();
}

OAIScanResultEnum::~OAIScanResultEnum() {}

void OAIScanResultEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIScanResultEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIScanResultEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanResultEnum::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanResultEnum::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanResultEnum::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanResultEnum::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAIScanResultEnum::_4;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIScanResultEnum::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAIScanResultEnum>(json.toInt());
}

QString OAIScanResultEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIScanResultEnum::_0:
            val = QString::number(0);
            break;
        case eOAIScanResultEnum::_1:
            val = QString::number(1);
            break;
        case eOAIScanResultEnum::_2:
            val = QString::number(2);
            break;
        case eOAIScanResultEnum::_3:
            val = QString::number(3);
            break;
        case eOAIScanResultEnum::_4:
            val = QString::number(4);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIScanResultEnum::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAIScanResultEnum::eOAIScanResultEnum OAIScanResultEnum::getValue() const {
    return m_value;
}

void OAIScanResultEnum::setValue(const OAIScanResultEnum::eOAIScanResultEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIScanResultEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIScanResultEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
