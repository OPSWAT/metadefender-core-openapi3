/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityResponse_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityResponse_result::OAIVulnerabilityResponse_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityResponse_result::OAIVulnerabilityResponse_result() {
    this->initializeModel();
}

OAIVulnerabilityResponse_result::~OAIVulnerabilityResponse_result() {}

void OAIVulnerabilityResponse_result::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;

    m_detected_product_isSet = false;
    m_detected_product_isValid = false;

    m_vulnerabilites_isSet = false;
    m_vulnerabilites_isValid = false;
}

void OAIVulnerabilityResponse_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityResponse_result::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;

    m_detected_product_isValid = ::OpenAPI::fromJsonValue(detected_product, json[QString("detected_product")]);
    m_detected_product_isSet = !json[QString("detected_product")].isNull() && m_detected_product_isValid;

    m_vulnerabilites_isValid = ::OpenAPI::fromJsonValue(vulnerabilites, json[QString("vulnerabilites")]);
    m_vulnerabilites_isSet = !json[QString("vulnerabilites")].isNull() && m_vulnerabilites_isValid;
}

QString OAIVulnerabilityResponse_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityResponse_result::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(hash));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(method));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(timestamp));
    }
    if (m_timing_isSet) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(timing));
    }
    if (detected_product.isSet()) {
        obj.insert(QString("detected_product"), ::OpenAPI::toJsonValue(detected_product));
    }
    if (vulnerabilites.size() > 0) {
        obj.insert(QString("vulnerabilites"), ::OpenAPI::toJsonValue(vulnerabilites));
    }
    return obj;
}

qint32 OAIVulnerabilityResponse_result::getCode() const {
    return code;
}
void OAIVulnerabilityResponse_result::setCode(const qint32 &code) {
    this->code = code;
    this->m_code_isSet = true;
}

QString OAIVulnerabilityResponse_result::getHash() const {
    return hash;
}
void OAIVulnerabilityResponse_result::setHash(const QString &hash) {
    this->hash = hash;
    this->m_hash_isSet = true;
}

qint32 OAIVulnerabilityResponse_result::getMethod() const {
    return method;
}
void OAIVulnerabilityResponse_result::setMethod(const qint32 &method) {
    this->method = method;
    this->m_method_isSet = true;
}

QString OAIVulnerabilityResponse_result::getTimestamp() const {
    return timestamp;
}
void OAIVulnerabilityResponse_result::setTimestamp(const QString &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

qint32 OAIVulnerabilityResponse_result::getTiming() const {
    return timing;
}
void OAIVulnerabilityResponse_result::setTiming(const qint32 &timing) {
    this->timing = timing;
    this->m_timing_isSet = true;
}

OAIVulnerabilityResponse_result_detected_product OAIVulnerabilityResponse_result::getDetectedProduct() const {
    return detected_product;
}
void OAIVulnerabilityResponse_result::setDetectedProduct(const OAIVulnerabilityResponse_result_detected_product &detected_product) {
    this->detected_product = detected_product;
    this->m_detected_product_isSet = true;
}

QList<OAIVulnerabilityResponse_result_vulnerabilites> OAIVulnerabilityResponse_result::getVulnerabilites() const {
    return vulnerabilites;
}
void OAIVulnerabilityResponse_result::setVulnerabilites(const QList<OAIVulnerabilityResponse_result_vulnerabilites> &vulnerabilites) {
    this->vulnerabilites = vulnerabilites;
    this->m_vulnerabilites_isSet = true;
}

bool OAIVulnerabilityResponse_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (detected_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (vulnerabilites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityResponse_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
