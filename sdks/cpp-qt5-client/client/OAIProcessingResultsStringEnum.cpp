/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingResultsStringEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingResultsStringEnum::OAIProcessingResultsStringEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingResultsStringEnum::OAIProcessingResultsStringEnum() {
    this->initializeModel();
}

OAIProcessingResultsStringEnum::~OAIProcessingResultsStringEnum() {}

void OAIProcessingResultsStringEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProcessingResultsStringEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProcessingResultsStringEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Threat Detected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::THREAT_DETECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Infected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::INFECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Suspicious", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::SUSPICIOUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cleaned / Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::CLEANED_DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Scan Skipped - Whitelisted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::SCAN_SKIPPED_WHITELISTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Scan Skipped - Blacklisted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::SCAN_SKIPPED_BLACKLISTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exceeded Archive Depth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_DEPTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Not Scanned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::NOT_SCANNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Encrypted Archive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::ENCRYPTED_ARCHIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exceeded Archive Size", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_SIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exceeded Archive File Number", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_FILE_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Password Protected Document", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::PASSWORD_PROTECTED_DOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exceeded Archive Timeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("File type Mismatch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::FILE_TYPE_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Potentially Vulnerable File", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::POTENTIALLY_VULNERABLE_FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sensitive data found", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::SENSITIVE_DATA_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Yara Rule Matched", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::YARA_RULE_MATCHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Potentially Unwanted Program", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::POTENTIALLY_UNWANTED_PROGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unsupported file type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::UNSUPPORTED_FILE_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("In Progress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessingResultsStringEnum::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProcessingResultsStringEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProcessingResultsStringEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProcessingResultsStringEnum::THREAT_DETECTED:
            val = "Threat Detected";
            break;
        case eOAIProcessingResultsStringEnum::INFECTED:
            val = "Infected";
            break;
        case eOAIProcessingResultsStringEnum::SUSPICIOUS:
            val = "Suspicious";
            break;
        case eOAIProcessingResultsStringEnum::FAILED:
            val = "Failed";
            break;
        case eOAIProcessingResultsStringEnum::CLEANED_DELETED:
            val = "Cleaned / Deleted";
            break;
        case eOAIProcessingResultsStringEnum::SCAN_SKIPPED_WHITELISTED:
            val = "Scan Skipped - Whitelisted";
            break;
        case eOAIProcessingResultsStringEnum::SCAN_SKIPPED_BLACKLISTED:
            val = "Scan Skipped - Blacklisted";
            break;
        case eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_DEPTH:
            val = "Exceeded Archive Depth";
            break;
        case eOAIProcessingResultsStringEnum::NOT_SCANNED:
            val = "Not Scanned";
            break;
        case eOAIProcessingResultsStringEnum::ENCRYPTED_ARCHIVE:
            val = "Encrypted Archive";
            break;
        case eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_SIZE:
            val = "Exceeded Archive Size";
            break;
        case eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_FILE_NUMBER:
            val = "Exceeded Archive File Number";
            break;
        case eOAIProcessingResultsStringEnum::PASSWORD_PROTECTED_DOCUMENT:
            val = "Password Protected Document";
            break;
        case eOAIProcessingResultsStringEnum::EXCEEDED_ARCHIVE_TIMEOUT:
            val = "Exceeded Archive Timeout";
            break;
        case eOAIProcessingResultsStringEnum::FILE_TYPE_MISMATCH:
            val = "File type Mismatch";
            break;
        case eOAIProcessingResultsStringEnum::POTENTIALLY_VULNERABLE_FILE:
            val = "Potentially Vulnerable File";
            break;
        case eOAIProcessingResultsStringEnum::CANCELED:
            val = "Canceled";
            break;
        case eOAIProcessingResultsStringEnum::SENSITIVE_DATA_FOUND:
            val = "Sensitive data found";
            break;
        case eOAIProcessingResultsStringEnum::YARA_RULE_MATCHED:
            val = "Yara Rule Matched";
            break;
        case eOAIProcessingResultsStringEnum::POTENTIALLY_UNWANTED_PROGRAM:
            val = "Potentially Unwanted Program";
            break;
        case eOAIProcessingResultsStringEnum::UNSUPPORTED_FILE_TYPE:
            val = "Unsupported file type";
            break;
        case eOAIProcessingResultsStringEnum::IN_PROGRESS:
            val = "In Progress";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProcessingResultsStringEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProcessingResultsStringEnum::eOAIProcessingResultsStringEnum OAIProcessingResultsStringEnum::getValue() const {
    return m_value;
}

void OAIProcessingResultsStringEnum::setValue(const OAIProcessingResultsStringEnum::eOAIProcessingResultsStringEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProcessingResultsStringEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIProcessingResultsStringEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
