/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminConfigUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminConfigUpdate::OAIAdminConfigUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminConfigUpdate::OAIAdminConfigUpdate() {
    this->initializeModel();
}

OAIAdminConfigUpdate::~OAIAdminConfigUpdate() {}

void OAIAdminConfigUpdate::initializeModel() {

    m_autoupdateperiod_isSet = false;
    m_autoupdateperiod_isValid = false;

    m_deleteafterimport_isSet = false;
    m_deleteafterimport_isValid = false;

    m_disabledupdate_isSet = false;
    m_disabledupdate_isValid = false;

    m_pickupfolder_isSet = false;
    m_pickupfolder_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIAdminConfigUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminConfigUpdate::fromJsonObject(QJsonObject json) {

    m_autoupdateperiod_isValid = ::OpenAPI::fromJsonValue(autoupdateperiod, json[QString("autoupdateperiod")]);
    m_autoupdateperiod_isSet = !json[QString("autoupdateperiod")].isNull() && m_autoupdateperiod_isValid;

    m_deleteafterimport_isValid = ::OpenAPI::fromJsonValue(deleteafterimport, json[QString("deleteafterimport")]);
    m_deleteafterimport_isSet = !json[QString("deleteafterimport")].isNull() && m_deleteafterimport_isValid;

    m_disabledupdate_isValid = ::OpenAPI::fromJsonValue(disabledupdate, json[QString("disabledupdate")]);
    m_disabledupdate_isSet = !json[QString("disabledupdate")].isNull() && m_disabledupdate_isValid;

    m_pickupfolder_isValid = ::OpenAPI::fromJsonValue(pickupfolder, json[QString("pickupfolder")]);
    m_pickupfolder_isSet = !json[QString("pickupfolder")].isNull() && m_pickupfolder_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIAdminConfigUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminConfigUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_autoupdateperiod_isSet) {
        obj.insert(QString("autoupdateperiod"), ::OpenAPI::toJsonValue(autoupdateperiod));
    }
    if (m_deleteafterimport_isSet) {
        obj.insert(QString("deleteafterimport"), ::OpenAPI::toJsonValue(deleteafterimport));
    }
    if (disabledupdate.size() > 0) {
        obj.insert(QString("disabledupdate"), ::OpenAPI::toJsonValue(disabledupdate));
    }
    if (m_pickupfolder_isSet) {
        obj.insert(QString("pickupfolder"), ::OpenAPI::toJsonValue(pickupfolder));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(source));
    }
    return obj;
}

qint32 OAIAdminConfigUpdate::getAutoupdateperiod() const {
    return autoupdateperiod;
}
void OAIAdminConfigUpdate::setAutoupdateperiod(const qint32 &autoupdateperiod) {
    this->autoupdateperiod = autoupdateperiod;
    this->m_autoupdateperiod_isSet = true;
}

bool OAIAdminConfigUpdate::isDeleteafterimport() const {
    return deleteafterimport;
}
void OAIAdminConfigUpdate::setDeleteafterimport(const bool &deleteafterimport) {
    this->deleteafterimport = deleteafterimport;
    this->m_deleteafterimport_isSet = true;
}

QList<OAIAdminConfigUpdate_disabledupdate> OAIAdminConfigUpdate::getDisabledupdate() const {
    return disabledupdate;
}
void OAIAdminConfigUpdate::setDisabledupdate(const QList<OAIAdminConfigUpdate_disabledupdate> &disabledupdate) {
    this->disabledupdate = disabledupdate;
    this->m_disabledupdate_isSet = true;
}

QString OAIAdminConfigUpdate::getPickupfolder() const {
    return pickupfolder;
}
void OAIAdminConfigUpdate::setPickupfolder(const QString &pickupfolder) {
    this->pickupfolder = pickupfolder;
    this->m_pickupfolder_isSet = true;
}

QString OAIAdminConfigUpdate::getSource() const {
    return source;
}
void OAIAdminConfigUpdate::setSource(const QString &source) {
    this->source = source;
    this->m_source_isSet = true;
}

bool OAIAdminConfigUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoupdateperiod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleteafterimport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (disabledupdate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickupfolder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminConfigUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
