/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigApi_H
#define OAI_OAIConfigApi_H

#include "OAIHttpRequest.h"

#include "OAIAdminConfigSession.h"
#include "OAIAdminConfigUpdate.h"
#include "OAIAdminConfigWebhook.h"
#include "OAIInline_object_1.h"
#include "OAIInline_response_200.h"
#include "OAIInline_response_200_1.h"
#include "OAIInline_response_500.h"
#include "OAIObject.h"
#include "OAISkipList.h"
#include "UNKNOWN_BASE_TYPE.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIConfigApi : public QObject {
    Q_OBJECT

public:
    OAIConfigApi(const QString &scheme = "http", const QString &host = "localhost", int port = 8008, const QString &basePath = "", const int timeOut = 0);
    ~OAIConfigApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void configAuditLog(const QString &apikey, const UNKNOWN_BASE_TYPE &unknown_base_type);
    void configGetSkipHash(const QString &apikey);
    void configQuarantine(const QString &apikey, const UNKNOWN_BASE_TYPE &unknown_base_type);
    void configSanitizedRepo(const QString &apikey, const OAIInline_object_1 &oai_inline_object_1);
    void configScanHistory(const QString &apikey, const UNKNOWN_BASE_TYPE &unknown_base_type);
    void configSession(const QString &apikey, const OAIAdminConfigSession &oai_admin_config_session);
    void configUpdate(const QString &apikey, const OAIAdminConfigUpdate &oai_admin_config_update);
    void configUpdateSkipHash(const QString &apikey, const OAISkipList &oai_skip_list);
    void configUpdateWebhook(const QString &apikey, const OAIAdminConfigWebhook &oai_admin_config_webhook);
    void configWebhook(const QString &apikey);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void configAuditLogCallback(OAIHttpRequestWorker *worker);
    void configGetSkipHashCallback(OAIHttpRequestWorker *worker);
    void configQuarantineCallback(OAIHttpRequestWorker *worker);
    void configSanitizedRepoCallback(OAIHttpRequestWorker *worker);
    void configScanHistoryCallback(OAIHttpRequestWorker *worker);
    void configSessionCallback(OAIHttpRequestWorker *worker);
    void configUpdateCallback(OAIHttpRequestWorker *worker);
    void configUpdateSkipHashCallback(OAIHttpRequestWorker *worker);
    void configUpdateWebhookCallback(OAIHttpRequestWorker *worker);
    void configWebhookCallback(OAIHttpRequestWorker *worker);

signals:

    void configAuditLogSignal(OAIInline_response_200 summary);
    void configGetSkipHashSignal(OAISkipList summary);
    void configQuarantineSignal(OAIInline_response_200 summary);
    void configSanitizedRepoSignal(OAIInline_response_200_1 summary);
    void configScanHistorySignal(OAIInline_response_200 summary);
    void configSessionSignal(OAIAdminConfigSession summary);
    void configUpdateSignal(OAIAdminConfigUpdate summary);
    void configUpdateSkipHashSignal(OAISkipList summary);
    void configUpdateWebhookSignal(OAIAdminConfigWebhook summary);
    void configWebhookSignal(OAIAdminConfigWebhook summary);

    void configAuditLogSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200 summary);
    void configGetSkipHashSignalFull(OAIHttpRequestWorker *worker, OAISkipList summary);
    void configQuarantineSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200 summary);
    void configSanitizedRepoSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_1 summary);
    void configScanHistorySignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200 summary);
    void configSessionSignalFull(OAIHttpRequestWorker *worker, OAIAdminConfigSession summary);
    void configUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAdminConfigUpdate summary);
    void configUpdateSkipHashSignalFull(OAIHttpRequestWorker *worker, OAISkipList summary);
    void configUpdateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIAdminConfigWebhook summary);
    void configWebhookSignalFull(OAIHttpRequestWorker *worker, OAIAdminConfigWebhook summary);

    void configAuditLogSignalE(OAIInline_response_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetSkipHashSignalE(OAISkipList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configQuarantineSignalE(OAIInline_response_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configSanitizedRepoSignalE(OAIInline_response_200_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configScanHistorySignalE(OAIInline_response_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configSessionSignalE(OAIAdminConfigSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateSignalE(OAIAdminConfigUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateSkipHashSignalE(OAISkipList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateWebhookSignalE(OAIAdminConfigWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configWebhookSignalE(OAIAdminConfigWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);

    void configAuditLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configGetSkipHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configQuarantineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configSanitizedRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configScanHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateSkipHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configUpdateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
