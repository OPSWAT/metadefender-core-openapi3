/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityResponse_result_detected_product.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityResponse_result_detected_product::OAIVulnerabilityResponse_result_detected_product(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityResponse_result_detected_product::OAIVulnerabilityResponse_result_detected_product() {
    this->initializeModel();
}

OAIVulnerabilityResponse_result_detected_product::~OAIVulnerabilityResponse_result_detected_product() {}

void OAIVulnerabilityResponse_result_detected_product::initializeModel() {

    m_has_vulnerability_isSet = false;
    m_has_vulnerability_isValid = false;

    m_is_current_isSet = false;
    m_is_current_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_remediation_link_isSet = false;
    m_remediation_link_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_sig_name_isSet = false;
    m_sig_name_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_data_isSet = false;
    m_version_data_isValid = false;
}

void OAIVulnerabilityResponse_result_detected_product::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityResponse_result_detected_product::fromJsonObject(QJsonObject json) {

    m_has_vulnerability_isValid = ::OpenAPI::fromJsonValue(has_vulnerability, json[QString("has_vulnerability")]);
    m_has_vulnerability_isSet = !json[QString("has_vulnerability")].isNull() && m_has_vulnerability_isValid;

    m_is_current_isValid = ::OpenAPI::fromJsonValue(is_current, json[QString("is_current")]);
    m_is_current_isSet = !json[QString("is_current")].isNull() && m_is_current_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_remediation_link_isValid = ::OpenAPI::fromJsonValue(remediation_link, json[QString("remediation_link")]);
    m_remediation_link_isSet = !json[QString("remediation_link")].isNull() && m_remediation_link_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_sig_name_isValid = ::OpenAPI::fromJsonValue(sig_name, json[QString("sig_name")]);
    m_sig_name_isSet = !json[QString("sig_name")].isNull() && m_sig_name_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_data_isValid = ::OpenAPI::fromJsonValue(version_data, json[QString("version_data")]);
    m_version_data_isSet = !json[QString("version_data")].isNull() && m_version_data_isValid;
}

QString OAIVulnerabilityResponse_result_detected_product::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityResponse_result_detected_product::asJsonObject() const {
    QJsonObject obj;
    if (m_has_vulnerability_isSet) {
        obj.insert(QString("has_vulnerability"), ::OpenAPI::toJsonValue(has_vulnerability));
    }
    if (m_is_current_isSet) {
        obj.insert(QString("is_current"), ::OpenAPI::toJsonValue(is_current));
    }
    if (product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(product));
    }
    if (m_remediation_link_isSet) {
        obj.insert(QString("remediation_link"), ::OpenAPI::toJsonValue(remediation_link));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(severity));
    }
    if (m_sig_name_isSet) {
        obj.insert(QString("sig_name"), ::OpenAPI::toJsonValue(sig_name));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(signature));
    }
    if (vendor.isSet()) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(vendor));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(version));
    }
    if (version_data.isSet()) {
        obj.insert(QString("version_data"), ::OpenAPI::toJsonValue(version_data));
    }
    return obj;
}

bool OAIVulnerabilityResponse_result_detected_product::isHasVulnerability() const {
    return has_vulnerability;
}
void OAIVulnerabilityResponse_result_detected_product::setHasVulnerability(const bool &has_vulnerability) {
    this->has_vulnerability = has_vulnerability;
    this->m_has_vulnerability_isSet = true;
}

bool OAIVulnerabilityResponse_result_detected_product::isIsCurrent() const {
    return is_current;
}
void OAIVulnerabilityResponse_result_detected_product::setIsCurrent(const bool &is_current) {
    this->is_current = is_current;
    this->m_is_current_isSet = true;
}

OAIVulnerabilityResponse_result_detected_product_product OAIVulnerabilityResponse_result_detected_product::getProduct() const {
    return product;
}
void OAIVulnerabilityResponse_result_detected_product::setProduct(const OAIVulnerabilityResponse_result_detected_product_product &product) {
    this->product = product;
    this->m_product_isSet = true;
}

QString OAIVulnerabilityResponse_result_detected_product::getRemediationLink() const {
    return remediation_link;
}
void OAIVulnerabilityResponse_result_detected_product::setRemediationLink(const QString &remediation_link) {
    this->remediation_link = remediation_link;
    this->m_remediation_link_isSet = true;
}

QString OAIVulnerabilityResponse_result_detected_product::getSeverity() const {
    return severity;
}
void OAIVulnerabilityResponse_result_detected_product::setSeverity(const QString &severity) {
    this->severity = severity;
    this->m_severity_isSet = true;
}

QString OAIVulnerabilityResponse_result_detected_product::getSigName() const {
    return sig_name;
}
void OAIVulnerabilityResponse_result_detected_product::setSigName(const QString &sig_name) {
    this->sig_name = sig_name;
    this->m_sig_name_isSet = true;
}

qint32 OAIVulnerabilityResponse_result_detected_product::getSignature() const {
    return signature;
}
void OAIVulnerabilityResponse_result_detected_product::setSignature(const qint32 &signature) {
    this->signature = signature;
    this->m_signature_isSet = true;
}

OAIVulnerabilityResponse_result_detected_product_vendor OAIVulnerabilityResponse_result_detected_product::getVendor() const {
    return vendor;
}
void OAIVulnerabilityResponse_result_detected_product::setVendor(const OAIVulnerabilityResponse_result_detected_product_vendor &vendor) {
    this->vendor = vendor;
    this->m_vendor_isSet = true;
}

QString OAIVulnerabilityResponse_result_detected_product::getVersion() const {
    return version;
}
void OAIVulnerabilityResponse_result_detected_product::setVersion(const QString &version) {
    this->version = version;
    this->m_version_isSet = true;
}

OAIVulnerabilityResponse_result_detected_product_version_data OAIVulnerabilityResponse_result_detected_product::getVersionData() const {
    return version_data;
}
void OAIVulnerabilityResponse_result_detected_product::setVersionData(const OAIVulnerabilityResponse_result_detected_product_version_data &version_data) {
    this->version_data = version_data;
    this->m_version_data_isSet = true;
}

bool OAIVulnerabilityResponse_result_detected_product::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_vulnerability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (version_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityResponse_result_detected_product::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
