/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseInformation::OAILicenseInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseInformation::OAILicenseInformation() {
    this->initializeModel();
}

OAILicenseInformation::~OAILicenseInformation() {}

void OAILicenseInformation::initializeModel() {

    m_days_left_isSet = false;
    m_days_left_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_licensed_engines_isSet = false;
    m_licensed_engines_isValid = false;

    m_max_node_count_isSet = false;
    m_max_node_count_isValid = false;

    m_online_activated_isSet = false;
    m_online_activated_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;
}

void OAILicenseInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseInformation::fromJsonObject(QJsonObject json) {

    m_days_left_isValid = ::OpenAPI::fromJsonValue(days_left, json[QString("days_left")]);
    m_days_left_isSet = !json[QString("days_left")].isNull() && m_days_left_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_licensed_engines_isValid = ::OpenAPI::fromJsonValue(licensed_engines, json[QString("licensed_engines")]);
    m_licensed_engines_isSet = !json[QString("licensed_engines")].isNull() && m_licensed_engines_isValid;

    m_max_node_count_isValid = ::OpenAPI::fromJsonValue(max_node_count, json[QString("max_node_count")]);
    m_max_node_count_isSet = !json[QString("max_node_count")].isNull() && m_max_node_count_isValid;

    m_online_activated_isValid = ::OpenAPI::fromJsonValue(online_activated, json[QString("online_activated")]);
    m_online_activated_isSet = !json[QString("online_activated")].isNull() && m_online_activated_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(product_name, json[QString("product_name")]);
    m_product_name_isSet = !json[QString("product_name")].isNull() && m_product_name_isValid;
}

QString OAILicenseInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_days_left_isSet) {
        obj.insert(QString("days_left"), ::OpenAPI::toJsonValue(days_left));
    }
    if (m_deployment_isSet) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(deployment));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(expiration));
    }
    if (licensed_engines.size() > 0) {
        obj.insert(QString("licensed_engines"), ::OpenAPI::toJsonValue(licensed_engines));
    }
    if (m_max_node_count_isSet) {
        obj.insert(QString("max_node_count"), ::OpenAPI::toJsonValue(max_node_count));
    }
    if (m_online_activated_isSet) {
        obj.insert(QString("online_activated"), ::OpenAPI::toJsonValue(online_activated));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("product_name"), ::OpenAPI::toJsonValue(product_name));
    }
    return obj;
}

qint32 OAILicenseInformation::getDaysLeft() const {
    return days_left;
}
void OAILicenseInformation::setDaysLeft(const qint32 &days_left) {
    this->days_left = days_left;
    this->m_days_left_isSet = true;
}

QString OAILicenseInformation::getDeployment() const {
    return deployment;
}
void OAILicenseInformation::setDeployment(const QString &deployment) {
    this->deployment = deployment;
    this->m_deployment_isSet = true;
}

QString OAILicenseInformation::getExpiration() const {
    return expiration;
}
void OAILicenseInformation::setExpiration(const QString &expiration) {
    this->expiration = expiration;
    this->m_expiration_isSet = true;
}

QList<QString> OAILicenseInformation::getLicensedEngines() const {
    return licensed_engines;
}
void OAILicenseInformation::setLicensedEngines(const QList<QString> &licensed_engines) {
    this->licensed_engines = licensed_engines;
    this->m_licensed_engines_isSet = true;
}

QString OAILicenseInformation::getMaxNodeCount() const {
    return max_node_count;
}
void OAILicenseInformation::setMaxNodeCount(const QString &max_node_count) {
    this->max_node_count = max_node_count;
    this->m_max_node_count_isSet = true;
}

bool OAILicenseInformation::isOnlineActivated() const {
    return online_activated;
}
void OAILicenseInformation::setOnlineActivated(const bool &online_activated) {
    this->online_activated = online_activated;
    this->m_online_activated_isSet = true;
}

QString OAILicenseInformation::getProductId() const {
    return product_id;
}
void OAILicenseInformation::setProductId(const QString &product_id) {
    this->product_id = product_id;
    this->m_product_id_isSet = true;
}

QString OAILicenseInformation::getProductName() const {
    return product_name;
}
void OAILicenseInformation::setProductName(const QString &product_name) {
    this->product_name = product_name;
    this->m_product_name_isSet = true;
}

bool OAILicenseInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (licensed_engines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
