/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityResponse_result_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityResponse_result_details::OAIVulnerabilityResponse_result_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityResponse_result_details::OAIVulnerabilityResponse_result_details() {
    this->initializeModel();
}

OAIVulnerabilityResponse_result_details::~OAIVulnerabilityResponse_result_details() {}

void OAIVulnerabilityResponse_result_details::initializeModel() {

    m_cpe_isSet = false;
    m_cpe_isValid = false;

    m_cve_isSet = false;
    m_cve_isValid = false;

    m_cvss_isSet = false;
    m_cvss_isValid = false;

    m_cwe_isSet = false;
    m_cwe_isValid = false;

    m_last_modified_epoch_isSet = false;
    m_last_modified_epoch_isValid = false;

    m_published_epoch_isSet = false;
    m_published_epoch_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;
}

void OAIVulnerabilityResponse_result_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityResponse_result_details::fromJsonObject(QJsonObject json) {

    m_cpe_isValid = ::OpenAPI::fromJsonValue(cpe, json[QString("cpe")]);
    m_cpe_isSet = !json[QString("cpe")].isNull() && m_cpe_isValid;

    m_cve_isValid = ::OpenAPI::fromJsonValue(cve, json[QString("cve")]);
    m_cve_isSet = !json[QString("cve")].isNull() && m_cve_isValid;

    m_cvss_isValid = ::OpenAPI::fromJsonValue(cvss, json[QString("cvss")]);
    m_cvss_isSet = !json[QString("cvss")].isNull() && m_cvss_isValid;

    m_cwe_isValid = ::OpenAPI::fromJsonValue(cwe, json[QString("cwe")]);
    m_cwe_isSet = !json[QString("cwe")].isNull() && m_cwe_isValid;

    m_last_modified_epoch_isValid = ::OpenAPI::fromJsonValue(last_modified_epoch, json[QString("last_modified_epoch")]);
    m_last_modified_epoch_isSet = !json[QString("last_modified_epoch")].isNull() && m_last_modified_epoch_isValid;

    m_published_epoch_isValid = ::OpenAPI::fromJsonValue(published_epoch, json[QString("published-epoch")]);
    m_published_epoch_isSet = !json[QString("published-epoch")].isNull() && m_published_epoch_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;
}

QString OAIVulnerabilityResponse_result_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityResponse_result_details::asJsonObject() const {
    QJsonObject obj;
    if (m_cpe_isSet) {
        obj.insert(QString("cpe"), ::OpenAPI::toJsonValue(cpe));
    }
    if (m_cve_isSet) {
        obj.insert(QString("cve"), ::OpenAPI::toJsonValue(cve));
    }
    if (cvss.isSet()) {
        obj.insert(QString("cvss"), ::OpenAPI::toJsonValue(cvss));
    }
    if (m_cwe_isSet) {
        obj.insert(QString("cwe"), ::OpenAPI::toJsonValue(cwe));
    }
    if (m_last_modified_epoch_isSet) {
        obj.insert(QString("last_modified_epoch"), ::OpenAPI::toJsonValue(last_modified_epoch));
    }
    if (m_published_epoch_isSet) {
        obj.insert(QString("published-epoch"), ::OpenAPI::toJsonValue(published_epoch));
    }
    if (references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(references));
    }
    return obj;
}

QString OAIVulnerabilityResponse_result_details::getCpe() const {
    return cpe;
}
void OAIVulnerabilityResponse_result_details::setCpe(const QString &cpe) {
    this->cpe = cpe;
    this->m_cpe_isSet = true;
}

QString OAIVulnerabilityResponse_result_details::getCve() const {
    return cve;
}
void OAIVulnerabilityResponse_result_details::setCve(const QString &cve) {
    this->cve = cve;
    this->m_cve_isSet = true;
}

OAIVulnerabilityResponse_result_details_cvss OAIVulnerabilityResponse_result_details::getCvss() const {
    return cvss;
}
void OAIVulnerabilityResponse_result_details::setCvss(const OAIVulnerabilityResponse_result_details_cvss &cvss) {
    this->cvss = cvss;
    this->m_cvss_isSet = true;
}

QString OAIVulnerabilityResponse_result_details::getCwe() const {
    return cwe;
}
void OAIVulnerabilityResponse_result_details::setCwe(const QString &cwe) {
    this->cwe = cwe;
    this->m_cwe_isSet = true;
}

QString OAIVulnerabilityResponse_result_details::getLastModifiedEpoch() const {
    return last_modified_epoch;
}
void OAIVulnerabilityResponse_result_details::setLastModifiedEpoch(const QString &last_modified_epoch) {
    this->last_modified_epoch = last_modified_epoch;
    this->m_last_modified_epoch_isSet = true;
}

QString OAIVulnerabilityResponse_result_details::getPublishedEpoch() const {
    return published_epoch;
}
void OAIVulnerabilityResponse_result_details::setPublishedEpoch(const QString &published_epoch) {
    this->published_epoch = published_epoch;
    this->m_published_epoch_isSet = true;
}

QList<QString> OAIVulnerabilityResponse_result_details::getReferences() const {
    return references;
}
void OAIVulnerabilityResponse_result_details::setReferences(const QList<QString> &references) {
    this->references = references;
    this->m_references_isSet = true;
}

bool OAIVulnerabilityResponse_result_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (cvss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (references.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityResponse_result_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
