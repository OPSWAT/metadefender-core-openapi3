/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserResponse::OAIUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserResponse::OAIUserResponse() {
    this->initializeModel();
}

OAIUserResponse::~OAIUserResponse() {}

void OAIUserResponse::initializeModel() {

    m_apikey_isSet = false;
    m_apikey_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_ui_settings_isSet = false;
    m_ui_settings_isValid = false;
}

void OAIUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserResponse::fromJsonObject(QJsonObject json) {

    m_apikey_isValid = ::OpenAPI::fromJsonValue(apikey, json[QString("apikey")]);
    m_apikey_isSet = !json[QString("apikey")].isNull() && m_apikey_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(directory_id, json[QString("directory_id")]);
    m_directory_id_isSet = !json[QString("directory_id")].isNull() && m_directory_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_ui_settings_isValid = ::OpenAPI::fromJsonValue(ui_settings, json[QString("ui_settings")]);
    m_ui_settings_isSet = !json[QString("ui_settings")].isNull() && m_ui_settings_isValid;
}

QString OAIUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_apikey_isSet) {
        obj.insert(QString("apikey"), ::OpenAPI::toJsonValue(apikey));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("directory_id"), ::OpenAPI::toJsonValue(directory_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    if (m_ui_settings_isSet) {
        obj.insert(QString("ui_settings"), ::OpenAPI::toJsonValue(ui_settings));
    }
    return obj;
}

QString OAIUserResponse::getApikey() const {
    return apikey;
}
void OAIUserResponse::setApikey(const QString &apikey) {
    this->apikey = apikey;
    this->m_apikey_isSet = true;
}

qint32 OAIUserResponse::getDirectoryId() const {
    return directory_id;
}
void OAIUserResponse::setDirectoryId(const qint32 &directory_id) {
    this->directory_id = directory_id;
    this->m_directory_id_isSet = true;
}

QString OAIUserResponse::getDisplayName() const {
    return display_name;
}
void OAIUserResponse::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

QString OAIUserResponse::getEmail() const {
    return email;
}
void OAIUserResponse::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

QString OAIUserResponse::getName() const {
    return name;
}
void OAIUserResponse::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

QList<QString> OAIUserResponse::getRoles() const {
    return roles;
}
void OAIUserResponse::setRoles(const QList<QString> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

OAIObject OAIUserResponse::getUiSettings() const {
    return ui_settings;
}
void OAIUserResponse::setUiSettings(const OAIObject &ui_settings) {
    this->ui_settings = ui_settings;
    this->m_ui_settings_isSet = true;
}

bool OAIUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apikey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_settings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
