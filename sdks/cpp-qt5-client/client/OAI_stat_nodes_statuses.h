/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_stat_nodes_statuses.h
 *
 * Node status
 */

#ifndef OAI_stat_nodes_statuses_H
#define OAI_stat_nodes_statuses_H

#include <QJsonObject>

#include "OAI_stat_nodes_engines.h"
#include "OAI_stat_nodes_issues.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_stat_nodes_statuses : public OAIObject {
public:
    OAI_stat_nodes_statuses();
    OAI_stat_nodes_statuses(QString json);
    ~OAI_stat_nodes_statuses() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);

    qint32 getCpuCores() const;
    void setCpuCores(const qint32 &cpu_cores);

    QList<OAI_stat_nodes_engines> getEngines() const;
    void setEngines(const QList<OAI_stat_nodes_engines> &engines);

    qint32 getFreeDiskSpace() const;
    void setFreeDiskSpace(const qint32 &free_disk_space);

    QString getId() const;
    void setId(const QString &id);

    QList<OAI_stat_nodes_issues> getIssues() const;
    void setIssues(const QList<OAI_stat_nodes_issues> &issues);

    qint32 getLoad() const;
    void setLoad(const qint32 &load);

    QString getOs() const;
    void setOs(const QString &os);

    qint32 getScanQueue() const;
    void setScanQueue(const qint32 &scan_queue);

    qint32 getTotalMemory() const;
    void setTotalMemory(const qint32 &total_memory);

    QString getVersion() const;
    void setVersion(const QString &version);

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString address;
    bool m_address_isSet;
    bool m_address_isValid;

    qint32 cpu_cores;
    bool m_cpu_cores_isSet;
    bool m_cpu_cores_isValid;

    QList<OAI_stat_nodes_engines> engines;
    bool m_engines_isSet;
    bool m_engines_isValid;

    qint32 free_disk_space;
    bool m_free_disk_space_isSet;
    bool m_free_disk_space_isValid;

    QString id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAI_stat_nodes_issues> issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    qint32 load;
    bool m_load_isSet;
    bool m_load_isValid;

    QString os;
    bool m_os_isSet;
    bool m_os_isValid;

    qint32 scan_queue;
    bool m_scan_queue_isSet;
    bool m_scan_queue_isValid;

    qint32 total_memory;
    bool m_total_memory_isSet;
    bool m_total_memory_isValid;

    QString version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_stat_nodes_statuses)

#endif // OAI_stat_nodes_statuses_H
