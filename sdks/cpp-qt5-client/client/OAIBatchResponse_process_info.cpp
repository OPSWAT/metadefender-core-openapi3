/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResponse_process_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResponse_process_info::OAIBatchResponse_process_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResponse_process_info::OAIBatchResponse_process_info() {
    this->initializeModel();
}

OAIBatchResponse_process_info::~OAIBatchResponse_process_info() {}

void OAIBatchResponse_process_info::initializeModel() {

    m_blocked_reason_isSet = false;
    m_blocked_reason_isValid = false;

    m_file_type_skipped_scan_isSet = false;
    m_file_type_skipped_scan_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIBatchResponse_process_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResponse_process_info::fromJsonObject(QJsonObject json) {

    m_blocked_reason_isValid = ::OpenAPI::fromJsonValue(blocked_reason, json[QString("blocked_reason")]);
    m_blocked_reason_isSet = !json[QString("blocked_reason")].isNull() && m_blocked_reason_isValid;

    m_file_type_skipped_scan_isValid = ::OpenAPI::fromJsonValue(file_type_skipped_scan, json[QString("file_type_skipped_scan")]);
    m_file_type_skipped_scan_isSet = !json[QString("file_type_skipped_scan")].isNull() && m_file_type_skipped_scan_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIBatchResponse_process_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResponse_process_info::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_reason_isSet) {
        obj.insert(QString("blocked_reason"), ::OpenAPI::toJsonValue(blocked_reason));
    }
    if (m_file_type_skipped_scan_isSet) {
        obj.insert(QString("file_type_skipped_scan"), ::OpenAPI::toJsonValue(file_type_skipped_scan));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(profile));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(result));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(user_agent));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    return obj;
}

QString OAIBatchResponse_process_info::getBlockedReason() const {
    return blocked_reason;
}
void OAIBatchResponse_process_info::setBlockedReason(const QString &blocked_reason) {
    this->blocked_reason = blocked_reason;
    this->m_blocked_reason_isSet = true;
}

bool OAIBatchResponse_process_info::isFileTypeSkippedScan() const {
    return file_type_skipped_scan;
}
void OAIBatchResponse_process_info::setFileTypeSkippedScan(const bool &file_type_skipped_scan) {
    this->file_type_skipped_scan = file_type_skipped_scan;
    this->m_file_type_skipped_scan_isSet = true;
}

QString OAIBatchResponse_process_info::getProfile() const {
    return profile;
}
void OAIBatchResponse_process_info::setProfile(const QString &profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}

QString OAIBatchResponse_process_info::getResult() const {
    return result;
}
void OAIBatchResponse_process_info::setResult(const QString &result) {
    this->result = result;
    this->m_result_isSet = true;
}

QString OAIBatchResponse_process_info::getUserAgent() const {
    return user_agent;
}
void OAIBatchResponse_process_info::setUserAgent(const QString &user_agent) {
    this->user_agent = user_agent;
    this->m_user_agent_isSet = true;
}

QString OAIBatchResponse_process_info::getUsername() const {
    return username;
}
void OAIBatchResponse_process_info::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIBatchResponse_process_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_skipped_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResponse_process_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
