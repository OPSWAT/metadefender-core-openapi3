/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAnalysisApi::OAIAnalysisApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIAnalysisApi::~OAIAnalysisApi() {
}

void OAIAnalysisApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIAnalysisApi::setHost(const QString &host) {
    _host = host;
}

void OAIAnalysisApi::setPort(int port) {
    _port = port;
}

void OAIAnalysisApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIAnalysisApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAnalysisApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAnalysisApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIAnalysisApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIAnalysisApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIAnalysisApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIAnalysisApi::analysisRules(const QString &user_agent) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file/rules");

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (user_agent != nullptr) {
        input.headers.insert("user_agent", user_agent);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::analysisRulesCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::analysisRulesCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QList<OAIInline_response_200_10> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAIInline_response_200_10 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit analysisRulesSignal(output);
        emit analysisRulesSignalFull(worker, output);
    } else {
        emit analysisRulesSignalE(output, error_type, error_str);
        emit analysisRulesSignalEFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::fileAnalysisCancel(const QString &data_id, const QString &apikey) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file/{data_id}/cancel");
    QString data_idPathParam("{");
    data_idPathParam.append("data_id").append("}");
    fullPath.replace(data_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(data_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (apikey != nullptr) {
        input.headers.insert("apikey", apikey);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::fileAnalysisCancelCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::fileAnalysisCancelCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit fileAnalysisCancelSignal(output);
        emit fileAnalysisCancelSignalFull(worker, output);
    } else {
        emit fileAnalysisCancelSignalE(output, error_type, error_str);
        emit fileAnalysisCancelSignalEFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::fileAnalysisGet(const QString &data_id, const QString &apikey) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file/{data_id}");
    QString data_idPathParam("{");
    data_idPathParam.append("data_id").append("}");
    fullPath.replace(data_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(data_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (apikey != nullptr) {
        input.headers.insert("apikey", apikey);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::fileAnalysisGetCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::fileAnalysisGetCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIAnalysisResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit fileAnalysisGetSignal(output);
        emit fileAnalysisGetSignalFull(worker, output);
    } else {
        emit fileAnalysisGetSignalE(output, error_type, error_str);
        emit fileAnalysisGetSignalEFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::fileAnalysisPost(const QString &apikey, const QString &filename, const QString &filepath, const QString &user_agent, const QString &rule, const QString &workflow, const QString &batch, const QString &archivepwd, const QString &metadata, const QString &callbackurl, const OAIHttpFileElement &body) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file");

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");
input.headers.insert("Content-Type", "application/octet-stream");
    QByteArray output = body.asByteArray();
    input.request_body.append(output);

    if (apikey != nullptr) {
        input.headers.insert("apikey", apikey);
    }

    if (filename != nullptr) {
        input.headers.insert("filename", filename);
    }

    if (filepath != nullptr) {
        input.headers.insert("filepath", filepath);
    }

    if (user_agent != nullptr) {
        input.headers.insert("user_agent", user_agent);
    }

    if (rule != nullptr) {
        input.headers.insert("rule", rule);
    }

    if (workflow != nullptr) {
        input.headers.insert("workflow", workflow);
    }

    if (batch != nullptr) {
        input.headers.insert("batch", batch);
    }

    if (archivepwd != nullptr) {
        input.headers.insert("archivepwd", archivepwd);
    }

    if (metadata != nullptr) {
        input.headers.insert("metadata", metadata);
    }

    if (callbackurl != nullptr) {
        input.headers.insert("callbackurl", callbackurl);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::fileAnalysisPostCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::fileAnalysisPostCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_8 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit fileAnalysisPostSignal(output);
        emit fileAnalysisPostSignalFull(worker, output);
    } else {
        emit fileAnalysisPostSignalE(output, error_type, error_str);
        emit fileAnalysisPostSignalEFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::sanitizedFile(const QString &data_id, const QString &apikey) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file/converted/{data_id}");
    QString data_idPathParam("{");
    data_idPathParam.append("data_id").append("}");
    fullPath.replace(data_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(data_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (apikey != nullptr) {
        input.headers.insert("apikey", apikey);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::sanitizedFileCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::sanitizedFileCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sanitizedFileSignal(output);
        emit sanitizedFileSignalFull(worker, output);
    } else {
        emit sanitizedFileSignalE(output, error_type, error_str);
        emit sanitizedFileSignalEFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::webhookStatus(const QString &data_id, const QString &apikey) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/file/webhook/{data_id}");
    QString data_idPathParam("{");
    data_idPathParam.append("data_id").append("}");
    fullPath.replace(data_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(data_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    if (apikey != nullptr) {
        input.headers.insert("apikey", apikey);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::webhookStatusCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIAnalysisApi::webhookStatusCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIInline_response_200_9 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit webhookStatusSignal(output);
        emit webhookStatusSignalFull(worker, output);
    } else {
        emit webhookStatusSignalE(output, error_type, error_str);
        emit webhookStatusSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
