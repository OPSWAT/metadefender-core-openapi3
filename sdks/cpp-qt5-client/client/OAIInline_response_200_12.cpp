/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_12.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_12::OAIInline_response_200_12(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_12::OAIInline_response_200_12() {
    this->initializeModel();
}

OAIInline_response_200_12::~OAIInline_response_200_12() {}

void OAIInline_response_200_12::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_def_time_isSet = false;
    m_def_time_isValid = false;

    m_download_progress_isSet = false;
    m_download_progress_isValid = false;

    m_download_time_isSet = false;
    m_download_time_isValid = false;

    m_eng_id_isSet = false;
    m_eng_id_isValid = false;

    m_eng_name_isSet = false;
    m_eng_name_isValid = false;

    m_eng_type_isSet = false;
    m_eng_type_isValid = false;

    m_eng_ver_isSet = false;
    m_eng_ver_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInline_response_200_12::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_12::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_def_time_isValid = ::OpenAPI::fromJsonValue(def_time, json[QString("def_time")]);
    m_def_time_isSet = !json[QString("def_time")].isNull() && m_def_time_isValid;

    m_download_progress_isValid = ::OpenAPI::fromJsonValue(download_progress, json[QString("download_progress")]);
    m_download_progress_isSet = !json[QString("download_progress")].isNull() && m_download_progress_isValid;

    m_download_time_isValid = ::OpenAPI::fromJsonValue(download_time, json[QString("download_time")]);
    m_download_time_isSet = !json[QString("download_time")].isNull() && m_download_time_isValid;

    m_eng_id_isValid = ::OpenAPI::fromJsonValue(eng_id, json[QString("eng_id")]);
    m_eng_id_isSet = !json[QString("eng_id")].isNull() && m_eng_id_isValid;

    m_eng_name_isValid = ::OpenAPI::fromJsonValue(eng_name, json[QString("eng_name")]);
    m_eng_name_isSet = !json[QString("eng_name")].isNull() && m_eng_name_isValid;

    m_eng_type_isValid = ::OpenAPI::fromJsonValue(eng_type, json[QString("eng_type")]);
    m_eng_type_isSet = !json[QString("eng_type")].isNull() && m_eng_type_isValid;

    m_eng_ver_isValid = ::OpenAPI::fromJsonValue(eng_ver, json[QString("eng_ver")]);
    m_eng_ver_isSet = !json[QString("eng_ver")].isNull() && m_eng_ver_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(engine_type, json[QString("engine_type")]);
    m_engine_type_isSet = !json[QString("engine_type")].isNull() && m_engine_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInline_response_200_12::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_12::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(active));
    }
    if (m_def_time_isSet) {
        obj.insert(QString("def_time"), ::OpenAPI::toJsonValue(def_time));
    }
    if (m_download_progress_isSet) {
        obj.insert(QString("download_progress"), ::OpenAPI::toJsonValue(download_progress));
    }
    if (m_download_time_isSet) {
        obj.insert(QString("download_time"), ::OpenAPI::toJsonValue(download_time));
    }
    if (m_eng_id_isSet) {
        obj.insert(QString("eng_id"), ::OpenAPI::toJsonValue(eng_id));
    }
    if (m_eng_name_isSet) {
        obj.insert(QString("eng_name"), ::OpenAPI::toJsonValue(eng_name));
    }
    if (m_eng_type_isSet) {
        obj.insert(QString("eng_type"), ::OpenAPI::toJsonValue(eng_type));
    }
    if (m_eng_ver_isSet) {
        obj.insert(QString("eng_ver"), ::OpenAPI::toJsonValue(eng_ver));
    }
    if (m_engine_type_isSet) {
        obj.insert(QString("engine_type"), ::OpenAPI::toJsonValue(engine_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(state));
    }
    return obj;
}

bool OAIInline_response_200_12::isActive() const {
    return active;
}
void OAIInline_response_200_12::setActive(const bool &active) {
    this->active = active;
    this->m_active_isSet = true;
}

QString OAIInline_response_200_12::getDefTime() const {
    return def_time;
}
void OAIInline_response_200_12::setDefTime(const QString &def_time) {
    this->def_time = def_time;
    this->m_def_time_isSet = true;
}

qint32 OAIInline_response_200_12::getDownloadProgress() const {
    return download_progress;
}
void OAIInline_response_200_12::setDownloadProgress(const qint32 &download_progress) {
    this->download_progress = download_progress;
    this->m_download_progress_isSet = true;
}

QString OAIInline_response_200_12::getDownloadTime() const {
    return download_time;
}
void OAIInline_response_200_12::setDownloadTime(const QString &download_time) {
    this->download_time = download_time;
    this->m_download_time_isSet = true;
}

QString OAIInline_response_200_12::getEngId() const {
    return eng_id;
}
void OAIInline_response_200_12::setEngId(const QString &eng_id) {
    this->eng_id = eng_id;
    this->m_eng_id_isSet = true;
}

QString OAIInline_response_200_12::getEngName() const {
    return eng_name;
}
void OAIInline_response_200_12::setEngName(const QString &eng_name) {
    this->eng_name = eng_name;
    this->m_eng_name_isSet = true;
}

QString OAIInline_response_200_12::getEngType() const {
    return eng_type;
}
void OAIInline_response_200_12::setEngType(const QString &eng_type) {
    this->eng_type = eng_type;
    this->m_eng_type_isSet = true;
}

QString OAIInline_response_200_12::getEngVer() const {
    return eng_ver;
}
void OAIInline_response_200_12::setEngVer(const QString &eng_ver) {
    this->eng_ver = eng_ver;
    this->m_eng_ver_isSet = true;
}

QString OAIInline_response_200_12::getEngineType() const {
    return engine_type;
}
void OAIInline_response_200_12::setEngineType(const QString &engine_type) {
    this->engine_type = engine_type;
    this->m_engine_type_isSet = true;
}

QString OAIInline_response_200_12::getState() const {
    return state;
}
void OAIInline_response_200_12::setState(const QString &state) {
    this->state = state;
    this->m_state_isSet = true;
}

bool OAIInline_response_200_12::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eng_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eng_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eng_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eng_ver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_12::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
