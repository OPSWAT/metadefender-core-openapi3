/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDLPResponse_dlp_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDLPResponse_dlp_info::OAIDLPResponse_dlp_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDLPResponse_dlp_info::OAIDLPResponse_dlp_info() {
    this->initializeModel();
}

OAIDLPResponse_dlp_info::~OAIDLPResponse_dlp_info() {}

void OAIDLPResponse_dlp_info::initializeModel() {

    m_certainty_isSet = false;
    m_certainty_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_metadata_removal_isSet = false;
    m_metadata_removal_isValid = false;

    m_redact_isSet = false;
    m_redact_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_verdict_isSet = false;
    m_verdict_isValid = false;

    m_watermark_isSet = false;
    m_watermark_isValid = false;
}

void OAIDLPResponse_dlp_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDLPResponse_dlp_info::fromJsonObject(QJsonObject json) {

    m_certainty_isValid = ::OpenAPI::fromJsonValue(certainty, json[QString("certainty")]);
    m_certainty_isSet = !json[QString("certainty")].isNull() && m_certainty_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_hits_isValid = ::OpenAPI::fromJsonValue(hits, json[QString("hits")]);
    m_hits_isSet = !json[QString("hits")].isNull() && m_hits_isValid;

    m_metadata_removal_isValid = ::OpenAPI::fromJsonValue(metadata_removal, json[QString("metadata_removal")]);
    m_metadata_removal_isSet = !json[QString("metadata_removal")].isNull() && m_metadata_removal_isValid;

    m_redact_isValid = ::OpenAPI::fromJsonValue(redact, json[QString("redact")]);
    m_redact_isSet = !json[QString("redact")].isNull() && m_redact_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_verdict_isValid = ::OpenAPI::fromJsonValue(verdict, json[QString("verdict")]);
    m_verdict_isSet = !json[QString("verdict")].isNull() && m_verdict_isValid;

    m_watermark_isValid = ::OpenAPI::fromJsonValue(watermark, json[QString("watermark")]);
    m_watermark_isSet = !json[QString("watermark")].isNull() && m_watermark_isValid;
}

QString OAIDLPResponse_dlp_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDLPResponse_dlp_info::asJsonObject() const {
    QJsonObject obj;
    if (m_certainty_isSet) {
        obj.insert(QString("certainty"), ::OpenAPI::toJsonValue(certainty));
    }
    if (m_errors_isSet) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(errors));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(filename));
    }
    if (hits.isSet()) {
        obj.insert(QString("hits"), ::OpenAPI::toJsonValue(hits));
    }
    if (metadata_removal.isSet()) {
        obj.insert(QString("metadata_removal"), ::OpenAPI::toJsonValue(metadata_removal));
    }
    if (redact.isSet()) {
        obj.insert(QString("redact"), ::OpenAPI::toJsonValue(redact));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(severity));
    }
    if (m_verdict_isSet) {
        obj.insert(QString("verdict"), ::OpenAPI::toJsonValue(verdict));
    }
    if (watermark.isSet()) {
        obj.insert(QString("watermark"), ::OpenAPI::toJsonValue(watermark));
    }
    return obj;
}

QString OAIDLPResponse_dlp_info::getCertainty() const {
    return certainty;
}
void OAIDLPResponse_dlp_info::setCertainty(const QString &certainty) {
    this->certainty = certainty;
    this->m_certainty_isSet = true;
}

OAIObject OAIDLPResponse_dlp_info::getErrors() const {
    return errors;
}
void OAIDLPResponse_dlp_info::setErrors(const OAIObject &errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}

QString OAIDLPResponse_dlp_info::getFilename() const {
    return filename;
}
void OAIDLPResponse_dlp_info::setFilename(const QString &filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

OAIDLPResponse_dlp_info_hits OAIDLPResponse_dlp_info::getHits() const {
    return hits;
}
void OAIDLPResponse_dlp_info::setHits(const OAIDLPResponse_dlp_info_hits &hits) {
    this->hits = hits;
    this->m_hits_isSet = true;
}

OAIDLPResponse_dlp_info_metadata_removal OAIDLPResponse_dlp_info::getMetadataRemoval() const {
    return metadata_removal;
}
void OAIDLPResponse_dlp_info::setMetadataRemoval(const OAIDLPResponse_dlp_info_metadata_removal &metadata_removal) {
    this->metadata_removal = metadata_removal;
    this->m_metadata_removal_isSet = true;
}

OAIDLPResponse_dlp_info_redact OAIDLPResponse_dlp_info::getRedact() const {
    return redact;
}
void OAIDLPResponse_dlp_info::setRedact(const OAIDLPResponse_dlp_info_redact &redact) {
    this->redact = redact;
    this->m_redact_isSet = true;
}

qint32 OAIDLPResponse_dlp_info::getSeverity() const {
    return severity;
}
void OAIDLPResponse_dlp_info::setSeverity(const qint32 &severity) {
    this->severity = severity;
    this->m_severity_isSet = true;
}

qint32 OAIDLPResponse_dlp_info::getVerdict() const {
    return verdict;
}
void OAIDLPResponse_dlp_info::setVerdict(const qint32 &verdict) {
    this->verdict = verdict;
    this->m_verdict_isSet = true;
}

OAIDLPResponse_dlp_info_watermark OAIDLPResponse_dlp_info::getWatermark() const {
    return watermark;
}
void OAIDLPResponse_dlp_info::setWatermark(const OAIDLPResponse_dlp_info_watermark &watermark) {
    this->watermark = watermark;
    this->m_watermark_isSet = true;
}

bool OAIDLPResponse_dlp_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certainty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (hits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (metadata_removal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (redact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verdict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (watermark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDLPResponse_dlp_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
