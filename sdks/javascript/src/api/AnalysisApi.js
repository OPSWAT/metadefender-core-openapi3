/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisResult from '../model/AnalysisResult';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Analysis service.
* @module api/AnalysisApi
* @version v4.18.0
*/
export default class AnalysisApi {

    /**
    * Constructs a new AnalysisApi. 
    * @alias module:api/AnalysisApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analysisRules operation.
     * @callback module:api/AnalysisApi~analysisRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20010>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetching Available Analysis Rules
     * Retrieve all available rules with their custom configurations. Fetching available processing rules. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userAgent The user agent string value sent in the header (specified by the client).  Only those rules are returned, that:   * Match the client's user agent sent using the user_agent header, or   * Are not restricted to a specific user agent.  For details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html). 
     * @param {module:api/AnalysisApi~analysisRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20010>}
     */
    analysisRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'user_agent': opts['userAgent']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20010];
      return this.apiClient.callApi(
        '/file/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAnalysisCancel operation.
     * @callback module:api/AnalysisApi~fileAnalysisCancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel File Analysis
     * When cancelling a file analysis, the connected analysis (e.g. files in an archive) that are still in progress will be cancelled also.   The cancelled analysis will be automatically closed. 
     * @param {String} dataId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/AnalysisApi~fileAnalysisCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    fileAnalysisCancel(dataId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataId' is set
      if (dataId === undefined || dataId === null) {
        throw new Error("Missing the required parameter 'dataId' when calling fileAnalysisCancel");
      }

      let pathParams = {
        'data_id': dataId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/file/{data_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAnalysisGet operation.
     * @callback module:api/AnalysisApi~fileAnalysisGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Analysis Result
     * Retrieve scan results. Scan is done asynchronously and each scan request is tracked by a data ID. Initiating file scans and retrieving the results need to be done using two separate API calls. This request needs to be made multiple times until the scan is complete. Scan completion can be traced using `scan_results.progress_percentage` value from the response. 
     * @param {String} dataId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/AnalysisApi~fileAnalysisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisResult}
     */
    fileAnalysisGet(dataId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataId' is set
      if (dataId === undefined || dataId === null) {
        throw new Error("Missing the required parameter 'dataId' when calling fileAnalysisGet");
      }

      let pathParams = {
        'data_id': dataId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisResult;
      return this.apiClient.callApi(
        '/file/{data_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAnalysisPost operation.
     * @callback module:api/AnalysisApi~fileAnalysisPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze File
     * ## Scanning a file using a specified workflow. Scan is done asynchronously and each scan request is tracked by data id of which result can be retrieved by API Fetch Scan Result. > _**Note**_: Chunked transfer encoding (applying header Transfer-Encoding: Chunked) is **not supported** on `/file` API.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {String} opts.filename The name of the submitted file
     * @param {String} opts.filepath if local file scan is enabled the path to the file (see Security rule configuration)
     * @param {String} opts.userAgent user_agent header used to identify (and limit) access to a particular rule. For rule selection, `rule` header should be used. 
     * @param {String} opts.rule Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)       
     * @param {String} opts.workflow name of the selected workflow (deprecated, use \"rule\" header parameter instead)
     * @param {String} opts.batch Batch id to scan with, coming from `Initiate Batch` (If it is not given, it will be a single file scan.)
     * @param {String} opts.archivepwd password for archive ( URL encoded UTF-8 string)   Multiple passwords is also supported, format: archivepwd<X>     * X: Could be empty     * When having value, X must be a number >= 1   For example:     archivepwd1: \"fox\"     archivepwd2: \"cow\"     archivepwd3: \"bear\" 
     * @param {String} opts.metadata could be utilized for: Additional parameter for pre-defined post actions and external scanners (as a part of STDIN input). Customized macro variable for watermarking text (Proactive DLP engine feature). Additional context / verbose information for each file submission (appended into JSON response scan result). 
     * @param {String} opts.callbackurl Client's URL where MetaDefender Core will notify scan result back to whenever scan is finished (webhooks model). See details at 8.1.11.1. Individual file processing   * Format: <protocol://><ip | domain>:<port></path>   * Example: http://10.0.1.100:8081/listenback 
     * @param {File} opts.body 
     * @param {module:api/AnalysisApi~fileAnalysisPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    fileAnalysisPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey'],
        'filename': opts['filename'],
        'filepath': opts['filepath'],
        'user_agent': opts['userAgent'],
        'rule': opts['rule'],
        'workflow': opts['workflow'],
        'batch': opts['batch'],
        'archivepwd': opts['archivepwd'],
        'metadata': opts['metadata'],
        'callbackurl': opts['callbackurl']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sanitizedFile operation.
     * @callback module:api/AnalysisApi~sanitizedFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Sanitized Files
     * Retrieve sanitized file based on the `data_id` 
     * @param {String} dataId The data_id comes from the result of `Analyze a file`. In case of sanitizing the content of an archive, the data_id of contained file can be found in `Fetch analysis result`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/AnalysisApi~sanitizedFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    sanitizedFile(dataId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataId' is set
      if (dataId === undefined || dataId === null) {
        throw new Error("Missing the required parameter 'dataId' when calling sanitizedFile");
      }

      let pathParams = {
        'data_id': dataId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/file/converted/{data_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookStatus operation.
     * @callback module:api/AnalysisApi~webhookStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query webhook status
     * Prior to being notified by Core when webhooks mode is set, client can anytime ask Core for file / batch processing webhooks status. 
     * @param {String} dataId Either `data_id` or `batch_id`.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/AnalysisApi~webhookStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    webhookStatus(dataId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataId' is set
      if (dataId === undefined || dataId === null) {
        throw new Error("Missing the required parameter 'dataId' when calling webhookStatus");
      }

      let pathParams = {
        'data_id': dataId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/file/webhook/{data_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
