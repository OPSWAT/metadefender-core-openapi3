/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse500 from '../model/InlineResponse500';
import YaraSourcesObject from '../model/YaraSourcesObject';

/**
* Yara service.
* @module api/YaraApi
* @version v4.18.0
*/
export default class YaraApi {

    /**
    * Constructs a new YaraApi. 
    * @alias module:api/YaraApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the yaraPackageGenerate operation.
     * @callback module:api/YaraApi~yaraPackageGenerateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Yara package
     * Generate a new package based on the new added sources.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/YaraApi~yaraPackageGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    yaraPackageGenerate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/yara/generate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the yaraPackageStatus operation.
     * @callback module:api/YaraApi~yaraPackageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Yara Generation Status
     * Get status of Yara package generation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/YaraApi~yaraPackageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    yaraPackageStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/yara/package', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the yaraSourcesGet operation.
     * @callback module:api/YaraApi~yaraSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YaraSourcesObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Yara sources
     * Retrieve a list of all sources for the Yara Engine.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/YaraApi~yaraSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YaraSourcesObject}
     */
    yaraSourcesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = YaraSourcesObject;
      return this.apiClient.callApi(
        '/admin/config/yara/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the yaraSourcesPut operation.
     * @callback module:api/YaraApi~yaraSourcesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YaraSourcesObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Yara sources
     * Modify one (or more) of the sources for the Yara Engine.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:model/YaraSourcesObject} opts.yaraSourcesObject A list of Yara Engine sources.
     * @param {module:api/YaraApi~yaraSourcesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YaraSourcesObject}
     */
    yaraSourcesPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['yaraSourcesObject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = YaraSourcesObject;
      return this.apiClient.callApi(
        '/admin/config/yara/sources', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
