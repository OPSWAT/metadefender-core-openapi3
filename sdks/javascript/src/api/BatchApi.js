/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchId from '../model/BatchId';
import BatchResponse from '../model/BatchResponse';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Batch service.
* @module api/BatchApi
* @version v4.18.0
*/
export default class BatchApi {

    /**
    * Constructs a new BatchApi. 
    * @alias module:api/BatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCancel operation.
     * @callback module:api/BatchApi~batchCancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Batch
     * When cancelling a batch, the connected analysis that are still in progress will be cancelled also.   The cancelled batch will be closed.      
     * @param {String} batchId The batch identifier used to submit files in the batch and to close the batch.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/BatchApi~batchCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    batchCancel(batchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchCancel");
      }

      let pathParams = {
        'batchId': batchId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/file/{batchId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchClose operation.
     * @callback module:api/BatchApi~batchCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close Batch
     * The batch will be closed and files can no longer can be added to the current batch.      
     * @param {String} batchId The batch identifier used to submit files in the batch and to close the batch.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/BatchApi~batchCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponse}
     */
    batchClose(batchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchClose");
      }

      let pathParams = {
        'batchId': batchId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchResponse;
      return this.apiClient.callApi(
        '/file/batch/{batchId}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreate operation.
     * @callback module:api/BatchApi~batchCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Batch
     * Create a new batch and retrieve the batch_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {String} opts.rule Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)       
     * @param {String} opts.userAgent user_agent header used to identify (and limit) access to a particular rule. For rule selection, `rule` header should be used. 
     * @param {String} opts.userData Additional custom information (max 1024 bytes, URL encoded UTF-8 string)       
     * @param {module:api/BatchApi~batchCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchId}
     */
    batchCreate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey'],
        'rule': opts['rule'],
        'user_agent': opts['userAgent'],
        'user-data': opts['userData']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchId;
      return this.apiClient.callApi(
        '/file/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchSignedResult operation.
     * @callback module:api/BatchApi~batchSignedResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Signed Batch Result
     * Download digitally signed status report for the entire batch
     * @param {String} batchId The batch identifier used to submit files in the batch and to close the batch.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/BatchApi~batchSignedResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    batchSignedResult(batchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchSignedResult");
      }

      let pathParams = {
        'batchId': batchId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/file/batch/{batchId}/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchStatus operation.
     * @callback module:api/BatchApi~batchStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status of Batch Analysis
     * Retrieve status report for the entire batch
     * @param {String} batchId The batch identifier used to submit files in the batch and to close the batch.
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey Generated `session_id` from [Login](#operation/userLogin) call can be used as an `apikey` for API calls that require authentication.                
     * @param {module:api/BatchApi~batchStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponse}
     */
    batchStatus(batchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling batchStatus");
      }

      let pathParams = {
        'batchId': batchId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': opts['apikey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchResponse;
      return this.apiClient.callApi(
        '/file/batch/{batchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
