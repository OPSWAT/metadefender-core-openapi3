/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
/**
* Enum class ProcessingResultsStringEnum.
* @enum {}
* @readonly
*/
export default class ProcessingResultsStringEnum {
    
        /**
         * value: "Threat Detected"
         * @const
         */
        "Threat Detected" = "Threat Detected";

    
        /**
         * value: "Infected"
         * @const
         */
        "Infected" = "Infected";

    
        /**
         * value: "Suspicious"
         * @const
         */
        "Suspicious" = "Suspicious";

    
        /**
         * value: "Failed"
         * @const
         */
        "Failed" = "Failed";

    
        /**
         * value: "Cleaned / Deleted"
         * @const
         */
        "Cleaned / Deleted" = "Cleaned / Deleted";

    
        /**
         * value: "Scan Skipped - Whitelisted"
         * @const
         */
        "Scan Skipped - Whitelisted" = "Scan Skipped - Whitelisted";

    
        /**
         * value: "Scan Skipped - Blacklisted"
         * @const
         */
        "Scan Skipped - Blacklisted" = "Scan Skipped - Blacklisted";

    
        /**
         * value: "Exceeded Archive Depth"
         * @const
         */
        "Exceeded Archive Depth" = "Exceeded Archive Depth";

    
        /**
         * value: "Not Scanned"
         * @const
         */
        "Not Scanned" = "Not Scanned";

    
        /**
         * value: "Encrypted Archive"
         * @const
         */
        "Encrypted Archive" = "Encrypted Archive";

    
        /**
         * value: "Exceeded Archive Size"
         * @const
         */
        "Exceeded Archive Size" = "Exceeded Archive Size";

    
        /**
         * value: "Exceeded Archive File Number"
         * @const
         */
        "Exceeded Archive File Number" = "Exceeded Archive File Number";

    
        /**
         * value: "Password Protected Document"
         * @const
         */
        "Password Protected Document" = "Password Protected Document";

    
        /**
         * value: "Exceeded Archive Timeout"
         * @const
         */
        "Exceeded Archive Timeout" = "Exceeded Archive Timeout";

    
        /**
         * value: "File type Mismatch"
         * @const
         */
        "File type Mismatch" = "File type Mismatch";

    
        /**
         * value: "Potentially Vulnerable File"
         * @const
         */
        "Potentially Vulnerable File" = "Potentially Vulnerable File";

    
        /**
         * value: "Canceled"
         * @const
         */
        "Canceled" = "Canceled";

    
        /**
         * value: "Sensitive data found"
         * @const
         */
        "Sensitive data found" = "Sensitive data found";

    
        /**
         * value: "Yara Rule Matched"
         * @const
         */
        "Yara Rule Matched" = "Yara Rule Matched";

    
        /**
         * value: "Potentially Unwanted Program"
         * @const
         */
        "Potentially Unwanted Program" = "Potentially Unwanted Program";

    
        /**
         * value: "Unsupported file type"
         * @const
         */
        "Unsupported file type" = "Unsupported file type";

    
        /**
         * value: "In Progress"
         * @const
         */
        "In Progress" = "In Progress";

    

    /**
    * Returns a <code>ProcessingResultsStringEnum</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/ProcessingResultsStringEnum} The enum <code>ProcessingResultsStringEnum</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

