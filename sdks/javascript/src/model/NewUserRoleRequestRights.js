/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RolePermissionObject from './RolePermissionObject';

/**
 * The NewUserRoleRequestRights model module.
 * @module model/NewUserRoleRequestRights
 * @version v4.18.0
 */
class NewUserRoleRequestRights {
    /**
     * Constructs a new <code>NewUserRoleRequestRights</code>.
     * A list of rights for each permission
     * @alias module:model/NewUserRoleRequestRights
     */
    constructor() { 
        
        NewUserRoleRequestRights.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewUserRoleRequestRights</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewUserRoleRequestRights} obj Optional instance to populate.
     * @return {module:model/NewUserRoleRequestRights} The populated <code>NewUserRoleRequestRights</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewUserRoleRequestRights();

            if (data.hasOwnProperty('agents')) {
                obj['agents'] = ApiClient.convertToType(data['agents'], RolePermissionObject);
            }
            if (data.hasOwnProperty('cert')) {
                obj['cert'] = ApiClient.convertToType(data['cert'], RolePermissionObject);
            }
            if (data.hasOwnProperty('configlog')) {
                obj['configlog'] = ApiClient.convertToType(data['configlog'], RolePermissionObject);
            }
            if (data.hasOwnProperty('engines')) {
                obj['engines'] = ApiClient.convertToType(data['engines'], RolePermissionObject);
            }
            if (data.hasOwnProperty('external')) {
                obj['external'] = ApiClient.convertToType(data['external'], RolePermissionObject);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], RolePermissionObject);
            }
            if (data.hasOwnProperty('quarantine')) {
                obj['quarantine'] = ApiClient.convertToType(data['quarantine'], RolePermissionObject);
            }
            if (data.hasOwnProperty('retention')) {
                obj['retention'] = ApiClient.convertToType(data['retention'], RolePermissionObject);
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], RolePermissionObject);
            }
            if (data.hasOwnProperty('scan')) {
                obj['scan'] = ApiClient.convertToType(data['scan'], RolePermissionObject);
            }
            if (data.hasOwnProperty('scanlog')) {
                obj['scanlog'] = ApiClient.convertToType(data['scanlog'], RolePermissionObject);
            }
            if (data.hasOwnProperty('skip')) {
                obj['skip'] = ApiClient.convertToType(data['skip'], RolePermissionObject);
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = ApiClient.convertToType(data['update'], RolePermissionObject);
            }
            if (data.hasOwnProperty('updatelog')) {
                obj['updatelog'] = ApiClient.convertToType(data['updatelog'], RolePermissionObject);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], RolePermissionObject);
            }
            if (data.hasOwnProperty('workflow')) {
                obj['workflow'] = ApiClient.convertToType(data['workflow'], RolePermissionObject);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], RolePermissionObject);
            }
        }
        return obj;
    }


}

/**
 * What permissions are allowed for Node.
 * @member {module:model/RolePermissionObject} agents
 */
NewUserRoleRequestRights.prototype['agents'] = undefined;

/**
 * What permissions are allowed for Certificates.
 * @member {module:model/RolePermissionObject} cert
 */
NewUserRoleRequestRights.prototype['cert'] = undefined;

/**
 * What permissions are allowed for Configuration logs.
 * @member {module:model/RolePermissionObject} configlog
 */
NewUserRoleRequestRights.prototype['configlog'] = undefined;

/**
 * What permissions are allowed for Engines and Modules.
 * @member {module:model/RolePermissionObject} engines
 */
NewUserRoleRequestRights.prototype['engines'] = undefined;

/**
 * What permissions are allowed for External actions (External Scanner/Post Actions).
 * @member {module:model/RolePermissionObject} external
 */
NewUserRoleRequestRights.prototype['external'] = undefined;

/**
 * What permissions are allowed for managing the License.
 * @member {module:model/RolePermissionObject} license
 */
NewUserRoleRequestRights.prototype['license'] = undefined;

/**
 * What permissions are allowed for managing the Quarantine.
 * @member {module:model/RolePermissionObject} quarantine
 */
NewUserRoleRequestRights.prototype['quarantine'] = undefined;

/**
 * What permissions are allowed for managing the retention policies.
 * @member {module:model/RolePermissionObject} retention
 */
NewUserRoleRequestRights.prototype['retention'] = undefined;

/**
 * What permissions are allowed for managing the workflow rules.
 * @member {module:model/RolePermissionObject} rule
 */
NewUserRoleRequestRights.prototype['rule'] = undefined;

/**
 * What permissions are allowed for managing analysis actions.
 * @member {module:model/RolePermissionObject} scan
 */
NewUserRoleRequestRights.prototype['scan'] = undefined;

/**
 * What permissions are allowed for managing the analysis logs.
 * @member {module:model/RolePermissionObject} scanlog
 */
NewUserRoleRequestRights.prototype['scanlog'] = undefined;

/**
 * What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.
 * @member {module:model/RolePermissionObject} skip
 */
NewUserRoleRequestRights.prototype['skip'] = undefined;

/**
 * What permissions are allowed for managing the update configuration.
 * @member {module:model/RolePermissionObject} update
 */
NewUserRoleRequestRights.prototype['update'] = undefined;

/**
 * What permissions are allowed for managing the update logs.
 * @member {module:model/RolePermissionObject} updatelog
 */
NewUserRoleRequestRights.prototype['updatelog'] = undefined;

/**
 * What permissions are allowed for managing the users.
 * @member {module:model/RolePermissionObject} users
 */
NewUserRoleRequestRights.prototype['users'] = undefined;

/**
 * What permissions are allowed for managing the workflow templates.
 * @member {module:model/RolePermissionObject} workflow
 */
NewUserRoleRequestRights.prototype['workflow'] = undefined;

/**
 * What permissions are allowed for managing the network zones.
 * @member {module:model/RolePermissionObject} zone
 */
NewUserRoleRequestRights.prototype['zone'] = undefined;






export default NewUserRoleRequestRights;

