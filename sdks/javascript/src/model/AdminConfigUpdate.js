/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdminConfigUpdateDisabledupdate from './AdminConfigUpdateDisabledupdate';

/**
 * The AdminConfigUpdate model module.
 * @module model/AdminConfigUpdate
 * @version v4.18.0
 */
class AdminConfigUpdate {
    /**
     * Constructs a new <code>AdminConfigUpdate</code>.
     * API object for /admin/config/update
     * @alias module:model/AdminConfigUpdate
     */
    constructor() { 
        
        AdminConfigUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminConfigUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminConfigUpdate} obj Optional instance to populate.
     * @return {module:model/AdminConfigUpdate} The populated <code>AdminConfigUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminConfigUpdate();

            if (data.hasOwnProperty('autoupdateperiod')) {
                obj['autoupdateperiod'] = ApiClient.convertToType(data['autoupdateperiod'], 'Number');
            }
            if (data.hasOwnProperty('deleteafterimport')) {
                obj['deleteafterimport'] = ApiClient.convertToType(data['deleteafterimport'], 'Boolean');
            }
            if (data.hasOwnProperty('disabledupdate')) {
                obj['disabledupdate'] = ApiClient.convertToType(data['disabledupdate'], [AdminConfigUpdateDisabledupdate]);
            }
            if (data.hasOwnProperty('pickupfolder')) {
                obj['pickupfolder'] = ApiClient.convertToType(data['pickupfolder'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The interval (in minutes) for checking for new updates.
 * @member {Number} autoupdateperiod
 */
AdminConfigUpdate.prototype['autoupdateperiod'] = undefined;

/**
 * If you want to clean the pickup folder after the updates have been applied.
 * @member {Boolean} deleteafterimport
 */
AdminConfigUpdate.prototype['deleteafterimport'] = undefined;

/**
 * Lockdown a time interval when the engines are not allowed to update.
 * @member {Array.<module:model/AdminConfigUpdateDisabledupdate>} disabledupdate
 */
AdminConfigUpdate.prototype['disabledupdate'] = undefined;

/**
 * The folder where MetaDefender will look for the new engine files.
 * @member {String} pickupfolder
 */
AdminConfigUpdate.prototype['pickupfolder'] = undefined;

/**
 * Define where the updates will be loaded from. <p> This can be either:   * `internet` -> if selected, will check for new updates every `autoupdateperiod` minutes   * `folder` -> make sure that MetaDefender has access/permission to that folder   * `manual` -> requires manually uploading the packages in Inventory > Modules > Upload package. 
 * @member {module:model/AdminConfigUpdate.SourceEnum} source
 */
AdminConfigUpdate.prototype['source'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
AdminConfigUpdate['SourceEnum'] = {

    /**
     * value: "internet"
     * @const
     */
    "internet": "internet",

    /**
     * value: "folder"
     * @const
     */
    "folder": "folder",

    /**
     * value: "manual"
     * @const
     */
    "manual": "manual"
};



export default AdminConfigUpdate;

