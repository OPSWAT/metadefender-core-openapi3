/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewUserRoleRequest from './NewUserRoleRequest';
import NewUserRoleRequestRights from './NewUserRoleRequestRights';
import NewUserRoleResponseAllOf from './NewUserRoleResponseAllOf';

/**
 * The NewUserRoleResponse model module.
 * @module model/NewUserRoleResponse
 * @version v4.18.0
 */
class NewUserRoleResponse {
    /**
     * Constructs a new <code>NewUserRoleResponse</code>.
     * @alias module:model/NewUserRoleResponse
     * @extends module:model/NewUserRoleRequest
     * @implements module:model/NewUserRoleRequest
     * @implements module:model/NewUserRoleResponseAllOf
     * @param editable {Boolean} If the role can be altered or not.
     * @param id {Number} Internal used identifier
     */
    constructor(editable, id) { 
        NewUserRoleRequest.initialize(this);NewUserRoleResponseAllOf.initialize(this, editable, id);
        NewUserRoleResponse.initialize(this, editable, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, editable, id) { 
        obj['editable'] = editable;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>NewUserRoleResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewUserRoleResponse} obj Optional instance to populate.
     * @return {module:model/NewUserRoleResponse} The populated <code>NewUserRoleResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewUserRoleResponse();
            NewUserRoleRequest.constructFromObject(data, obj);
            NewUserRoleRequest.constructFromObject(data, obj);
            NewUserRoleResponseAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * If the role can be altered or not.
 * @member {Boolean} editable
 */
NewUserRoleResponse.prototype['editable'] = undefined;

/**
 * Internal used identifier
 * @member {Number} id
 */
NewUserRoleResponse.prototype['id'] = undefined;


// Implement NewUserRoleRequest interface:
/**
 * The name identifier of the role
 * @member {String} name
 */
NewUserRoleRequest.prototype['name'] = undefined;
/**
 * The extended name showed in the Management Console.
 * @member {String} display_name
 */
NewUserRoleRequest.prototype['display_name'] = undefined;
/**
 * @member {module:model/NewUserRoleRequestRights} rights
 */
NewUserRoleRequest.prototype['rights'] = undefined;
// Implement NewUserRoleResponseAllOf interface:
/**
 * If the role can be altered or not.
 * @member {Boolean} editable
 */
NewUserRoleResponseAllOf.prototype['editable'] = undefined;
/**
 * Internal used identifier
 * @member {Number} id
 */
NewUserRoleResponseAllOf.prototype['id'] = undefined;




export default NewUserRoleResponse;

