/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VulnerabilityResponseResultDetailsCvss from './VulnerabilityResponseResultDetailsCvss';

/**
 * The VulnerabilityResponseResultDetails model module.
 * @module model/VulnerabilityResponseResultDetails
 * @version v4.18.0
 */
class VulnerabilityResponseResultDetails {
    /**
     * Constructs a new <code>VulnerabilityResponseResultDetails</code>.
     * A set of optional vulnerability details
     * @alias module:model/VulnerabilityResponseResultDetails
     */
    constructor() { 
        
        VulnerabilityResponseResultDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VulnerabilityResponseResultDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VulnerabilityResponseResultDetails} obj Optional instance to populate.
     * @return {module:model/VulnerabilityResponseResultDetails} The populated <code>VulnerabilityResponseResultDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VulnerabilityResponseResultDetails();

            if (data.hasOwnProperty('cpe')) {
                obj['cpe'] = ApiClient.convertToType(data['cpe'], 'String');
            }
            if (data.hasOwnProperty('cve')) {
                obj['cve'] = ApiClient.convertToType(data['cve'], 'String');
            }
            if (data.hasOwnProperty('cvss')) {
                obj['cvss'] = VulnerabilityResponseResultDetailsCvss.constructFromObject(data['cvss']);
            }
            if (data.hasOwnProperty('cwe')) {
                obj['cwe'] = ApiClient.convertToType(data['cwe'], 'String');
            }
            if (data.hasOwnProperty('last_modified_epoch')) {
                obj['last_modified_epoch'] = ApiClient.convertToType(data['last_modified_epoch'], 'String');
            }
            if (data.hasOwnProperty('published-epoch')) {
                obj['published-epoch'] = ApiClient.convertToType(data['published-epoch'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * A CPE product reference
 * @member {String} cpe
 */
VulnerabilityResponseResultDetails.prototype['cpe'] = undefined;

/**
 * A CVE identification string
 * @member {String} cve
 */
VulnerabilityResponseResultDetails.prototype['cve'] = undefined;

/**
 * @member {module:model/VulnerabilityResponseResultDetailsCvss} cvss
 */
VulnerabilityResponseResultDetails.prototype['cvss'] = undefined;

/**
 * A CWE group identification string
 * @member {String} cwe
 */
VulnerabilityResponseResultDetails.prototype['cwe'] = undefined;

/**
 * An epoch timestamp indicating source last update time
 * @member {String} last_modified_epoch
 */
VulnerabilityResponseResultDetails.prototype['last_modified_epoch'] = undefined;

/**
 * An epoch timestamp indicating source publishing time
 * @member {String} published-epoch
 */
VulnerabilityResponseResultDetails.prototype['published-epoch'] = undefined;

/**
 * An array of external reference links
 * @member {Array.<String>} references
 */
VulnerabilityResponseResultDetails.prototype['references'] = undefined;






export default VulnerabilityResponseResultDetails;

