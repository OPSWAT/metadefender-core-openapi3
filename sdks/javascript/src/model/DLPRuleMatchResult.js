/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DLPRuleMatchResult model module.
 * @module model/DLPRuleMatchResult
 * @version v4.18.0
 */
class DLPRuleMatchResult {
    /**
     * Constructs a new <code>DLPRuleMatchResult</code>.
     * An entry detailing the match.
     * @alias module:model/DLPRuleMatchResult
     */
    constructor() { 
        
        DLPRuleMatchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DLPRuleMatchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DLPRuleMatchResult} obj Optional instance to populate.
     * @return {module:model/DLPRuleMatchResult} The populated <code>DLPRuleMatchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DLPRuleMatchResult();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'String');
            }
            if (data.hasOwnProperty('certainty')) {
                obj['certainty'] = ApiClient.convertToType(data['certainty'], 'String');
            }
            if (data.hasOwnProperty('certainty_score')) {
                obj['certainty_score'] = ApiClient.convertToType(data['certainty_score'], 'Number');
            }
            if (data.hasOwnProperty('hit')) {
                obj['hit'] = ApiClient.convertToType(data['hit'], 'String');
            }
            if (data.hasOwnProperty('isRedacted')) {
                obj['isRedacted'] = ApiClient.convertToType(data['isRedacted'], 'Boolean');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The context after the matched data.
 * @member {String} after
 */
DLPRuleMatchResult.prototype['after'] = undefined;

/**
 * The context before the matched data.
 * @member {String} before
 */
DLPRuleMatchResult.prototype['before'] = undefined;

/**
 * The text version of \"certainty_score\", possible values:   * `Very Low`     * `Low`     * `Medium`     * `High`     * `Very High` 
 * @member {module:model/DLPRuleMatchResult.CertaintyEnum} certainty
 */
DLPRuleMatchResult.prototype['certainty'] = undefined;

/**
 * Is  defined by the relevance of the given hit in its context. It is calculated based on multiple factors such as the number of digits, possible values: [0-100] 
 * @member {Number} certainty_score
 */
DLPRuleMatchResult.prototype['certainty_score'] = undefined;

/**
 * The matched data.
 * @member {String} hit
 */
DLPRuleMatchResult.prototype['hit'] = undefined;

/**
 * If file was redacted or not.
 * @member {Boolean} isRedacted
 */
DLPRuleMatchResult.prototype['isRedacted'] = undefined;

/**
 * (NOTE: this field is deprecated): can be 0 (detected) or 1 (suspicious). 
 * @member {module:model/DLPRuleMatchResult.SeverityEnum} severity
 */
DLPRuleMatchResult.prototype['severity'] = undefined;





/**
 * Allowed values for the <code>certainty</code> property.
 * @enum {String}
 * @readonly
 */
DLPRuleMatchResult['CertaintyEnum'] = {

    /**
     * value: "Very Low"
     * @const
     */
    "Very Low": "Very Low",

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "High"
     * @const
     */
    "High": "High",

    /**
     * value: "Very High"
     * @const
     */
    "Very High": "Very High"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {Number}
 * @readonly
 */
DLPRuleMatchResult['SeverityEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default DLPRuleMatchResult;

