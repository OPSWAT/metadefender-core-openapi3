/**
 * MetaDefender Core
 * ## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 
 *
 * The version of the OpenAPI document: v4.18.0
 * Contact: feedback@opswat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse20012 model module.
 * @module model/InlineResponse20012
 * @version v4.18.0
 */
class InlineResponse20012 {
    /**
     * Constructs a new <code>InlineResponse20012</code>.
     * @alias module:model/InlineResponse20012
     */
    constructor() { 
        
        InlineResponse20012.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20012</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20012} obj Optional instance to populate.
     * @return {module:model/InlineResponse20012} The populated <code>InlineResponse20012</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20012();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('def_time')) {
                obj['def_time'] = ApiClient.convertToType(data['def_time'], 'String');
            }
            if (data.hasOwnProperty('download_progress')) {
                obj['download_progress'] = ApiClient.convertToType(data['download_progress'], 'Number');
            }
            if (data.hasOwnProperty('download_time')) {
                obj['download_time'] = ApiClient.convertToType(data['download_time'], 'String');
            }
            if (data.hasOwnProperty('eng_id')) {
                obj['eng_id'] = ApiClient.convertToType(data['eng_id'], 'String');
            }
            if (data.hasOwnProperty('eng_name')) {
                obj['eng_name'] = ApiClient.convertToType(data['eng_name'], 'String');
            }
            if (data.hasOwnProperty('eng_type')) {
                obj['eng_type'] = ApiClient.convertToType(data['eng_type'], 'String');
            }
            if (data.hasOwnProperty('eng_ver')) {
                obj['eng_ver'] = ApiClient.convertToType(data['eng_ver'], 'String');
            }
            if (data.hasOwnProperty('engine_type')) {
                obj['engine_type'] = ApiClient.convertToType(data['engine_type'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }


}

/**
 * If used by at least one engine
 * @member {Boolean} active
 */
InlineResponse20012.prototype['active'] = undefined;

/**
 * The database definition time for this engine
 * @member {String} def_time
 */
InlineResponse20012.prototype['def_time'] = undefined;

/**
 * The percentage progress of download
 * @member {Number} download_progress
 */
InlineResponse20012.prototype['download_progress'] = undefined;

/**
 * When this engine downloaded from the update server.
 * @member {String} download_time
 */
InlineResponse20012.prototype['download_time'] = undefined;

/**
 * Engine internal ID
 * @member {String} eng_id
 */
InlineResponse20012.prototype['eng_id'] = undefined;

/**
 * Engine name
 * @member {String} eng_name
 */
InlineResponse20012.prototype['eng_name'] = undefined;

/**
 * Engine type in human readable form
 * @member {String} eng_type
 */
InlineResponse20012.prototype['eng_type'] = undefined;

/**
 * Engine's version (format differs from one engine to another).
 * @member {String} eng_ver
 */
InlineResponse20012.prototype['eng_ver'] = undefined;

/**
 * Engine's type:    * av   * archive   * filetype 
 * @member {module:model/InlineResponse20012.EngineTypeEnum} engine_type
 */
InlineResponse20012.prototype['engine_type'] = undefined;

/**
 * Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed 
 * @member {module:model/InlineResponse20012.StateEnum} state
 */
InlineResponse20012.prototype['state'] = undefined;





/**
 * Allowed values for the <code>engine_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse20012['EngineTypeEnum'] = {

    /**
     * value: "av"
     * @const
     */
    "av": "av",

    /**
     * value: "archive"
     * @const
     */
    "archive": "archive",

    /**
     * value: "filetype"
     * @const
     */
    "filetype": "filetype"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse20012['StateEnum'] = {

    /**
     * value: "downloading"
     * @const
     */
    "downloading": "downloading",

    /**
     * value: "downloaded"
     * @const
     */
    "downloaded": "downloaded",

    /**
     * value: "staging"
     * @const
     */
    "staging": "staging",

    /**
     * value: "production"
     * @const
     */
    "production": "production",

    /**
     * value: "removed"
     * @const
     */
    "removed": "removed",

    /**
     * value: "temporary failed"
     * @const
     */
    "temporary failed": "temporary failed",

    /**
     * value: "permanently failed"
     * @const
     */
    "permanently failed": "permanently failed",

    /**
     * value: "content invalid"
     * @const
     */
    "content invalid": "content invalid",

    /**
     * value: "download failed"
     * @const
     */
    "download failed": "download failed"
};



export default InlineResponse20012;

