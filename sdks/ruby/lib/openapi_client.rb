=begin
#MetaDefender Core

### Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 

The version of the OpenAPI document: v4.18.0
Contact: feedback@opswat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

# Common files
require 'openapi_client/api_client'
require 'openapi_client/api_error'
require 'openapi_client/version'
require 'openapi_client/configuration'

# Models
require 'openapi_client/models/av_engine_scan_report'
require 'openapi_client/models/admin_config_session'
require 'openapi_client/models/admin_config_update'
require 'openapi_client/models/admin_config_update_disabledupdate'
require 'openapi_client/models/admin_config_webhook'
require 'openapi_client/models/analysis_result'
require 'openapi_client/models/analysis_result_process_info'
require 'openapi_client/models/analysis_result_process_info_post_processing'
require 'openapi_client/models/batch_id'
require 'openapi_client/models/batch_response'
require 'openapi_client/models/batch_response_batch_files'
require 'openapi_client/models/batch_response_batch_files_files_in_batch'
require 'openapi_client/models/batch_response_batch_files_process_info'
require 'openapi_client/models/batch_response_process_info'
require 'openapi_client/models/batch_response_scan_results'
require 'openapi_client/models/dlp_response'
require 'openapi_client/models/dlp_response_dlp_info'
require 'openapi_client/models/dlp_response_dlp_info_hits'
require 'openapi_client/models/dlp_response_dlp_info_hits_ccn'
require 'openapi_client/models/dlp_response_dlp_info_metadata_removal'
require 'openapi_client/models/dlp_response_dlp_info_redact'
require 'openapi_client/models/dlp_response_dlp_info_watermark'
require 'openapi_client/models/dlp_rule_match_result'
require 'openapi_client/models/deep_cdr_details'
require 'openapi_client/models/deep_cdr_details_details'
require 'openapi_client/models/file_information'
require 'openapi_client/models/inline_object'
require 'openapi_client/models/inline_object1'
require 'openapi_client/models/inline_object2'
require 'openapi_client/models/inline_response200'
require 'openapi_client/models/inline_response2001'
require 'openapi_client/models/inline_response20010'
require 'openapi_client/models/inline_response20011'
require 'openapi_client/models/inline_response20012'
require 'openapi_client/models/inline_response20013'
require 'openapi_client/models/inline_response2002'
require 'openapi_client/models/inline_response2003'
require 'openapi_client/models/inline_response2004'
require 'openapi_client/models/inline_response2005'
require 'openapi_client/models/inline_response2006'
require 'openapi_client/models/inline_response2007'
require 'openapi_client/models/inline_response2007_issues'
require 'openapi_client/models/inline_response2007_issues_general'
require 'openapi_client/models/inline_response2007_issues_source'
require 'openapi_client/models/inline_response2008'
require 'openapi_client/models/inline_response2009'
require 'openapi_client/models/inline_response400'
require 'openapi_client/models/inline_response403'
require 'openapi_client/models/inline_response500'
require 'openapi_client/models/license_information'
require 'openapi_client/models/metascan_report'
require 'openapi_client/models/metascan_report_scan_details'
require 'openapi_client/models/new_user_role_request'
require 'openapi_client/models/new_user_role_request_rights'
require 'openapi_client/models/new_user_role_response'
require 'openapi_client/models/new_user_role_response_all_of'
require 'openapi_client/models/processing_results_index_enum'
require 'openapi_client/models/processing_results_string_enum'
require 'openapi_client/models/role_permission_object'
require 'openapi_client/models/scan_result_enum'
require 'openapi_client/models/skip_list'
require 'openapi_client/models/stat_nodes_engines'
require 'openapi_client/models/stat_nodes_issues'
require 'openapi_client/models/stat_nodes_statuses'
require 'openapi_client/models/user_login'
require 'openapi_client/models/user_request'
require 'openapi_client/models/user_request_all_of'
require 'openapi_client/models/user_response'
require 'openapi_client/models/vulnerability_response'
require 'openapi_client/models/vulnerability_response_result'
require 'openapi_client/models/vulnerability_response_result_details'
require 'openapi_client/models/vulnerability_response_result_details_cvss'
require 'openapi_client/models/vulnerability_response_result_detected_product'
require 'openapi_client/models/vulnerability_response_result_detected_product_product'
require 'openapi_client/models/vulnerability_response_result_detected_product_vendor'
require 'openapi_client/models/vulnerability_response_result_detected_product_version_data'
require 'openapi_client/models/vulnerability_response_result_vulnerabilites'
require 'openapi_client/models/yara_report'
require 'openapi_client/models/yara_sources_object'
require 'openapi_client/models/yara_sources_object_http_sources'
require 'openapi_client/models/yara_sources_object_local_sources'

# APIs
require 'openapi_client/api/admin_api'
require 'openapi_client/api/analysis_api'
require 'openapi_client/api/auth_api'
require 'openapi_client/api/batch_api'
require 'openapi_client/api/config_api'
require 'openapi_client/api/engines_api'
require 'openapi_client/api/license_api'
require 'openapi_client/api/stats_api'
require 'openapi_client/api/yara_api'

module OpenapiClient
  class << self
    # Customize default settings for the SDK using block.
    #   OpenapiClient.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
