=begin
#MetaDefender Core

### Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 

The version of the OpenAPI document: v4.18.0
Contact: feedback@opswat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module OpenapiClient
  class AnalysisApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetching Available Analysis Rules
    # Retrieve all available rules with their custom configurations. Fetching available processing rules. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent The user agent string value sent in the header (specified by the client).  Only those rules are returned, that:   * Match the client&#39;s user agent sent using the user_agent header, or   * Are not restricted to a specific user agent.  For details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html). 
    # @return [Array<InlineResponse20010>]
    def analysis_rules(opts = {})
      data, _status_code, _headers = analysis_rules_with_http_info(opts)
      data
    end

    # Fetching Available Analysis Rules
    # Retrieve all available rules with their custom configurations. Fetching available processing rules. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_agent The user agent string value sent in the header (specified by the client).  Only those rules are returned, that:   * Match the client&#39;s user agent sent using the user_agent header, or   * Are not restricted to a specific user agent.  For details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html). 
    # @return [Array<(Array<InlineResponse20010>, Integer, Hash)>] Array<InlineResponse20010> data, response status code and response headers
    def analysis_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.analysis_rules ...'
      end
      # resource path
      local_var_path = '/file/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<InlineResponse20010>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#analysis_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel File Analysis
    # When cancelling a file analysis, the connected analysis (e.g. files in an archive) that are still in progress will be cancelled also.   The cancelled analysis will be automatically closed. 
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [Object]
    def file_analysis_cancel(data_id, opts = {})
      data, _status_code, _headers = file_analysis_cancel_with_http_info(data_id, opts)
      data
    end

    # Cancel File Analysis
    # When cancelling a file analysis, the connected analysis (e.g. files in an archive) that are still in progress will be cancelled also.   The cancelled analysis will be automatically closed. 
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def file_analysis_cancel_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.file_analysis_cancel ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling AnalysisApi.file_analysis_cancel"
      end
      # resource path
      local_var_path = '/file/{data_id}/cancel'.sub('{' + 'data_id' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'apikey'] = opts[:'apikey'] if !opts[:'apikey'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#file_analysis_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch Analysis Result
    # Retrieve scan results. Scan is done asynchronously and each scan request is tracked by a data ID. Initiating file scans and retrieving the results need to be done using two separate API calls. This request needs to be made multiple times until the scan is complete. Scan completion can be traced using `scan_results.progress_percentage` value from the response. 
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [AnalysisResult]
    def file_analysis_get(data_id, opts = {})
      data, _status_code, _headers = file_analysis_get_with_http_info(data_id, opts)
      data
    end

    # Fetch Analysis Result
    # Retrieve scan results. Scan is done asynchronously and each scan request is tracked by a data ID. Initiating file scans and retrieving the results need to be done using two separate API calls. This request needs to be made multiple times until the scan is complete. Scan completion can be traced using &#x60;scan_results.progress_percentage&#x60; value from the response. 
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [Array<(AnalysisResult, Integer, Hash)>] AnalysisResult data, response status code and response headers
    def file_analysis_get_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.file_analysis_get ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling AnalysisApi.file_analysis_get"
      end
      # resource path
      local_var_path = '/file/{data_id}'.sub('{' + 'data_id' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'apikey'] = opts[:'apikey'] if !opts[:'apikey'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AnalysisResult' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#file_analysis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Analyze File
    # ## Scanning a file using a specified workflow. Scan is done asynchronously and each scan request is tracked by data id of which result can be retrieved by API Fetch Scan Result. > _**Note**_: Chunked transfer encoding (applying header Transfer-Encoding: Chunked) is **not supported** on `/file` API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @option opts [String] :filename The name of the submitted file
    # @option opts [String] :filepath if local file scan is enabled the path to the file (see Security rule configuration)
    # @option opts [String] :user_agent user_agent header used to identify (and limit) access to a particular rule. For rule selection, &#x60;rule&#x60; header should be used. 
    # @option opts [String] :rule Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)       
    # @option opts [String] :workflow name of the selected workflow (deprecated, use \&quot;rule\&quot; header parameter instead)
    # @option opts [String] :batch Batch id to scan with, coming from &#x60;Initiate Batch&#x60; (If it is not given, it will be a single file scan.)
    # @option opts [String] :archivepwd password for archive ( URL encoded UTF-8 string)   Multiple passwords is also supported, format: archivepwd&lt;X&gt;     * X: Could be empty     * When having value, X must be a number &gt;&#x3D; 1   For example:     archivepwd1: \&quot;fox\&quot;     archivepwd2: \&quot;cow\&quot;     archivepwd3: \&quot;bear\&quot; 
    # @option opts [String] :metadata could be utilized for: Additional parameter for pre-defined post actions and external scanners (as a part of STDIN input). Customized macro variable for watermarking text (Proactive DLP engine feature). Additional context / verbose information for each file submission (appended into JSON response scan result). 
    # @option opts [String] :callbackurl Client&#39;s URL where MetaDefender Core will notify scan result back to whenever scan is finished (webhooks model). See details at 8.1.11.1. Individual file processing   * Format: &lt;protocol://&gt;&lt;ip | domain&gt;:&lt;port&gt;&lt;/path&gt;   * Example: http://10.0.1.100:8081/listenback 
    # @option opts [File] :body 
    # @return [InlineResponse2008]
    def file_analysis_post(opts = {})
      data, _status_code, _headers = file_analysis_post_with_http_info(opts)
      data
    end

    # Analyze File
    # ## Scanning a file using a specified workflow. Scan is done asynchronously and each scan request is tracked by data id of which result can be retrieved by API Fetch Scan Result. &gt; _**Note**_: Chunked transfer encoding (applying header Transfer-Encoding: Chunked) is **not supported** on &#x60;/file&#x60; API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @option opts [String] :filename The name of the submitted file
    # @option opts [String] :filepath if local file scan is enabled the path to the file (see Security rule configuration)
    # @option opts [String] :user_agent user_agent header used to identify (and limit) access to a particular rule. For rule selection, &#x60;rule&#x60; header should be used. 
    # @option opts [String] :rule Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)       
    # @option opts [String] :workflow name of the selected workflow (deprecated, use \&quot;rule\&quot; header parameter instead)
    # @option opts [String] :batch Batch id to scan with, coming from &#x60;Initiate Batch&#x60; (If it is not given, it will be a single file scan.)
    # @option opts [String] :archivepwd password for archive ( URL encoded UTF-8 string)   Multiple passwords is also supported, format: archivepwd&lt;X&gt;     * X: Could be empty     * When having value, X must be a number &gt;&#x3D; 1   For example:     archivepwd1: \&quot;fox\&quot;     archivepwd2: \&quot;cow\&quot;     archivepwd3: \&quot;bear\&quot; 
    # @option opts [String] :metadata could be utilized for: Additional parameter for pre-defined post actions and external scanners (as a part of STDIN input). Customized macro variable for watermarking text (Proactive DLP engine feature). Additional context / verbose information for each file submission (appended into JSON response scan result). 
    # @option opts [String] :callbackurl Client&#39;s URL where MetaDefender Core will notify scan result back to whenever scan is finished (webhooks model). See details at 8.1.11.1. Individual file processing   * Format: &lt;protocol://&gt;&lt;ip | domain&gt;:&lt;port&gt;&lt;/path&gt;   * Example: http://10.0.1.100:8081/listenback 
    # @option opts [File] :body 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def file_analysis_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.file_analysis_post ...'
      end
      # resource path
      local_var_path = '/file'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/octet-stream'])
      header_params[:'apikey'] = opts[:'apikey'] if !opts[:'apikey'].nil?
      header_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      header_params[:'filepath'] = opts[:'filepath'] if !opts[:'filepath'].nil?
      header_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?
      header_params[:'rule'] = opts[:'rule'] if !opts[:'rule'].nil?
      header_params[:'workflow'] = opts[:'workflow'] if !opts[:'workflow'].nil?
      header_params[:'batch'] = opts[:'batch'] if !opts[:'batch'].nil?
      header_params[:'archivepwd'] = opts[:'archivepwd'] if !opts[:'archivepwd'].nil?
      header_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?
      header_params[:'callbackurl'] = opts[:'callbackurl'] if !opts[:'callbackurl'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2008' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#file_analysis_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Sanitized Files
    # Retrieve sanitized file based on the `data_id` 
    # @param data_id [String] The data_id comes from the result of &#x60;Analyze a file&#x60;. In case of sanitizing the content of an archive, the data_id of contained file can be found in &#x60;Fetch analysis result&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [File]
    def sanitized_file(data_id, opts = {})
      data, _status_code, _headers = sanitized_file_with_http_info(data_id, opts)
      data
    end

    # Download Sanitized Files
    # Retrieve sanitized file based on the &#x60;data_id&#x60; 
    # @param data_id [String] The data_id comes from the result of &#x60;Analyze a file&#x60;. In case of sanitizing the content of an archive, the data_id of contained file can be found in &#x60;Fetch analysis result&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def sanitized_file_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.sanitized_file ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling AnalysisApi.sanitized_file"
      end
      # resource path
      local_var_path = '/file/converted/{data_id}'.sub('{' + 'data_id' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])
      header_params[:'apikey'] = opts[:'apikey'] if !opts[:'apikey'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#sanitized_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query webhook status
    # Prior to being notified by Core when webhooks mode is set, client can anytime ask Core for file / batch processing webhooks status. 
    # @param data_id [String] Either &#x60;data_id&#x60; or &#x60;batch_id&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [InlineResponse2009]
    def webhook_status(data_id, opts = {})
      data, _status_code, _headers = webhook_status_with_http_info(data_id, opts)
      data
    end

    # Query webhook status
    # Prior to being notified by Core when webhooks mode is set, client can anytime ask Core for file / batch processing webhooks status. 
    # @param data_id [String] Either &#x60;data_id&#x60; or &#x60;batch_id&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def webhook_status_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisApi.webhook_status ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling AnalysisApi.webhook_status"
      end
      # resource path
      local_var_path = '/file/webhook/{data_id}'.sub('{' + 'data_id' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'apikey'] = opts[:'apikey'] if !opts[:'apikey'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2009' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisApi#webhook_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
