=begin
#MetaDefender Core

### Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 

The version of the OpenAPI document: v4.18.0
Contact: feedback@opswat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module OpenapiClient
  class ProcessingResultsStringEnum
    THREAT_DETECTED = "Threat Detected".freeze
    INFECTED = "Infected".freeze
    SUSPICIOUS = "Suspicious".freeze
    FAILED = "Failed".freeze
    CLEANED___DELETED = "Cleaned / Deleted".freeze
    SCAN_SKIPPED___WHITELISTED = "Scan Skipped - Whitelisted".freeze
    SCAN_SKIPPED___BLACKLISTED = "Scan Skipped - Blacklisted".freeze
    EXCEEDED_ARCHIVE_DEPTH = "Exceeded Archive Depth".freeze
    NOT_SCANNED = "Not Scanned".freeze
    ENCRYPTED_ARCHIVE = "Encrypted Archive".freeze
    EXCEEDED_ARCHIVE_SIZE = "Exceeded Archive Size".freeze
    EXCEEDED_ARCHIVE_FILE_NUMBER = "Exceeded Archive File Number".freeze
    PASSWORD_PROTECTED_DOCUMENT = "Password Protected Document".freeze
    EXCEEDED_ARCHIVE_TIMEOUT = "Exceeded Archive Timeout".freeze
    FILE_TYPE_MISMATCH = "File type Mismatch".freeze
    POTENTIALLY_VULNERABLE_FILE = "Potentially Vulnerable File".freeze
    CANCELED = "Canceled".freeze
    SENSITIVE_DATA_FOUND = "Sensitive data found".freeze
    YARA_RULE_MATCHED = "Yara Rule Matched".freeze
    POTENTIALLY_UNWANTED_PROGRAM = "Potentially Unwanted Program".freeze
    UNSUPPORTED_FILE_TYPE = "Unsupported file type".freeze
    IN_PROGRESS = "In Progress".freeze

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def self.build_from_hash(value)
      new.build_from_hash(value)
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      constantValues = ProcessingResultsStringEnum.constants.select { |c| ProcessingResultsStringEnum::const_get(c) == value }
      raise "Invalid ENUM value #{value} for class #ProcessingResultsStringEnum" if constantValues.empty?
      value
    end
  end
end
