# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.new_user_role_request import NewUserRoleRequest
from openapi_server.models.new_user_role_request_rights import NewUserRoleRequestRights
from openapi_server.models.new_user_role_response_all_of import NewUserRoleResponseAllOf
from openapi_server import util

from openapi_server.models.new_user_role_request import NewUserRoleRequest  # noqa: E501
from openapi_server.models.new_user_role_request_rights import NewUserRoleRequestRights  # noqa: E501
from openapi_server.models.new_user_role_response_all_of import NewUserRoleResponseAllOf  # noqa: E501

class NewUserRoleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, display_name=None, rights=None, editable=None, id=None):  # noqa: E501
        """NewUserRoleResponse - a model defined in OpenAPI

        :param name: The name of this NewUserRoleResponse.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this NewUserRoleResponse.  # noqa: E501
        :type display_name: str
        :param rights: The rights of this NewUserRoleResponse.  # noqa: E501
        :type rights: NewUserRoleRequestRights
        :param editable: The editable of this NewUserRoleResponse.  # noqa: E501
        :type editable: bool
        :param id: The id of this NewUserRoleResponse.  # noqa: E501
        :type id: int
        """
        self.openapi_types = {
            'name': str,
            'display_name': str,
            'rights': NewUserRoleRequestRights,
            'editable': bool,
            'id': int
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'display_name',
            'rights': 'rights',
            'editable': 'editable',
            'id': 'id'
        }

        self._name = name
        self._display_name = display_name
        self._rights = rights
        self._editable = editable
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'NewUserRoleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewUserRoleResponse of this NewUserRoleResponse.  # noqa: E501
        :rtype: NewUserRoleResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NewUserRoleResponse.

        The name identifier of the role  # noqa: E501

        :return: The name of this NewUserRoleResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewUserRoleResponse.

        The name identifier of the role  # noqa: E501

        :param name: The name of this NewUserRoleResponse.
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this NewUserRoleResponse.

        The extended name showed in the Management Console.  # noqa: E501

        :return: The display_name of this NewUserRoleResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NewUserRoleResponse.

        The extended name showed in the Management Console.  # noqa: E501

        :param display_name: The display_name of this NewUserRoleResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def rights(self):
        """Gets the rights of this NewUserRoleResponse.


        :return: The rights of this NewUserRoleResponse.
        :rtype: NewUserRoleRequestRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this NewUserRoleResponse.


        :param rights: The rights of this NewUserRoleResponse.
        :type rights: NewUserRoleRequestRights
        """

        self._rights = rights

    @property
    def editable(self):
        """Gets the editable of this NewUserRoleResponse.

        If the role can be altered or not.  # noqa: E501

        :return: The editable of this NewUserRoleResponse.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this NewUserRoleResponse.

        If the role can be altered or not.  # noqa: E501

        :param editable: The editable of this NewUserRoleResponse.
        :type editable: bool
        """
        if editable is None:
            raise ValueError("Invalid value for `editable`, must not be `None`")  # noqa: E501

        self._editable = editable

    @property
    def id(self):
        """Gets the id of this NewUserRoleResponse.

        Internal used identifier  # noqa: E501

        :return: The id of this NewUserRoleResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewUserRoleResponse.

        Internal used identifier  # noqa: E501

        :param id: The id of this NewUserRoleResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
