# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LicenseInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_left=None, deployment=None, expiration=None, licensed_engines=None, max_node_count=None, online_activated=None, product_id=None, product_name=None):  # noqa: E501
        """LicenseInformation - a model defined in OpenAPI

        :param days_left: The days_left of this LicenseInformation.  # noqa: E501
        :type days_left: int
        :param deployment: The deployment of this LicenseInformation.  # noqa: E501
        :type deployment: str
        :param expiration: The expiration of this LicenseInformation.  # noqa: E501
        :type expiration: str
        :param licensed_engines: The licensed_engines of this LicenseInformation.  # noqa: E501
        :type licensed_engines: List[str]
        :param max_node_count: The max_node_count of this LicenseInformation.  # noqa: E501
        :type max_node_count: str
        :param online_activated: The online_activated of this LicenseInformation.  # noqa: E501
        :type online_activated: bool
        :param product_id: The product_id of this LicenseInformation.  # noqa: E501
        :type product_id: str
        :param product_name: The product_name of this LicenseInformation.  # noqa: E501
        :type product_name: str
        """
        self.openapi_types = {
            'days_left': int,
            'deployment': str,
            'expiration': str,
            'licensed_engines': List[str],
            'max_node_count': str,
            'online_activated': bool,
            'product_id': str,
            'product_name': str
        }

        self.attribute_map = {
            'days_left': 'days_left',
            'deployment': 'deployment',
            'expiration': 'expiration',
            'licensed_engines': 'licensed_engines',
            'max_node_count': 'max_node_count',
            'online_activated': 'online_activated',
            'product_id': 'product_id',
            'product_name': 'product_name'
        }

        self._days_left = days_left
        self._deployment = deployment
        self._expiration = expiration
        self._licensed_engines = licensed_engines
        self._max_node_count = max_node_count
        self._online_activated = online_activated
        self._product_id = product_id
        self._product_name = product_name

    @classmethod
    def from_dict(cls, dikt) -> 'LicenseInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LicenseInformation of this LicenseInformation.  # noqa: E501
        :rtype: LicenseInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_left(self):
        """Gets the days_left of this LicenseInformation.

        Number of days left before expiration  # noqa: E501

        :return: The days_left of this LicenseInformation.
        :rtype: int
        """
        return self._days_left

    @days_left.setter
    def days_left(self, days_left):
        """Sets the days_left of this LicenseInformation.

        Number of days left before expiration  # noqa: E501

        :param days_left: The days_left of this LicenseInformation.
        :type days_left: int
        """

        self._days_left = days_left

    @property
    def deployment(self):
        """Gets the deployment of this LicenseInformation.

        Unique identifier which is maps the current deployment to the activation  # noqa: E501

        :return: The deployment of this LicenseInformation.
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this LicenseInformation.

        Unique identifier which is maps the current deployment to the activation  # noqa: E501

        :param deployment: The deployment of this LicenseInformation.
        :type deployment: str
        """

        self._deployment = deployment

    @property
    def expiration(self):
        """Gets the expiration of this LicenseInformation.

        Expiration date in MM/DD/YYYY format.  # noqa: E501

        :return: The expiration of this LicenseInformation.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LicenseInformation.

        Expiration date in MM/DD/YYYY format.  # noqa: E501

        :param expiration: The expiration of this LicenseInformation.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def licensed_engines(self):
        """Gets the licensed_engines of this LicenseInformation.

        List of engine/module identifiers that have been licensed  # noqa: E501

        :return: The licensed_engines of this LicenseInformation.
        :rtype: List[str]
        """
        return self._licensed_engines

    @licensed_engines.setter
    def licensed_engines(self, licensed_engines):
        """Sets the licensed_engines of this LicenseInformation.

        List of engine/module identifiers that have been licensed  # noqa: E501

        :param licensed_engines: The licensed_engines of this LicenseInformation.
        :type licensed_engines: List[str]
        """

        self._licensed_engines = licensed_engines

    @property
    def max_node_count(self):
        """Gets the max_node_count of this LicenseInformation.

        Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance.  # noqa: E501

        :return: The max_node_count of this LicenseInformation.
        :rtype: str
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this LicenseInformation.

        Total number of deployed MetaDefender Nodes attached to this MetaDefender Core instance.  # noqa: E501

        :param max_node_count: The max_node_count of this LicenseInformation.
        :type max_node_count: str
        """

        self._max_node_count = max_node_count

    @property
    def online_activated(self):
        """Gets the online_activated of this LicenseInformation.

        Track online/offline activation mode  # noqa: E501

        :return: The online_activated of this LicenseInformation.
        :rtype: bool
        """
        return self._online_activated

    @online_activated.setter
    def online_activated(self, online_activated):
        """Sets the online_activated of this LicenseInformation.

        Track online/offline activation mode  # noqa: E501

        :param online_activated: The online_activated of this LicenseInformation.
        :type online_activated: bool
        """

        self._online_activated = online_activated

    @property
    def product_id(self):
        """Gets the product_id of this LicenseInformation.

        Official MetaDefender base SKU licensed.  # noqa: E501

        :return: The product_id of this LicenseInformation.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this LicenseInformation.

        Official MetaDefender base SKU licensed.  # noqa: E501

        :param product_id: The product_id of this LicenseInformation.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this LicenseInformation.

        Official MetaDefender base product name licensed.  # noqa: E501

        :return: The product_name of this LicenseInformation.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this LicenseInformation.

        Official MetaDefender base product name licensed.  # noqa: E501

        :param product_name: The product_name of this LicenseInformation.
        :type product_name: str
        """

        self._product_name = product_name
