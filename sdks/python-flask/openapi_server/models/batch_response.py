# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.batch_response_batch_files import BatchResponseBatchFiles
from openapi_server.models.batch_response_process_info import BatchResponseProcessInfo
from openapi_server.models.batch_response_scan_results import BatchResponseScanResults
from openapi_server import util

from openapi_server.models.batch_response_batch_files import BatchResponseBatchFiles  # noqa: E501
from openapi_server.models.batch_response_process_info import BatchResponseProcessInfo  # noqa: E501
from openapi_server.models.batch_response_scan_results import BatchResponseScanResults  # noqa: E501

class BatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_files=None, batch_id=None, is_closed=None, process_info=None, scan_results=None, user_data=None):  # noqa: E501
        """BatchResponse - a model defined in OpenAPI

        :param batch_files: The batch_files of this BatchResponse.  # noqa: E501
        :type batch_files: BatchResponseBatchFiles
        :param batch_id: The batch_id of this BatchResponse.  # noqa: E501
        :type batch_id: str
        :param is_closed: The is_closed of this BatchResponse.  # noqa: E501
        :type is_closed: bool
        :param process_info: The process_info of this BatchResponse.  # noqa: E501
        :type process_info: BatchResponseProcessInfo
        :param scan_results: The scan_results of this BatchResponse.  # noqa: E501
        :type scan_results: BatchResponseScanResults
        :param user_data: The user_data of this BatchResponse.  # noqa: E501
        :type user_data: str
        """
        self.openapi_types = {
            'batch_files': BatchResponseBatchFiles,
            'batch_id': str,
            'is_closed': bool,
            'process_info': BatchResponseProcessInfo,
            'scan_results': BatchResponseScanResults,
            'user_data': str
        }

        self.attribute_map = {
            'batch_files': 'batch_files',
            'batch_id': 'batch_id',
            'is_closed': 'is_closed',
            'process_info': 'process_info',
            'scan_results': 'scan_results',
            'user_data': 'user_data'
        }

        self._batch_files = batch_files
        self._batch_id = batch_id
        self._is_closed = is_closed
        self._process_info = process_info
        self._scan_results = scan_results
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchResponse of this BatchResponse.  # noqa: E501
        :rtype: BatchResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_files(self):
        """Gets the batch_files of this BatchResponse.


        :return: The batch_files of this BatchResponse.
        :rtype: BatchResponseBatchFiles
        """
        return self._batch_files

    @batch_files.setter
    def batch_files(self, batch_files):
        """Sets the batch_files of this BatchResponse.


        :param batch_files: The batch_files of this BatchResponse.
        :type batch_files: BatchResponseBatchFiles
        """

        self._batch_files = batch_files

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchResponse.

        The batch unique identifer  # noqa: E501

        :return: The batch_id of this BatchResponse.
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchResponse.

        The batch unique identifer  # noqa: E501

        :param batch_id: The batch_id of this BatchResponse.
        :type batch_id: str
        """

        self._batch_id = batch_id

    @property
    def is_closed(self):
        """Gets the is_closed of this BatchResponse.

        The batch status (open/close).  # noqa: E501

        :return: The is_closed of this BatchResponse.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this BatchResponse.

        The batch status (open/close).  # noqa: E501

        :param is_closed: The is_closed of this BatchResponse.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def process_info(self):
        """Gets the process_info of this BatchResponse.


        :return: The process_info of this BatchResponse.
        :rtype: BatchResponseProcessInfo
        """
        return self._process_info

    @process_info.setter
    def process_info(self, process_info):
        """Sets the process_info of this BatchResponse.


        :param process_info: The process_info of this BatchResponse.
        :type process_info: BatchResponseProcessInfo
        """

        self._process_info = process_info

    @property
    def scan_results(self):
        """Gets the scan_results of this BatchResponse.


        :return: The scan_results of this BatchResponse.
        :rtype: BatchResponseScanResults
        """
        return self._scan_results

    @scan_results.setter
    def scan_results(self, scan_results):
        """Sets the scan_results of this BatchResponse.


        :param scan_results: The scan_results of this BatchResponse.
        :type scan_results: BatchResponseScanResults
        """

        self._scan_results = scan_results

    @property
    def user_data(self):
        """Gets the user_data of this BatchResponse.

        Metadata submitted at batch creation.  # noqa: E501

        :return: The user_data of this BatchResponse.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this BatchResponse.

        Metadata submitted at batch creation.  # noqa: E501

        :param user_data: The user_data of this BatchResponse.
        :type user_data: str
        """

        self._user_data = user_data
