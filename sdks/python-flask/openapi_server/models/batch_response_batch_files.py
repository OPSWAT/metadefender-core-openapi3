# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.batch_response_batch_files_files_in_batch import BatchResponseBatchFilesFilesInBatch
from openapi_server import util

from openapi_server.models.batch_response_batch_files_files_in_batch import BatchResponseBatchFilesFilesInBatch  # noqa: E501

class BatchResponseBatchFiles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_count=None, files_in_batch=None, first_index=None, page_size=None):  # noqa: E501
        """BatchResponseBatchFiles - a model defined in OpenAPI

        :param batch_count: The batch_count of this BatchResponseBatchFiles.  # noqa: E501
        :type batch_count: int
        :param files_in_batch: The files_in_batch of this BatchResponseBatchFiles.  # noqa: E501
        :type files_in_batch: List[BatchResponseBatchFilesFilesInBatch]
        :param first_index: The first_index of this BatchResponseBatchFiles.  # noqa: E501
        :type first_index: int
        :param page_size: The page_size of this BatchResponseBatchFiles.  # noqa: E501
        :type page_size: int
        """
        self.openapi_types = {
            'batch_count': int,
            'files_in_batch': List[BatchResponseBatchFilesFilesInBatch],
            'first_index': int,
            'page_size': int
        }

        self.attribute_map = {
            'batch_count': 'batch_count',
            'files_in_batch': 'files_in_batch',
            'first_index': 'first_index',
            'page_size': 'page_size'
        }

        self._batch_count = batch_count
        self._files_in_batch = files_in_batch
        self._first_index = first_index
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponseBatchFiles':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchResponse_batch_files of this BatchResponseBatchFiles.  # noqa: E501
        :rtype: BatchResponseBatchFiles
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_count(self):
        """Gets the batch_count of this BatchResponseBatchFiles.

        How many files/entries in the batch.  # noqa: E501

        :return: The batch_count of this BatchResponseBatchFiles.
        :rtype: int
        """
        return self._batch_count

    @batch_count.setter
    def batch_count(self, batch_count):
        """Sets the batch_count of this BatchResponseBatchFiles.

        How many files/entries in the batch.  # noqa: E501

        :param batch_count: The batch_count of this BatchResponseBatchFiles.
        :type batch_count: int
        """

        self._batch_count = batch_count

    @property
    def files_in_batch(self):
        """Gets the files_in_batch of this BatchResponseBatchFiles.

        The list of files in this batch.  # noqa: E501

        :return: The files_in_batch of this BatchResponseBatchFiles.
        :rtype: List[BatchResponseBatchFilesFilesInBatch]
        """
        return self._files_in_batch

    @files_in_batch.setter
    def files_in_batch(self, files_in_batch):
        """Sets the files_in_batch of this BatchResponseBatchFiles.

        The list of files in this batch.  # noqa: E501

        :param files_in_batch: The files_in_batch of this BatchResponseBatchFiles.
        :type files_in_batch: List[BatchResponseBatchFilesFilesInBatch]
        """

        self._files_in_batch = files_in_batch

    @property
    def first_index(self):
        """Gets the first_index of this BatchResponseBatchFiles.

        The starting index in the batch. Used for pagination.  # noqa: E501

        :return: The first_index of this BatchResponseBatchFiles.
        :rtype: int
        """
        return self._first_index

    @first_index.setter
    def first_index(self, first_index):
        """Sets the first_index of this BatchResponseBatchFiles.

        The starting index in the batch. Used for pagination.  # noqa: E501

        :param first_index: The first_index of this BatchResponseBatchFiles.
        :type first_index: int
        """

        self._first_index = first_index

    @property
    def page_size(self):
        """Gets the page_size of this BatchResponseBatchFiles.

        The number of entries per page.  # noqa: E501

        :return: The page_size of this BatchResponseBatchFiles.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this BatchResponseBatchFiles.

        The number of entries per page.  # noqa: E501

        :param page_size: The page_size of this BatchResponseBatchFiles.
        :type page_size: int
        """

        self._page_size = page_size
