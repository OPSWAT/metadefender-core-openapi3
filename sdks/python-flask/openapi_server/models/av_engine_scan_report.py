# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AVEngineScanReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, def_time=None, eng_id=None, location=None, scan_result_i=None, scan_time=None, threat_found=None, wait_time=None):  # noqa: E501
        """AVEngineScanReport - a model defined in OpenAPI

        :param def_time: The def_time of this AVEngineScanReport.  # noqa: E501
        :type def_time: str
        :param eng_id: The eng_id of this AVEngineScanReport.  # noqa: E501
        :type eng_id: str
        :param location: The location of this AVEngineScanReport.  # noqa: E501
        :type location: str
        :param scan_result_i: The scan_result_i of this AVEngineScanReport.  # noqa: E501
        :type scan_result_i: int
        :param scan_time: The scan_time of this AVEngineScanReport.  # noqa: E501
        :type scan_time: int
        :param threat_found: The threat_found of this AVEngineScanReport.  # noqa: E501
        :type threat_found: str
        :param wait_time: The wait_time of this AVEngineScanReport.  # noqa: E501
        :type wait_time: int
        """
        self.openapi_types = {
            'def_time': str,
            'eng_id': str,
            'location': str,
            'scan_result_i': int,
            'scan_time': int,
            'threat_found': str,
            'wait_time': int
        }

        self.attribute_map = {
            'def_time': 'def_time',
            'eng_id': 'eng_id',
            'location': 'location',
            'scan_result_i': 'scan_result_i',
            'scan_time': 'scan_time',
            'threat_found': 'threat_found',
            'wait_time': 'wait_time'
        }

        self._def_time = def_time
        self._eng_id = eng_id
        self._location = location
        self._scan_result_i = scan_result_i
        self._scan_time = scan_time
        self._threat_found = threat_found
        self._wait_time = wait_time

    @classmethod
    def from_dict(cls, dikt) -> 'AVEngineScanReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AVEngineScanReport of this AVEngineScanReport.  # noqa: E501
        :rtype: AVEngineScanReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def def_time(self):
        """Gets the def_time of this AVEngineScanReport.

        The database definition time for this engine  # noqa: E501

        :return: The def_time of this AVEngineScanReport.
        :rtype: str
        """
        return self._def_time

    @def_time.setter
    def def_time(self, def_time):
        """Sets the def_time of this AVEngineScanReport.

        The database definition time for this engine  # noqa: E501

        :param def_time: The def_time of this AVEngineScanReport.
        :type def_time: str
        """

        self._def_time = def_time

    @property
    def eng_id(self):
        """Gets the eng_id of this AVEngineScanReport.

        The  unique identification string for the engine  # noqa: E501

        :return: The eng_id of this AVEngineScanReport.
        :rtype: str
        """
        return self._eng_id

    @eng_id.setter
    def eng_id(self, eng_id):
        """Sets the eng_id of this AVEngineScanReport.

        The  unique identification string for the engine  # noqa: E501

        :param eng_id: The eng_id of this AVEngineScanReport.
        :type eng_id: str
        """

        self._eng_id = eng_id

    @property
    def location(self):
        """Gets the location of this AVEngineScanReport.

        Where this engine is deployed (local/remote).  # noqa: E501

        :return: The location of this AVEngineScanReport.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AVEngineScanReport.

        Where this engine is deployed (local/remote).  # noqa: E501

        :param location: The location of this AVEngineScanReport.
        :type location: str
        """

        self._location = location

    @property
    def scan_result_i(self):
        """Gets the scan_result_i of this AVEngineScanReport.

        Scan result as index in the Processing Results table  # noqa: E501

        :return: The scan_result_i of this AVEngineScanReport.
        :rtype: int
        """
        return self._scan_result_i

    @scan_result_i.setter
    def scan_result_i(self, scan_result_i):
        """Sets the scan_result_i of this AVEngineScanReport.

        Scan result as index in the Processing Results table  # noqa: E501

        :param scan_result_i: The scan_result_i of this AVEngineScanReport.
        :type scan_result_i: int
        """

        self._scan_result_i = scan_result_i

    @property
    def scan_time(self):
        """Gets the scan_time of this AVEngineScanReport.

        The time elapsed during scan with this engine (in milliseconds).  # noqa: E501

        :return: The scan_time of this AVEngineScanReport.
        :rtype: int
        """
        return self._scan_time

    @scan_time.setter
    def scan_time(self, scan_time):
        """Sets the scan_time of this AVEngineScanReport.

        The time elapsed during scan with this engine (in milliseconds).  # noqa: E501

        :param scan_time: The scan_time of this AVEngineScanReport.
        :type scan_time: int
        """

        self._scan_time = scan_time

    @property
    def threat_found(self):
        """Gets the threat_found of this AVEngineScanReport.

        The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine.  # noqa: E501

        :return: The threat_found of this AVEngineScanReport.
        :rtype: str
        """
        return self._threat_found

    @threat_found.setter
    def threat_found(self, threat_found):
        """Sets the threat_found of this AVEngineScanReport.

        The threat name, IF scan result is Infected or Suspicious. Otherwise empty string or error message from the engine.  # noqa: E501

        :param threat_found: The threat_found of this AVEngineScanReport.
        :type threat_found: str
        """

        self._threat_found = threat_found

    @property
    def wait_time(self):
        """Gets the wait_time of this AVEngineScanReport.

        Time elapsed between sending file to node and receiving the result from the engine (in milliseconds).  # noqa: E501

        :return: The wait_time of this AVEngineScanReport.
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this AVEngineScanReport.

        Time elapsed between sending file to node and receiving the result from the engine (in milliseconds).  # noqa: E501

        :param wait_time: The wait_time of this AVEngineScanReport.
        :type wait_time: int
        """

        self._wait_time = wait_time
