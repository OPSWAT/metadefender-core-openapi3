# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BatchId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_id=None):  # noqa: E501
        """BatchId - a model defined in OpenAPI

        :param batch_id: The batch_id of this BatchId.  # noqa: E501
        :type batch_id: str
        """
        self.openapi_types = {
            'batch_id': str
        }

        self.attribute_map = {
            'batch_id': 'batch_id'
        }

        self._batch_id = batch_id

    @classmethod
    def from_dict(cls, dikt) -> 'BatchId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchId of this BatchId.  # noqa: E501
        :rtype: BatchId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_id(self):
        """Gets the batch_id of this BatchId.

        The batch identifier used to submit files in the batch and to close the batch.  # noqa: E501

        :return: The batch_id of this BatchId.
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this BatchId.

        The batch identifier used to submit files in the batch and to close the batch.  # noqa: E501

        :param batch_id: The batch_id of this BatchId.
        :type batch_id: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id
