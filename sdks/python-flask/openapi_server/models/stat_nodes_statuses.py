# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.stat_nodes_engines import StatNodesEngines
from openapi_server.models.stat_nodes_issues import StatNodesIssues
from openapi_server import util

from openapi_server.models.stat_nodes_engines import StatNodesEngines  # noqa: E501
from openapi_server.models.stat_nodes_issues import StatNodesIssues  # noqa: E501

class StatNodesStatuses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, cpu_cores=None, engines=None, free_disk_space=None, id=None, issues=None, load=None, os=None, scan_queue=None, total_memory=None, version=None):  # noqa: E501
        """StatNodesStatuses - a model defined in OpenAPI

        :param address: The address of this StatNodesStatuses.  # noqa: E501
        :type address: str
        :param cpu_cores: The cpu_cores of this StatNodesStatuses.  # noqa: E501
        :type cpu_cores: int
        :param engines: The engines of this StatNodesStatuses.  # noqa: E501
        :type engines: List[StatNodesEngines]
        :param free_disk_space: The free_disk_space of this StatNodesStatuses.  # noqa: E501
        :type free_disk_space: int
        :param id: The id of this StatNodesStatuses.  # noqa: E501
        :type id: str
        :param issues: The issues of this StatNodesStatuses.  # noqa: E501
        :type issues: List[StatNodesIssues]
        :param load: The load of this StatNodesStatuses.  # noqa: E501
        :type load: int
        :param os: The os of this StatNodesStatuses.  # noqa: E501
        :type os: str
        :param scan_queue: The scan_queue of this StatNodesStatuses.  # noqa: E501
        :type scan_queue: int
        :param total_memory: The total_memory of this StatNodesStatuses.  # noqa: E501
        :type total_memory: int
        :param version: The version of this StatNodesStatuses.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'address': str,
            'cpu_cores': int,
            'engines': List[StatNodesEngines],
            'free_disk_space': int,
            'id': str,
            'issues': List[StatNodesIssues],
            'load': int,
            'os': str,
            'scan_queue': int,
            'total_memory': int,
            'version': str
        }

        self.attribute_map = {
            'address': 'address',
            'cpu_cores': 'cpu_cores',
            'engines': 'engines',
            'free_disk_space': 'free_disk_space',
            'id': 'id',
            'issues': 'issues',
            'load': 'load',
            'os': 'os',
            'scan_queue': 'scan_queue',
            'total_memory': 'total_memory',
            'version': 'version'
        }

        self._address = address
        self._cpu_cores = cpu_cores
        self._engines = engines
        self._free_disk_space = free_disk_space
        self._id = id
        self._issues = issues
        self._load = load
        self._os = os
        self._scan_queue = scan_queue
        self._total_memory = total_memory
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'StatNodesStatuses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _stat_nodes_statuses of this StatNodesStatuses.  # noqa: E501
        :rtype: StatNodesStatuses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this StatNodesStatuses.

        The location of the Node. If local, is empty string.  # noqa: E501

        :return: The address of this StatNodesStatuses.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StatNodesStatuses.

        The location of the Node. If local, is empty string.  # noqa: E501

        :param address: The address of this StatNodesStatuses.
        :type address: str
        """

        self._address = address

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this StatNodesStatuses.

        The number of CPU Cores allocated to this Node.  # noqa: E501

        :return: The cpu_cores of this StatNodesStatuses.
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this StatNodesStatuses.

        The number of CPU Cores allocated to this Node.  # noqa: E501

        :param cpu_cores: The cpu_cores of this StatNodesStatuses.
        :type cpu_cores: int
        """

        self._cpu_cores = cpu_cores

    @property
    def engines(self):
        """Gets the engines of this StatNodesStatuses.

        Summary of each engine status deployed on this Node.  # noqa: E501

        :return: The engines of this StatNodesStatuses.
        :rtype: List[StatNodesEngines]
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this StatNodesStatuses.

        Summary of each engine status deployed on this Node.  # noqa: E501

        :param engines: The engines of this StatNodesStatuses.
        :type engines: List[StatNodesEngines]
        """

        self._engines = engines

    @property
    def free_disk_space(self):
        """Gets the free_disk_space of this StatNodesStatuses.

        Reported available disk on that Node (in bytes).  # noqa: E501

        :return: The free_disk_space of this StatNodesStatuses.
        :rtype: int
        """
        return self._free_disk_space

    @free_disk_space.setter
    def free_disk_space(self, free_disk_space):
        """Sets the free_disk_space of this StatNodesStatuses.

        Reported available disk on that Node (in bytes).  # noqa: E501

        :param free_disk_space: The free_disk_space of this StatNodesStatuses.
        :type free_disk_space: int
        """

        self._free_disk_space = free_disk_space

    @property
    def id(self):
        """Gets the id of this StatNodesStatuses.

        Node identfier  # noqa: E501

        :return: The id of this StatNodesStatuses.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatNodesStatuses.

        Node identfier  # noqa: E501

        :param id: The id of this StatNodesStatuses.
        :type id: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this StatNodesStatuses.

        A list of all potentials problems on that Node.  # noqa: E501

        :return: The issues of this StatNodesStatuses.
        :rtype: List[StatNodesIssues]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this StatNodesStatuses.

        A list of all potentials problems on that Node.  # noqa: E501

        :param issues: The issues of this StatNodesStatuses.
        :type issues: List[StatNodesIssues]
        """

        self._issues = issues

    @property
    def load(self):
        """Gets the load of this StatNodesStatuses.

        Current CPU utilization on this Node (in percentage).  # noqa: E501

        :return: The load of this StatNodesStatuses.
        :rtype: int
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this StatNodesStatuses.

        Current CPU utilization on this Node (in percentage).  # noqa: E501

        :param load: The load of this StatNodesStatuses.
        :type load: int
        """

        self._load = load

    @property
    def os(self):
        """Gets the os of this StatNodesStatuses.

        Current used OS  # noqa: E501

        :return: The os of this StatNodesStatuses.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this StatNodesStatuses.

        Current used OS  # noqa: E501

        :param os: The os of this StatNodesStatuses.
        :type os: str
        """

        self._os = os

    @property
    def scan_queue(self):
        """Gets the scan_queue of this StatNodesStatuses.

        Current load on the Node, how many files are in the queue  # noqa: E501

        :return: The scan_queue of this StatNodesStatuses.
        :rtype: int
        """
        return self._scan_queue

    @scan_queue.setter
    def scan_queue(self, scan_queue):
        """Sets the scan_queue of this StatNodesStatuses.

        Current load on the Node, how many files are in the queue  # noqa: E501

        :param scan_queue: The scan_queue of this StatNodesStatuses.
        :type scan_queue: int
        """

        self._scan_queue = scan_queue

    @property
    def total_memory(self):
        """Gets the total_memory of this StatNodesStatuses.

        How much memory is allocated on this Node (in MB).  # noqa: E501

        :return: The total_memory of this StatNodesStatuses.
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this StatNodesStatuses.

        How much memory is allocated on this Node (in MB).  # noqa: E501

        :param total_memory: The total_memory of this StatNodesStatuses.
        :type total_memory: int
        """

        self._total_memory = total_memory

    @property
    def version(self):
        """Gets the version of this StatNodesStatuses.

        Product version  # noqa: E501

        :return: The version of this StatNodesStatuses.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatNodesStatuses.

        Product version  # noqa: E501

        :param version: The version of this StatNodesStatuses.
        :type version: str
        """

        self._version = version
