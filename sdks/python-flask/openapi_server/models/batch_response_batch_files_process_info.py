# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BatchResponseBatchFilesProcessInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked_reason=None, progress_percentage=None, result=None, verdicts=None):  # noqa: E501
        """BatchResponseBatchFilesProcessInfo - a model defined in OpenAPI

        :param blocked_reason: The blocked_reason of this BatchResponseBatchFilesProcessInfo.  # noqa: E501
        :type blocked_reason: str
        :param progress_percentage: The progress_percentage of this BatchResponseBatchFilesProcessInfo.  # noqa: E501
        :type progress_percentage: int
        :param result: The result of this BatchResponseBatchFilesProcessInfo.  # noqa: E501
        :type result: str
        :param verdicts: The verdicts of this BatchResponseBatchFilesProcessInfo.  # noqa: E501
        :type verdicts: List[str]
        """
        self.openapi_types = {
            'blocked_reason': str,
            'progress_percentage': int,
            'result': str,
            'verdicts': List[str]
        }

        self.attribute_map = {
            'blocked_reason': 'blocked_reason',
            'progress_percentage': 'progress_percentage',
            'result': 'result',
            'verdicts': 'verdicts'
        }

        self._blocked_reason = blocked_reason
        self._progress_percentage = progress_percentage
        self._result = result
        self._verdicts = verdicts

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponseBatchFilesProcessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchResponse_batch_files_process_info of this BatchResponseBatchFilesProcessInfo.  # noqa: E501
        :rtype: BatchResponseBatchFilesProcessInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this BatchResponseBatchFilesProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :return: The blocked_reason of this BatchResponseBatchFilesProcessInfo.
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this BatchResponseBatchFilesProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :param blocked_reason: The blocked_reason of this BatchResponseBatchFilesProcessInfo.
        :type blocked_reason: str
        """

        self._blocked_reason = blocked_reason

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this BatchResponseBatchFilesProcessInfo.

        Percentage of processing completed (from 1-100).  # noqa: E501

        :return: The progress_percentage of this BatchResponseBatchFilesProcessInfo.
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this BatchResponseBatchFilesProcessInfo.

        Percentage of processing completed (from 1-100).  # noqa: E501

        :param progress_percentage: The progress_percentage of this BatchResponseBatchFilesProcessInfo.
        :type progress_percentage: int
        """

        self._progress_percentage = progress_percentage

    @property
    def result(self):
        """Gets the result of this BatchResponseBatchFilesProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :return: The result of this BatchResponseBatchFilesProcessInfo.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BatchResponseBatchFilesProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :param result: The result of this BatchResponseBatchFilesProcessInfo.
        :type result: str
        """

        self._result = result

    @property
    def verdicts(self):
        """Gets the verdicts of this BatchResponseBatchFilesProcessInfo.

        Aggregated list of potential issues.  # noqa: E501

        :return: The verdicts of this BatchResponseBatchFilesProcessInfo.
        :rtype: List[str]
        """
        return self._verdicts

    @verdicts.setter
    def verdicts(self, verdicts):
        """Sets the verdicts of this BatchResponseBatchFilesProcessInfo.

        Aggregated list of potential issues.  # noqa: E501

        :param verdicts: The verdicts of this BatchResponseBatchFilesProcessInfo.
        :type verdicts: List[str]
        """

        self._verdicts = verdicts
