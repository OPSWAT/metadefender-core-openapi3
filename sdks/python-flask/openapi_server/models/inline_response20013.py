# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.stat_nodes_statuses import StatNodesStatuses
from openapi_server import util

from openapi_server.models.stat_nodes_statuses import StatNodesStatuses  # noqa: E501

class InlineResponse20013(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_nodes_allowed=None, max_node_count=None, statuses=None):  # noqa: E501
        """InlineResponse20013 - a model defined in OpenAPI

        :param external_nodes_allowed: The external_nodes_allowed of this InlineResponse20013.  # noqa: E501
        :type external_nodes_allowed: bool
        :param max_node_count: The max_node_count of this InlineResponse20013.  # noqa: E501
        :type max_node_count: int
        :param statuses: The statuses of this InlineResponse20013.  # noqa: E501
        :type statuses: List[StatNodesStatuses]
        """
        self.openapi_types = {
            'external_nodes_allowed': bool,
            'max_node_count': int,
            'statuses': List[StatNodesStatuses]
        }

        self.attribute_map = {
            'external_nodes_allowed': 'external_nodes_allowed',
            'max_node_count': 'max_node_count',
            'statuses': 'statuses'
        }

        self._external_nodes_allowed = external_nodes_allowed
        self._max_node_count = max_node_count
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse20013':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_13 of this InlineResponse20013.  # noqa: E501
        :rtype: InlineResponse20013
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_nodes_allowed(self):
        """Gets the external_nodes_allowed of this InlineResponse20013.

        Configuration option if additional external nodes could be connected.  # noqa: E501

        :return: The external_nodes_allowed of this InlineResponse20013.
        :rtype: bool
        """
        return self._external_nodes_allowed

    @external_nodes_allowed.setter
    def external_nodes_allowed(self, external_nodes_allowed):
        """Sets the external_nodes_allowed of this InlineResponse20013.

        Configuration option if additional external nodes could be connected.  # noqa: E501

        :param external_nodes_allowed: The external_nodes_allowed of this InlineResponse20013.
        :type external_nodes_allowed: bool
        """

        self._external_nodes_allowed = external_nodes_allowed

    @property
    def max_node_count(self):
        """Gets the max_node_count of this InlineResponse20013.

        Remaining available slots to connect to this instance.  # noqa: E501

        :return: The max_node_count of this InlineResponse20013.
        :rtype: int
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this InlineResponse20013.

        Remaining available slots to connect to this instance.  # noqa: E501

        :param max_node_count: The max_node_count of this InlineResponse20013.
        :type max_node_count: int
        """

        self._max_node_count = max_node_count

    @property
    def statuses(self):
        """Gets the statuses of this InlineResponse20013.

        Array with a status for each attached node.  # noqa: E501

        :return: The statuses of this InlineResponse20013.
        :rtype: List[StatNodesStatuses]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this InlineResponse20013.

        Array with a status for each attached node.  # noqa: E501

        :param statuses: The statuses of this InlineResponse20013.
        :type statuses: List[StatNodesStatuses]
        """

        self._statuses = statuses
