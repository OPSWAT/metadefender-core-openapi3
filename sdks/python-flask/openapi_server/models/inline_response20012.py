# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineResponse20012(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, def_time=None, download_progress=None, download_time=None, eng_id=None, eng_name=None, eng_type=None, eng_ver=None, engine_type=None, state=None):  # noqa: E501
        """InlineResponse20012 - a model defined in OpenAPI

        :param active: The active of this InlineResponse20012.  # noqa: E501
        :type active: bool
        :param def_time: The def_time of this InlineResponse20012.  # noqa: E501
        :type def_time: str
        :param download_progress: The download_progress of this InlineResponse20012.  # noqa: E501
        :type download_progress: int
        :param download_time: The download_time of this InlineResponse20012.  # noqa: E501
        :type download_time: str
        :param eng_id: The eng_id of this InlineResponse20012.  # noqa: E501
        :type eng_id: str
        :param eng_name: The eng_name of this InlineResponse20012.  # noqa: E501
        :type eng_name: str
        :param eng_type: The eng_type of this InlineResponse20012.  # noqa: E501
        :type eng_type: str
        :param eng_ver: The eng_ver of this InlineResponse20012.  # noqa: E501
        :type eng_ver: str
        :param engine_type: The engine_type of this InlineResponse20012.  # noqa: E501
        :type engine_type: str
        :param state: The state of this InlineResponse20012.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'active': bool,
            'def_time': str,
            'download_progress': int,
            'download_time': str,
            'eng_id': str,
            'eng_name': str,
            'eng_type': str,
            'eng_ver': str,
            'engine_type': str,
            'state': str
        }

        self.attribute_map = {
            'active': 'active',
            'def_time': 'def_time',
            'download_progress': 'download_progress',
            'download_time': 'download_time',
            'eng_id': 'eng_id',
            'eng_name': 'eng_name',
            'eng_type': 'eng_type',
            'eng_ver': 'eng_ver',
            'engine_type': 'engine_type',
            'state': 'state'
        }

        self._active = active
        self._def_time = def_time
        self._download_progress = download_progress
        self._download_time = download_time
        self._eng_id = eng_id
        self._eng_name = eng_name
        self._eng_type = eng_type
        self._eng_ver = eng_ver
        self._engine_type = engine_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse20012':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_12 of this InlineResponse20012.  # noqa: E501
        :rtype: InlineResponse20012
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this InlineResponse20012.

        If used by at least one engine  # noqa: E501

        :return: The active of this InlineResponse20012.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse20012.

        If used by at least one engine  # noqa: E501

        :param active: The active of this InlineResponse20012.
        :type active: bool
        """

        self._active = active

    @property
    def def_time(self):
        """Gets the def_time of this InlineResponse20012.

        The database definition time for this engine  # noqa: E501

        :return: The def_time of this InlineResponse20012.
        :rtype: str
        """
        return self._def_time

    @def_time.setter
    def def_time(self, def_time):
        """Sets the def_time of this InlineResponse20012.

        The database definition time for this engine  # noqa: E501

        :param def_time: The def_time of this InlineResponse20012.
        :type def_time: str
        """

        self._def_time = def_time

    @property
    def download_progress(self):
        """Gets the download_progress of this InlineResponse20012.

        The percentage progress of download  # noqa: E501

        :return: The download_progress of this InlineResponse20012.
        :rtype: int
        """
        return self._download_progress

    @download_progress.setter
    def download_progress(self, download_progress):
        """Sets the download_progress of this InlineResponse20012.

        The percentage progress of download  # noqa: E501

        :param download_progress: The download_progress of this InlineResponse20012.
        :type download_progress: int
        """

        self._download_progress = download_progress

    @property
    def download_time(self):
        """Gets the download_time of this InlineResponse20012.

        When this engine downloaded from the update server.  # noqa: E501

        :return: The download_time of this InlineResponse20012.
        :rtype: str
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this InlineResponse20012.

        When this engine downloaded from the update server.  # noqa: E501

        :param download_time: The download_time of this InlineResponse20012.
        :type download_time: str
        """

        self._download_time = download_time

    @property
    def eng_id(self):
        """Gets the eng_id of this InlineResponse20012.

        Engine internal ID  # noqa: E501

        :return: The eng_id of this InlineResponse20012.
        :rtype: str
        """
        return self._eng_id

    @eng_id.setter
    def eng_id(self, eng_id):
        """Sets the eng_id of this InlineResponse20012.

        Engine internal ID  # noqa: E501

        :param eng_id: The eng_id of this InlineResponse20012.
        :type eng_id: str
        """

        self._eng_id = eng_id

    @property
    def eng_name(self):
        """Gets the eng_name of this InlineResponse20012.

        Engine name  # noqa: E501

        :return: The eng_name of this InlineResponse20012.
        :rtype: str
        """
        return self._eng_name

    @eng_name.setter
    def eng_name(self, eng_name):
        """Sets the eng_name of this InlineResponse20012.

        Engine name  # noqa: E501

        :param eng_name: The eng_name of this InlineResponse20012.
        :type eng_name: str
        """

        self._eng_name = eng_name

    @property
    def eng_type(self):
        """Gets the eng_type of this InlineResponse20012.

        Engine type in human readable form  # noqa: E501

        :return: The eng_type of this InlineResponse20012.
        :rtype: str
        """
        return self._eng_type

    @eng_type.setter
    def eng_type(self, eng_type):
        """Sets the eng_type of this InlineResponse20012.

        Engine type in human readable form  # noqa: E501

        :param eng_type: The eng_type of this InlineResponse20012.
        :type eng_type: str
        """

        self._eng_type = eng_type

    @property
    def eng_ver(self):
        """Gets the eng_ver of this InlineResponse20012.

        Engine's version (format differs from one engine to another).  # noqa: E501

        :return: The eng_ver of this InlineResponse20012.
        :rtype: str
        """
        return self._eng_ver

    @eng_ver.setter
    def eng_ver(self, eng_ver):
        """Sets the eng_ver of this InlineResponse20012.

        Engine's version (format differs from one engine to another).  # noqa: E501

        :param eng_ver: The eng_ver of this InlineResponse20012.
        :type eng_ver: str
        """

        self._eng_ver = eng_ver

    @property
    def engine_type(self):
        """Gets the engine_type of this InlineResponse20012.

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :return: The engine_type of this InlineResponse20012.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this InlineResponse20012.

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :param engine_type: The engine_type of this InlineResponse20012.
        :type engine_type: str
        """
        allowed_values = ["av", "archive", "filetype"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def state(self):
        """Gets the state of this InlineResponse20012.

        Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed   # noqa: E501

        :return: The state of this InlineResponse20012.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20012.

        Status of the engine:   * downloading   * downloaded   * staging   * production   * removed   * temporary failed   * permanently failed   * content invalid   * download failed   # noqa: E501

        :param state: The state of this InlineResponse20012.
        :type state: str
        """
        allowed_values = ["downloading", "downloaded", "staging", "production", "removed", "temporary failed", "permanently failed", "content invalid", "download failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
