# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.batch_response_batch_files_process_info import BatchResponseBatchFilesProcessInfo
from openapi_server.models.processing_results_index_enum import ProcessingResultsIndexEnum
from openapi_server.models.processing_results_string_enum import ProcessingResultsStringEnum
from openapi_server import util

from openapi_server.models.batch_response_batch_files_process_info import BatchResponseBatchFilesProcessInfo  # noqa: E501
from openapi_server.models.processing_results_index_enum import ProcessingResultsIndexEnum  # noqa: E501
from openapi_server.models.processing_results_string_enum import ProcessingResultsStringEnum  # noqa: E501

class BatchResponseBatchFilesFilesInBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_id=None, detected_by=None, display_name=None, file_size=None, file_type=None, file_type_description=None, process_info=None, progress_percentage=None, scan_all_result_a=None, scan_all_result_i=None, scanned_with=None):  # noqa: E501
        """BatchResponseBatchFilesFilesInBatch - a model defined in OpenAPI

        :param data_id: The data_id of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type data_id: str
        :param detected_by: The detected_by of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type detected_by: int
        :param display_name: The display_name of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type display_name: str
        :param file_size: The file_size of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type file_size: int
        :param file_type: The file_type of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type file_type: str
        :param file_type_description: The file_type_description of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type file_type_description: str
        :param process_info: The process_info of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type process_info: BatchResponseBatchFilesProcessInfo
        :param progress_percentage: The progress_percentage of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type progress_percentage: int
        :param scan_all_result_a: The scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type scan_all_result_a: ProcessingResultsStringEnum
        :param scan_all_result_i: The scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type scan_all_result_i: ProcessingResultsIndexEnum
        :param scanned_with: The scanned_with of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :type scanned_with: int
        """
        self.openapi_types = {
            'data_id': str,
            'detected_by': int,
            'display_name': str,
            'file_size': int,
            'file_type': str,
            'file_type_description': str,
            'process_info': BatchResponseBatchFilesProcessInfo,
            'progress_percentage': int,
            'scan_all_result_a': ProcessingResultsStringEnum,
            'scan_all_result_i': ProcessingResultsIndexEnum,
            'scanned_with': int
        }

        self.attribute_map = {
            'data_id': 'data_id',
            'detected_by': 'detected_by',
            'display_name': 'display_name',
            'file_size': 'file_size',
            'file_type': 'file_type',
            'file_type_description': 'file_type_description',
            'process_info': 'process_info',
            'progress_percentage': 'progress_percentage',
            'scan_all_result_a': 'scan_all_result_a',
            'scan_all_result_i': 'scan_all_result_i',
            'scanned_with': 'scanned_with'
        }

        self._data_id = data_id
        self._detected_by = detected_by
        self._display_name = display_name
        self._file_size = file_size
        self._file_type = file_type
        self._file_type_description = file_type_description
        self._process_info = process_info
        self._progress_percentage = progress_percentage
        self._scan_all_result_a = scan_all_result_a
        self._scan_all_result_i = scan_all_result_i
        self._scanned_with = scanned_with

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponseBatchFilesFilesInBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchResponse_batch_files_files_in_batch of this BatchResponseBatchFilesFilesInBatch.  # noqa: E501
        :rtype: BatchResponseBatchFilesFilesInBatch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_id(self):
        """Gets the data_id of this BatchResponseBatchFilesFilesInBatch.

        Unique identifer for the file.  # noqa: E501

        :return: The data_id of this BatchResponseBatchFilesFilesInBatch.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this BatchResponseBatchFilesFilesInBatch.

        Unique identifer for the file.  # noqa: E501

        :param data_id: The data_id of this BatchResponseBatchFilesFilesInBatch.
        :type data_id: str
        """

        self._data_id = data_id

    @property
    def detected_by(self):
        """Gets the detected_by of this BatchResponseBatchFilesFilesInBatch.

        Total number of engines that detected this file.  # noqa: E501

        :return: The detected_by of this BatchResponseBatchFilesFilesInBatch.
        :rtype: int
        """
        return self._detected_by

    @detected_by.setter
    def detected_by(self, detected_by):
        """Sets the detected_by of this BatchResponseBatchFilesFilesInBatch.

        Total number of engines that detected this file.  # noqa: E501

        :param detected_by: The detected_by of this BatchResponseBatchFilesFilesInBatch.
        :type detected_by: int
        """

        self._detected_by = detected_by

    @property
    def display_name(self):
        """Gets the display_name of this BatchResponseBatchFilesFilesInBatch.

        The filename reported via `filename` header.  # noqa: E501

        :return: The display_name of this BatchResponseBatchFilesFilesInBatch.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BatchResponseBatchFilesFilesInBatch.

        The filename reported via `filename` header.  # noqa: E501

        :param display_name: The display_name of this BatchResponseBatchFilesFilesInBatch.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def file_size(self):
        """Gets the file_size of this BatchResponseBatchFilesFilesInBatch.

        Total file size in bytes.  # noqa: E501

        :return: The file_size of this BatchResponseBatchFilesFilesInBatch.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this BatchResponseBatchFilesFilesInBatch.

        Total file size in bytes.  # noqa: E501

        :param file_size: The file_size of this BatchResponseBatchFilesFilesInBatch.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """Gets the file_type of this BatchResponseBatchFilesFilesInBatch.

        The filetype using mimetype.  # noqa: E501

        :return: The file_type of this BatchResponseBatchFilesFilesInBatch.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this BatchResponseBatchFilesFilesInBatch.

        The filetype using mimetype.  # noqa: E501

        :param file_type: The file_type of this BatchResponseBatchFilesFilesInBatch.
        :type file_type: str
        """

        self._file_type = file_type

    @property
    def file_type_description(self):
        """Gets the file_type_description of this BatchResponseBatchFilesFilesInBatch.

        The filetype in human readable format.  # noqa: E501

        :return: The file_type_description of this BatchResponseBatchFilesFilesInBatch.
        :rtype: str
        """
        return self._file_type_description

    @file_type_description.setter
    def file_type_description(self, file_type_description):
        """Sets the file_type_description of this BatchResponseBatchFilesFilesInBatch.

        The filetype in human readable format.  # noqa: E501

        :param file_type_description: The file_type_description of this BatchResponseBatchFilesFilesInBatch.
        :type file_type_description: str
        """

        self._file_type_description = file_type_description

    @property
    def process_info(self):
        """Gets the process_info of this BatchResponseBatchFilesFilesInBatch.


        :return: The process_info of this BatchResponseBatchFilesFilesInBatch.
        :rtype: BatchResponseBatchFilesProcessInfo
        """
        return self._process_info

    @process_info.setter
    def process_info(self, process_info):
        """Sets the process_info of this BatchResponseBatchFilesFilesInBatch.


        :param process_info: The process_info of this BatchResponseBatchFilesFilesInBatch.
        :type process_info: BatchResponseBatchFilesProcessInfo
        """

        self._process_info = process_info

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this BatchResponseBatchFilesFilesInBatch.

        Track analysis progress until reaches 100.  # noqa: E501

        :return: The progress_percentage of this BatchResponseBatchFilesFilesInBatch.
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this BatchResponseBatchFilesFilesInBatch.

        Track analysis progress until reaches 100.  # noqa: E501

        :param progress_percentage: The progress_percentage of this BatchResponseBatchFilesFilesInBatch.
        :type progress_percentage: int
        """

        self._progress_percentage = progress_percentage

    @property
    def scan_all_result_a(self):
        """Gets the scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as string  # noqa: E501

        :return: The scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.
        :rtype: ProcessingResultsStringEnum
        """
        return self._scan_all_result_a

    @scan_all_result_a.setter
    def scan_all_result_a(self, scan_all_result_a):
        """Sets the scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as string  # noqa: E501

        :param scan_all_result_a: The scan_all_result_a of this BatchResponseBatchFilesFilesInBatch.
        :type scan_all_result_a: ProcessingResultsStringEnum
        """

        self._scan_all_result_a = scan_all_result_a

    @property
    def scan_all_result_i(self):
        """Gets the scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as index in the Processing Results table.  # noqa: E501

        :return: The scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.
        :rtype: ProcessingResultsIndexEnum
        """
        return self._scan_all_result_i

    @scan_all_result_i.setter
    def scan_all_result_i(self, scan_all_result_i):
        """Sets the scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.

        The overall scan result as index in the Processing Results table.  # noqa: E501

        :param scan_all_result_i: The scan_all_result_i of this BatchResponseBatchFilesFilesInBatch.
        :type scan_all_result_i: ProcessingResultsIndexEnum
        """

        self._scan_all_result_i = scan_all_result_i

    @property
    def scanned_with(self):
        """Gets the scanned_with of this BatchResponseBatchFilesFilesInBatch.

        The total number of engines used to analyze this file.  # noqa: E501

        :return: The scanned_with of this BatchResponseBatchFilesFilesInBatch.
        :rtype: int
        """
        return self._scanned_with

    @scanned_with.setter
    def scanned_with(self, scanned_with):
        """Sets the scanned_with of this BatchResponseBatchFilesFilesInBatch.

        The total number of engines used to analyze this file.  # noqa: E501

        :param scanned_with: The scanned_with of this BatchResponseBatchFilesFilesInBatch.
        :type scanned_with: int
        """

        self._scanned_with = scanned_with
