# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BatchResponseProcessInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked_reason=None, file_type_skipped_scan=None, profile=None, result=None, user_agent=None, username=None):  # noqa: E501
        """BatchResponseProcessInfo - a model defined in OpenAPI

        :param blocked_reason: The blocked_reason of this BatchResponseProcessInfo.  # noqa: E501
        :type blocked_reason: str
        :param file_type_skipped_scan: The file_type_skipped_scan of this BatchResponseProcessInfo.  # noqa: E501
        :type file_type_skipped_scan: bool
        :param profile: The profile of this BatchResponseProcessInfo.  # noqa: E501
        :type profile: str
        :param result: The result of this BatchResponseProcessInfo.  # noqa: E501
        :type result: str
        :param user_agent: The user_agent of this BatchResponseProcessInfo.  # noqa: E501
        :type user_agent: str
        :param username: The username of this BatchResponseProcessInfo.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'blocked_reason': str,
            'file_type_skipped_scan': bool,
            'profile': str,
            'result': str,
            'user_agent': str,
            'username': str
        }

        self.attribute_map = {
            'blocked_reason': 'blocked_reason',
            'file_type_skipped_scan': 'file_type_skipped_scan',
            'profile': 'profile',
            'result': 'result',
            'user_agent': 'user_agent',
            'username': 'username'
        }

        self._blocked_reason = blocked_reason
        self._file_type_skipped_scan = file_type_skipped_scan
        self._profile = profile
        self._result = result
        self._user_agent = user_agent
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponseProcessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchResponse_process_info of this BatchResponseProcessInfo.  # noqa: E501
        :rtype: BatchResponseProcessInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this BatchResponseProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :return: The blocked_reason of this BatchResponseProcessInfo.
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this BatchResponseProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :param blocked_reason: The blocked_reason of this BatchResponseProcessInfo.
        :type blocked_reason: str
        """

        self._blocked_reason = blocked_reason

    @property
    def file_type_skipped_scan(self):
        """Gets the file_type_skipped_scan of this BatchResponseProcessInfo.

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :return: The file_type_skipped_scan of this BatchResponseProcessInfo.
        :rtype: bool
        """
        return self._file_type_skipped_scan

    @file_type_skipped_scan.setter
    def file_type_skipped_scan(self, file_type_skipped_scan):
        """Sets the file_type_skipped_scan of this BatchResponseProcessInfo.

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :param file_type_skipped_scan: The file_type_skipped_scan of this BatchResponseProcessInfo.
        :type file_type_skipped_scan: bool
        """

        self._file_type_skipped_scan = file_type_skipped_scan

    @property
    def profile(self):
        """Gets the profile of this BatchResponseProcessInfo.

        The used rule name.  # noqa: E501

        :return: The profile of this BatchResponseProcessInfo.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this BatchResponseProcessInfo.

        The used rule name.  # noqa: E501

        :param profile: The profile of this BatchResponseProcessInfo.
        :type profile: str
        """

        self._profile = profile

    @property
    def result(self):
        """Gets the result of this BatchResponseProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :return: The result of this BatchResponseProcessInfo.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BatchResponseProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :param result: The result of this BatchResponseProcessInfo.
        :type result: str
        """

        self._result = result

    @property
    def user_agent(self):
        """Gets the user_agent of this BatchResponseProcessInfo.

        Identifier for the REST Client that calls the API.  # noqa: E501

        :return: The user_agent of this BatchResponseProcessInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this BatchResponseProcessInfo.

        Identifier for the REST Client that calls the API.  # noqa: E501

        :param user_agent: The user_agent of this BatchResponseProcessInfo.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this BatchResponseProcessInfo.

        User identifier who submitted scan request earlier.  # noqa: E501

        :return: The username of this BatchResponseProcessInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BatchResponseProcessInfo.

        User identifier who submitted scan request earlier.  # noqa: E501

        :param username: The username of this BatchResponseProcessInfo.
        :type username: str
        """

        self._username = username
