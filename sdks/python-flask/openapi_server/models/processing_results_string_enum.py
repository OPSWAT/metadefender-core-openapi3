# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ProcessingResultsStringEnum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    THREAT_DETECTED = "Threat Detected"
    INFECTED = "Infected"
    SUSPICIOUS = "Suspicious"
    FAILED = "Failed"
    CLEANED_DELETED = "Cleaned / Deleted"
    SCAN_SKIPPED_WHITELISTED = "Scan Skipped - Whitelisted"
    SCAN_SKIPPED_BLACKLISTED = "Scan Skipped - Blacklisted"
    EXCEEDED_ARCHIVE_DEPTH = "Exceeded Archive Depth"
    NOT_SCANNED = "Not Scanned"
    ENCRYPTED_ARCHIVE = "Encrypted Archive"
    EXCEEDED_ARCHIVE_SIZE = "Exceeded Archive Size"
    EXCEEDED_ARCHIVE_FILE_NUMBER = "Exceeded Archive File Number"
    PASSWORD_PROTECTED_DOCUMENT = "Password Protected Document"
    EXCEEDED_ARCHIVE_TIMEOUT = "Exceeded Archive Timeout"
    FILE_TYPE_MISMATCH = "File type Mismatch"
    POTENTIALLY_VULNERABLE_FILE = "Potentially Vulnerable File"
    CANCELED = "Canceled"
    SENSITIVE_DATA_FOUND = "Sensitive data found"
    YARA_RULE_MATCHED = "Yara Rule Matched"
    POTENTIALLY_UNWANTED_PROGRAM = "Potentially Unwanted Program"
    UNSUPPORTED_FILE_TYPE = "Unsupported file type"
    IN_PROGRESS = "In Progress"
    def __init__(self):  # noqa: E501
        """ProcessingResultsStringEnum - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessingResultsStringEnum':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessingResultsStringEnum of this ProcessingResultsStringEnum.  # noqa: E501
        :rtype: ProcessingResultsStringEnum
        """
        return util.deserialize_model(dikt, cls)
