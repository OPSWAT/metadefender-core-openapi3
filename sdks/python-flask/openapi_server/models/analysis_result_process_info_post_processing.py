# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.deep_cdr_details import DeepCDRDetails
from openapi_server import util

from openapi_server.models.deep_cdr_details import DeepCDRDetails  # noqa: E501

class AnalysisResultProcessInfoPostProcessing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions_failed=None, actions_ran=None, converted_destination=None, converted_to=None, copy_move_destination=None, sanitization_details=None):  # noqa: E501
        """AnalysisResultProcessInfoPostProcessing - a model defined in OpenAPI

        :param actions_failed: The actions_failed of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type actions_failed: str
        :param actions_ran: The actions_ran of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type actions_ran: str
        :param converted_destination: The converted_destination of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type converted_destination: str
        :param converted_to: The converted_to of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type converted_to: str
        :param copy_move_destination: The copy_move_destination of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type copy_move_destination: str
        :param sanitization_details: The sanitization_details of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :type sanitization_details: DeepCDRDetails
        """
        self.openapi_types = {
            'actions_failed': str,
            'actions_ran': str,
            'converted_destination': str,
            'converted_to': str,
            'copy_move_destination': str,
            'sanitization_details': DeepCDRDetails
        }

        self.attribute_map = {
            'actions_failed': 'actions_failed',
            'actions_ran': 'actions_ran',
            'converted_destination': 'converted_destination',
            'converted_to': 'converted_to',
            'copy_move_destination': 'copy_move_destination',
            'sanitization_details': 'sanitization_details'
        }

        self._actions_failed = actions_failed
        self._actions_ran = actions_ran
        self._converted_destination = converted_destination
        self._converted_to = converted_to
        self._copy_move_destination = copy_move_destination
        self._sanitization_details = sanitization_details

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResultProcessInfoPostProcessing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult_process_info_post_processing of this AnalysisResultProcessInfoPostProcessing.  # noqa: E501
        :rtype: AnalysisResultProcessInfoPostProcessing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions_failed(self):
        """Gets the actions_failed of this AnalysisResultProcessInfoPostProcessing.

        Empty string if no action failed or list of failed actions, separated by \"|\".  # noqa: E501

        :return: The actions_failed of this AnalysisResultProcessInfoPostProcessing.
        :rtype: str
        """
        return self._actions_failed

    @actions_failed.setter
    def actions_failed(self, actions_failed):
        """Sets the actions_failed of this AnalysisResultProcessInfoPostProcessing.

        Empty string if no action failed or list of failed actions, separated by \"|\".  # noqa: E501

        :param actions_failed: The actions_failed of this AnalysisResultProcessInfoPostProcessing.
        :type actions_failed: str
        """

        self._actions_failed = actions_failed

    @property
    def actions_ran(self):
        """Gets the actions_ran of this AnalysisResultProcessInfoPostProcessing.

        List of successful actions, separated by \"|\". Empty string if otherwise.  # noqa: E501

        :return: The actions_ran of this AnalysisResultProcessInfoPostProcessing.
        :rtype: str
        """
        return self._actions_ran

    @actions_ran.setter
    def actions_ran(self, actions_ran):
        """Sets the actions_ran of this AnalysisResultProcessInfoPostProcessing.

        List of successful actions, separated by \"|\". Empty string if otherwise.  # noqa: E501

        :param actions_ran: The actions_ran of this AnalysisResultProcessInfoPostProcessing.
        :type actions_ran: str
        """

        self._actions_ran = actions_ran

    @property
    def converted_destination(self):
        """Gets the converted_destination of this AnalysisResultProcessInfoPostProcessing.

        Contains the name of the sanitized file.  # noqa: E501

        :return: The converted_destination of this AnalysisResultProcessInfoPostProcessing.
        :rtype: str
        """
        return self._converted_destination

    @converted_destination.setter
    def converted_destination(self, converted_destination):
        """Sets the converted_destination of this AnalysisResultProcessInfoPostProcessing.

        Contains the name of the sanitized file.  # noqa: E501

        :param converted_destination: The converted_destination of this AnalysisResultProcessInfoPostProcessing.
        :type converted_destination: str
        """

        self._converted_destination = converted_destination

    @property
    def converted_to(self):
        """Gets the converted_to of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :return: The converted_to of this AnalysisResultProcessInfoPostProcessing.
        :rtype: str
        """
        return self._converted_to

    @converted_to.setter
    def converted_to(self, converted_to):
        """Sets the converted_to of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :param converted_to: The converted_to of this AnalysisResultProcessInfoPostProcessing.
        :type converted_to: str
        """

        self._converted_to = converted_to

    @property
    def copy_move_destination(self):
        """Gets the copy_move_destination of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :return: The copy_move_destination of this AnalysisResultProcessInfoPostProcessing.
        :rtype: str
        """
        return self._copy_move_destination

    @copy_move_destination.setter
    def copy_move_destination(self, copy_move_destination):
        """Sets the copy_move_destination of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :param copy_move_destination: The copy_move_destination of this AnalysisResultProcessInfoPostProcessing.
        :type copy_move_destination: str
        """

        self._copy_move_destination = copy_move_destination

    @property
    def sanitization_details(self):
        """Gets the sanitization_details of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :return: The sanitization_details of this AnalysisResultProcessInfoPostProcessing.
        :rtype: DeepCDRDetails
        """
        return self._sanitization_details

    @sanitization_details.setter
    def sanitization_details(self, sanitization_details):
        """Sets the sanitization_details of this AnalysisResultProcessInfoPostProcessing.

        Contains target type name of sanitization.  # noqa: E501

        :param sanitization_details: The sanitization_details of this AnalysisResultProcessInfoPostProcessing.
        :type sanitization_details: DeepCDRDetails
        """

        self._sanitization_details = sanitization_details
