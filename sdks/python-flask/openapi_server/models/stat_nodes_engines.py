# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class StatNodesEngines(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, db_ver=None, def_time=None, eng_name=None, eng_ver=None, engine_type=None, id=None):  # noqa: E501
        """StatNodesEngines - a model defined in OpenAPI

        :param active: The active of this StatNodesEngines.  # noqa: E501
        :type active: bool
        :param db_ver: The db_ver of this StatNodesEngines.  # noqa: E501
        :type db_ver: str
        :param def_time: The def_time of this StatNodesEngines.  # noqa: E501
        :type def_time: str
        :param eng_name: The eng_name of this StatNodesEngines.  # noqa: E501
        :type eng_name: str
        :param eng_ver: The eng_ver of this StatNodesEngines.  # noqa: E501
        :type eng_ver: str
        :param engine_type: The engine_type of this StatNodesEngines.  # noqa: E501
        :type engine_type: str
        :param id: The id of this StatNodesEngines.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'active': bool,
            'db_ver': str,
            'def_time': str,
            'eng_name': str,
            'eng_ver': str,
            'engine_type': str,
            'id': str
        }

        self.attribute_map = {
            'active': 'active',
            'db_ver': 'db_ver',
            'def_time': 'def_time',
            'eng_name': 'eng_name',
            'eng_ver': 'eng_ver',
            'engine_type': 'engine_type',
            'id': 'id'
        }

        self._active = active
        self._db_ver = db_ver
        self._def_time = def_time
        self._eng_name = eng_name
        self._eng_ver = eng_ver
        self._engine_type = engine_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'StatNodesEngines':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _stat_nodes_engines of this StatNodesEngines.  # noqa: E501
        :rtype: StatNodesEngines
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this StatNodesEngines.

        If used by at least one engine  # noqa: E501

        :return: The active of this StatNodesEngines.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StatNodesEngines.

        If used by at least one engine  # noqa: E501

        :param active: The active of this StatNodesEngines.
        :type active: bool
        """

        self._active = active

    @property
    def db_ver(self):
        """Gets the db_ver of this StatNodesEngines.

        The database version for this engine  # noqa: E501

        :return: The db_ver of this StatNodesEngines.
        :rtype: str
        """
        return self._db_ver

    @db_ver.setter
    def db_ver(self, db_ver):
        """Sets the db_ver of this StatNodesEngines.

        The database version for this engine  # noqa: E501

        :param db_ver: The db_ver of this StatNodesEngines.
        :type db_ver: str
        """

        self._db_ver = db_ver

    @property
    def def_time(self):
        """Gets the def_time of this StatNodesEngines.

        The database definition time for this engine  # noqa: E501

        :return: The def_time of this StatNodesEngines.
        :rtype: str
        """
        return self._def_time

    @def_time.setter
    def def_time(self, def_time):
        """Sets the def_time of this StatNodesEngines.

        The database definition time for this engine  # noqa: E501

        :param def_time: The def_time of this StatNodesEngines.
        :type def_time: str
        """

        self._def_time = def_time

    @property
    def eng_name(self):
        """Gets the eng_name of this StatNodesEngines.

        Engine name  # noqa: E501

        :return: The eng_name of this StatNodesEngines.
        :rtype: str
        """
        return self._eng_name

    @eng_name.setter
    def eng_name(self, eng_name):
        """Sets the eng_name of this StatNodesEngines.

        Engine name  # noqa: E501

        :param eng_name: The eng_name of this StatNodesEngines.
        :type eng_name: str
        """

        self._eng_name = eng_name

    @property
    def eng_ver(self):
        """Gets the eng_ver of this StatNodesEngines.

        Engine's version (format differs from one engine to another).  # noqa: E501

        :return: The eng_ver of this StatNodesEngines.
        :rtype: str
        """
        return self._eng_ver

    @eng_ver.setter
    def eng_ver(self, eng_ver):
        """Sets the eng_ver of this StatNodesEngines.

        Engine's version (format differs from one engine to another).  # noqa: E501

        :param eng_ver: The eng_ver of this StatNodesEngines.
        :type eng_ver: str
        """

        self._eng_ver = eng_ver

    @property
    def engine_type(self):
        """Gets the engine_type of this StatNodesEngines.

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :return: The engine_type of this StatNodesEngines.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this StatNodesEngines.

        Engine's type:    * av   * archive   * filetype   # noqa: E501

        :param engine_type: The engine_type of this StatNodesEngines.
        :type engine_type: str
        """
        allowed_values = ["av", "archive", "filetype"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def id(self):
        """Gets the id of this StatNodesEngines.

        Engine internal ID  # noqa: E501

        :return: The id of this StatNodesEngines.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatNodesEngines.

        Engine internal ID  # noqa: E501

        :param id: The id of this StatNodesEngines.
        :type id: str
        """

        self._id = id
