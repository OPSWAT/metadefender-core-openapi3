# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DeepCDRDetailsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, object_name=None, count=None, object_details=None, file_name=None):  # noqa: E501
        """DeepCDRDetailsDetails - a model defined in OpenAPI

        :param action: The action of this DeepCDRDetailsDetails.  # noqa: E501
        :type action: str
        :param object_name: The object_name of this DeepCDRDetailsDetails.  # noqa: E501
        :type object_name: str
        :param count: The count of this DeepCDRDetailsDetails.  # noqa: E501
        :type count: int
        :param object_details: The object_details of this DeepCDRDetailsDetails.  # noqa: E501
        :type object_details: str
        :param file_name: The file_name of this DeepCDRDetailsDetails.  # noqa: E501
        :type file_name: str
        """
        self.openapi_types = {
            'action': str,
            'object_name': str,
            'count': int,
            'object_details': str,
            'file_name': str
        }

        self.attribute_map = {
            'action': 'action',
            'object_name': 'object_name',
            'count': 'count',
            'object_details': 'object_details',
            'file_name': 'file_name'
        }

        self._action = action
        self._object_name = object_name
        self._count = count
        self._object_details = object_details
        self._file_name = file_name

    @classmethod
    def from_dict(cls, dikt) -> 'DeepCDRDetailsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeepCDRDetails_details of this DeepCDRDetailsDetails.  # noqa: E501
        :rtype: DeepCDRDetailsDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DeepCDRDetailsDetails.

        The type of action that was performed  # noqa: E501

        :return: The action of this DeepCDRDetailsDetails.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DeepCDRDetailsDetails.

        The type of action that was performed  # noqa: E501

        :param action: The action of this DeepCDRDetailsDetails.
        :type action: str
        """
        allowed_values = ["sanitized", "removed"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def object_name(self):
        """Gets the object_name of this DeepCDRDetailsDetails.

        The object type that was sanitized/removed.  # noqa: E501

        :return: The object_name of this DeepCDRDetailsDetails.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this DeepCDRDetailsDetails.

        The object type that was sanitized/removed.  # noqa: E501

        :param object_name: The object_name of this DeepCDRDetailsDetails.
        :type object_name: str
        """
        if object_name is None:
            raise ValueError("Invalid value for `object_name`, must not be `None`")  # noqa: E501

        self._object_name = object_name

    @property
    def count(self):
        """Gets the count of this DeepCDRDetailsDetails.

        The number of objects that were sanitized/removed.  # noqa: E501

        :return: The count of this DeepCDRDetailsDetails.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DeepCDRDetailsDetails.

        The number of objects that were sanitized/removed.  # noqa: E501

        :param count: The count of this DeepCDRDetailsDetails.
        :type count: int
        """

        self._count = count

    @property
    def object_details(self):
        """Gets the object_details of this DeepCDRDetailsDetails.

        Additional information about the sanitized object  # noqa: E501

        :return: The object_details of this DeepCDRDetailsDetails.
        :rtype: str
        """
        return self._object_details

    @object_details.setter
    def object_details(self, object_details):
        """Sets the object_details of this DeepCDRDetailsDetails.

        Additional information about the sanitized object  # noqa: E501

        :param object_details: The object_details of this DeepCDRDetailsDetails.
        :type object_details: str
        """

        self._object_details = object_details

    @property
    def file_name(self):
        """Gets the file_name of this DeepCDRDetailsDetails.

        If an embedded file was sanitized.  # noqa: E501

        :return: The file_name of this DeepCDRDetailsDetails.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DeepCDRDetailsDetails.

        If an embedded file was sanitized.  # noqa: E501

        :param file_name: The file_name of this DeepCDRDetailsDetails.
        :type file_name: str
        """

        self._file_name = file_name
