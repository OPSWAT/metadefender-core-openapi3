# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.analysis_result_process_info_post_processing import AnalysisResultProcessInfoPostProcessing
from openapi_server import util

from openapi_server.models.analysis_result_process_info_post_processing import AnalysisResultProcessInfoPostProcessing  # noqa: E501

class AnalysisResultProcessInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked_reason=None, file_type_skipped_scan=None, outdated_data=None, processing_time=None, profile=None, progress_percentage=None, queue_time=None, result=None, user_agent=None, username=None, verdicts=None, post_processing=None):  # noqa: E501
        """AnalysisResultProcessInfo - a model defined in OpenAPI

        :param blocked_reason: The blocked_reason of this AnalysisResultProcessInfo.  # noqa: E501
        :type blocked_reason: str
        :param file_type_skipped_scan: The file_type_skipped_scan of this AnalysisResultProcessInfo.  # noqa: E501
        :type file_type_skipped_scan: bool
        :param outdated_data: The outdated_data of this AnalysisResultProcessInfo.  # noqa: E501
        :type outdated_data: List[str]
        :param processing_time: The processing_time of this AnalysisResultProcessInfo.  # noqa: E501
        :type processing_time: int
        :param profile: The profile of this AnalysisResultProcessInfo.  # noqa: E501
        :type profile: str
        :param progress_percentage: The progress_percentage of this AnalysisResultProcessInfo.  # noqa: E501
        :type progress_percentage: int
        :param queue_time: The queue_time of this AnalysisResultProcessInfo.  # noqa: E501
        :type queue_time: int
        :param result: The result of this AnalysisResultProcessInfo.  # noqa: E501
        :type result: str
        :param user_agent: The user_agent of this AnalysisResultProcessInfo.  # noqa: E501
        :type user_agent: str
        :param username: The username of this AnalysisResultProcessInfo.  # noqa: E501
        :type username: str
        :param verdicts: The verdicts of this AnalysisResultProcessInfo.  # noqa: E501
        :type verdicts: List[str]
        :param post_processing: The post_processing of this AnalysisResultProcessInfo.  # noqa: E501
        :type post_processing: AnalysisResultProcessInfoPostProcessing
        """
        self.openapi_types = {
            'blocked_reason': str,
            'file_type_skipped_scan': bool,
            'outdated_data': List[str],
            'processing_time': int,
            'profile': str,
            'progress_percentage': int,
            'queue_time': int,
            'result': str,
            'user_agent': str,
            'username': str,
            'verdicts': List[str],
            'post_processing': AnalysisResultProcessInfoPostProcessing
        }

        self.attribute_map = {
            'blocked_reason': 'blocked_reason',
            'file_type_skipped_scan': 'file_type_skipped_scan',
            'outdated_data': 'outdated_data',
            'processing_time': 'processing_time',
            'profile': 'profile',
            'progress_percentage': 'progress_percentage',
            'queue_time': 'queue_time',
            'result': 'result',
            'user_agent': 'user_agent',
            'username': 'username',
            'verdicts': 'verdicts',
            'post_processing': 'post_processing'
        }

        self._blocked_reason = blocked_reason
        self._file_type_skipped_scan = file_type_skipped_scan
        self._outdated_data = outdated_data
        self._processing_time = processing_time
        self._profile = profile
        self._progress_percentage = progress_percentage
        self._queue_time = queue_time
        self._result = result
        self._user_agent = user_agent
        self._username = username
        self._verdicts = verdicts
        self._post_processing = post_processing

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResultProcessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult_process_info of this AnalysisResultProcessInfo.  # noqa: E501
        :rtype: AnalysisResultProcessInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this AnalysisResultProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :return: The blocked_reason of this AnalysisResultProcessInfo.
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this AnalysisResultProcessInfo.

        Provides the reason why the file is blocked (if so).  # noqa: E501

        :param blocked_reason: The blocked_reason of this AnalysisResultProcessInfo.
        :type blocked_reason: str
        """

        self._blocked_reason = blocked_reason

    @property
    def file_type_skipped_scan(self):
        """Gets the file_type_skipped_scan of this AnalysisResultProcessInfo.

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :return: The file_type_skipped_scan of this AnalysisResultProcessInfo.
        :rtype: bool
        """
        return self._file_type_skipped_scan

    @file_type_skipped_scan.setter
    def file_type_skipped_scan(self, file_type_skipped_scan):
        """Sets the file_type_skipped_scan of this AnalysisResultProcessInfo.

        Indicates if the input file's detected type was configured to skip scanning.  # noqa: E501

        :param file_type_skipped_scan: The file_type_skipped_scan of this AnalysisResultProcessInfo.
        :type file_type_skipped_scan: bool
        """

        self._file_type_skipped_scan = file_type_skipped_scan

    @property
    def outdated_data(self):
        """Gets the outdated_data of this AnalysisResultProcessInfo.

        array of flags - if occur - describing outdated data in the result, these can be   * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database   * configuration: the process' rule - or any item used by the rule - was modified since the item was processed   * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available                 # noqa: E501

        :return: The outdated_data of this AnalysisResultProcessInfo.
        :rtype: List[str]
        """
        return self._outdated_data

    @outdated_data.setter
    def outdated_data(self, outdated_data):
        """Sets the outdated_data of this AnalysisResultProcessInfo.

        array of flags - if occur - describing outdated data in the result, these can be   * enginedefinitions: at least one of the AV engines the item was scanned with has a newer definition database   * configuration: the process' rule - or any item used by the rule - was modified since the item was processed   * sanitization: if item was sanitized this flag notifies that the sanitization information regarding this result is outdated, meaning the sanitized item is no longer available                 # noqa: E501

        :param outdated_data: The outdated_data of this AnalysisResultProcessInfo.
        :type outdated_data: List[str]
        """
        allowed_values = ["enginedefinition", "configuration", "sanitization"]  # noqa: E501
        if not set(outdated_data).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `outdated_data` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(outdated_data) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._outdated_data = outdated_data

    @property
    def processing_time(self):
        """Gets the processing_time of this AnalysisResultProcessInfo.

        Total time elapsed during processing file on the node (in milliseconds).  # noqa: E501

        :return: The processing_time of this AnalysisResultProcessInfo.
        :rtype: int
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this AnalysisResultProcessInfo.

        Total time elapsed during processing file on the node (in milliseconds).  # noqa: E501

        :param processing_time: The processing_time of this AnalysisResultProcessInfo.
        :type processing_time: int
        """

        self._processing_time = processing_time

    @property
    def profile(self):
        """Gets the profile of this AnalysisResultProcessInfo.

        The used rule name.  # noqa: E501

        :return: The profile of this AnalysisResultProcessInfo.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this AnalysisResultProcessInfo.

        The used rule name.  # noqa: E501

        :param profile: The profile of this AnalysisResultProcessInfo.
        :type profile: str
        """

        self._profile = profile

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this AnalysisResultProcessInfo.

        Percentage of processing completed (from 1-100).  # noqa: E501

        :return: The progress_percentage of this AnalysisResultProcessInfo.
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this AnalysisResultProcessInfo.

        Percentage of processing completed (from 1-100).  # noqa: E501

        :param progress_percentage: The progress_percentage of this AnalysisResultProcessInfo.
        :type progress_percentage: int
        """

        self._progress_percentage = progress_percentage

    @property
    def queue_time(self):
        """Gets the queue_time of this AnalysisResultProcessInfo.

        Total time elapsed while the file waits in the queue (in milliseconds).  # noqa: E501

        :return: The queue_time of this AnalysisResultProcessInfo.
        :rtype: int
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this AnalysisResultProcessInfo.

        Total time elapsed while the file waits in the queue (in milliseconds).  # noqa: E501

        :param queue_time: The queue_time of this AnalysisResultProcessInfo.
        :type queue_time: int
        """

        self._queue_time = queue_time

    @property
    def result(self):
        """Gets the result of this AnalysisResultProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :return: The result of this AnalysisResultProcessInfo.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AnalysisResultProcessInfo.

        The final result of processing the file (Allowed / Blocked / Processing).  # noqa: E501

        :param result: The result of this AnalysisResultProcessInfo.
        :type result: str
        """

        self._result = result

    @property
    def user_agent(self):
        """Gets the user_agent of this AnalysisResultProcessInfo.

        Identifier for the REST Client that calls the API.  # noqa: E501

        :return: The user_agent of this AnalysisResultProcessInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this AnalysisResultProcessInfo.

        Identifier for the REST Client that calls the API.  # noqa: E501

        :param user_agent: The user_agent of this AnalysisResultProcessInfo.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this AnalysisResultProcessInfo.

        User identifier who submitted scan request earlier.  # noqa: E501

        :return: The username of this AnalysisResultProcessInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AnalysisResultProcessInfo.

        User identifier who submitted scan request earlier.  # noqa: E501

        :param username: The username of this AnalysisResultProcessInfo.
        :type username: str
        """

        self._username = username

    @property
    def verdicts(self):
        """Gets the verdicts of this AnalysisResultProcessInfo.

        Aggregated list of potential issues.  # noqa: E501

        :return: The verdicts of this AnalysisResultProcessInfo.
        :rtype: List[str]
        """
        return self._verdicts

    @verdicts.setter
    def verdicts(self, verdicts):
        """Sets the verdicts of this AnalysisResultProcessInfo.

        Aggregated list of potential issues.  # noqa: E501

        :param verdicts: The verdicts of this AnalysisResultProcessInfo.
        :type verdicts: List[str]
        """

        self._verdicts = verdicts

    @property
    def post_processing(self):
        """Gets the post_processing of this AnalysisResultProcessInfo.


        :return: The post_processing of this AnalysisResultProcessInfo.
        :rtype: AnalysisResultProcessInfoPostProcessing
        """
        return self._post_processing

    @post_processing.setter
    def post_processing(self, post_processing):
        """Sets the post_processing of this AnalysisResultProcessInfo.


        :param post_processing: The post_processing of this AnalysisResultProcessInfo.
        :type post_processing: AnalysisResultProcessInfoPostProcessing
        """

        self._post_processing = post_processing
