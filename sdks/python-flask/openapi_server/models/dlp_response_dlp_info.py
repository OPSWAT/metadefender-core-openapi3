# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dlp_response_dlp_info_hits import DLPResponseDlpInfoHits
from openapi_server.models.dlp_response_dlp_info_metadata_removal import DLPResponseDlpInfoMetadataRemoval
from openapi_server.models.dlp_response_dlp_info_redact import DLPResponseDlpInfoRedact
from openapi_server.models.dlp_response_dlp_info_watermark import DLPResponseDlpInfoWatermark
from openapi_server import util

from openapi_server.models.dlp_response_dlp_info_hits import DLPResponseDlpInfoHits  # noqa: E501
from openapi_server.models.dlp_response_dlp_info_metadata_removal import DLPResponseDlpInfoMetadataRemoval  # noqa: E501
from openapi_server.models.dlp_response_dlp_info_redact import DLPResponseDlpInfoRedact  # noqa: E501
from openapi_server.models.dlp_response_dlp_info_watermark import DLPResponseDlpInfoWatermark  # noqa: E501

class DLPResponseDlpInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certainty=None, errors=None, filename=None, hits=None, metadata_removal=None, redact=None, severity=None, verdict=None, watermark=None):  # noqa: E501
        """DLPResponseDlpInfo - a model defined in OpenAPI

        :param certainty: The certainty of this DLPResponseDlpInfo.  # noqa: E501
        :type certainty: str
        :param errors: The errors of this DLPResponseDlpInfo.  # noqa: E501
        :type errors: object
        :param filename: The filename of this DLPResponseDlpInfo.  # noqa: E501
        :type filename: str
        :param hits: The hits of this DLPResponseDlpInfo.  # noqa: E501
        :type hits: DLPResponseDlpInfoHits
        :param metadata_removal: The metadata_removal of this DLPResponseDlpInfo.  # noqa: E501
        :type metadata_removal: DLPResponseDlpInfoMetadataRemoval
        :param redact: The redact of this DLPResponseDlpInfo.  # noqa: E501
        :type redact: DLPResponseDlpInfoRedact
        :param severity: The severity of this DLPResponseDlpInfo.  # noqa: E501
        :type severity: int
        :param verdict: The verdict of this DLPResponseDlpInfo.  # noqa: E501
        :type verdict: int
        :param watermark: The watermark of this DLPResponseDlpInfo.  # noqa: E501
        :type watermark: DLPResponseDlpInfoWatermark
        """
        self.openapi_types = {
            'certainty': str,
            'errors': object,
            'filename': str,
            'hits': DLPResponseDlpInfoHits,
            'metadata_removal': DLPResponseDlpInfoMetadataRemoval,
            'redact': DLPResponseDlpInfoRedact,
            'severity': int,
            'verdict': int,
            'watermark': DLPResponseDlpInfoWatermark
        }

        self.attribute_map = {
            'certainty': 'certainty',
            'errors': 'errors',
            'filename': 'filename',
            'hits': 'hits',
            'metadata_removal': 'metadata_removal',
            'redact': 'redact',
            'severity': 'severity',
            'verdict': 'verdict',
            'watermark': 'watermark'
        }

        self._certainty = certainty
        self._errors = errors
        self._filename = filename
        self._hits = hits
        self._metadata_removal = metadata_removal
        self._redact = redact
        self._severity = severity
        self._verdict = verdict
        self._watermark = watermark

    @classmethod
    def from_dict(cls, dikt) -> 'DLPResponseDlpInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DLPResponse_dlp_info of this DLPResponseDlpInfo.  # noqa: E501
        :rtype: DLPResponseDlpInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certainty(self):
        """Gets the certainty of this DLPResponseDlpInfo.

        Describes how certain the hit is, possible values:   * `Very Low`   * `Low`   * `Medium`   * `High`   * `Very High`   # noqa: E501

        :return: The certainty of this DLPResponseDlpInfo.
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this DLPResponseDlpInfo.

        Describes how certain the hit is, possible values:   * `Very Low`   * `Low`   * `Medium`   * `High`   * `Very High`   # noqa: E501

        :param certainty: The certainty of this DLPResponseDlpInfo.
        :type certainty: str
        """
        allowed_values = ["Very Low", "Low", "Medium", "High", "Very High"]  # noqa: E501
        if certainty not in allowed_values:
            raise ValueError(
                "Invalid value for `certainty` ({0}), must be one of {1}"
                .format(certainty, allowed_values)
            )

        self._certainty = certainty

    @property
    def errors(self):
        """Gets the errors of this DLPResponseDlpInfo.

        A  list of error objects (empty if no errors happened), each error object contains following keys:   * `scan`: scan related error description   * `redact`: redaction related error description   * `watermark`: watermark related error description   * `metadata_removal`: metadata removal related error description   # noqa: E501

        :return: The errors of this DLPResponseDlpInfo.
        :rtype: object
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DLPResponseDlpInfo.

        A  list of error objects (empty if no errors happened), each error object contains following keys:   * `scan`: scan related error description   * `redact`: redaction related error description   * `watermark`: watermark related error description   * `metadata_removal`: metadata removal related error description   # noqa: E501

        :param errors: The errors of this DLPResponseDlpInfo.
        :type errors: object
        """

        self._errors = errors

    @property
    def filename(self):
        """Gets the filename of this DLPResponseDlpInfo.

        Output processed file name (pre-configured on engine settings under Core's worflow rule)  # noqa: E501

        :return: The filename of this DLPResponseDlpInfo.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DLPResponseDlpInfo.

        Output processed file name (pre-configured on engine settings under Core's worflow rule)  # noqa: E501

        :param filename: The filename of this DLPResponseDlpInfo.
        :type filename: str
        """

        self._filename = filename

    @property
    def hits(self):
        """Gets the hits of this DLPResponseDlpInfo.


        :return: The hits of this DLPResponseDlpInfo.
        :rtype: DLPResponseDlpInfoHits
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this DLPResponseDlpInfo.


        :param hits: The hits of this DLPResponseDlpInfo.
        :type hits: DLPResponseDlpInfoHits
        """

        self._hits = hits

    @property
    def metadata_removal(self):
        """Gets the metadata_removal of this DLPResponseDlpInfo.


        :return: The metadata_removal of this DLPResponseDlpInfo.
        :rtype: DLPResponseDlpInfoMetadataRemoval
        """
        return self._metadata_removal

    @metadata_removal.setter
    def metadata_removal(self, metadata_removal):
        """Sets the metadata_removal of this DLPResponseDlpInfo.


        :param metadata_removal: The metadata_removal of this DLPResponseDlpInfo.
        :type metadata_removal: DLPResponseDlpInfoMetadataRemoval
        """

        self._metadata_removal = metadata_removal

    @property
    def redact(self):
        """Gets the redact of this DLPResponseDlpInfo.


        :return: The redact of this DLPResponseDlpInfo.
        :rtype: DLPResponseDlpInfoRedact
        """
        return self._redact

    @redact.setter
    def redact(self, redact):
        """Sets the redact of this DLPResponseDlpInfo.


        :param redact: The redact of this DLPResponseDlpInfo.
        :type redact: DLPResponseDlpInfoRedact
        """

        self._redact = redact

    @property
    def severity(self):
        """Gets the severity of this DLPResponseDlpInfo.

        (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * `0` - Certainly is data loss   * `1` - Might be data loss   # noqa: E501

        :return: The severity of this DLPResponseDlpInfo.
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DLPResponseDlpInfo.

        (NOTE: this field is deprecated): represents the severity of the data loss, possible values:   * `0` - Certainly is data loss   * `1` - Might be data loss   # noqa: E501

        :param severity: The severity of this DLPResponseDlpInfo.
        :type severity: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def verdict(self):
        """Gets the verdict of this DLPResponseDlpInfo.

        The overall result for the scanned file. It can be   | index         | status                       |   |---------------|------------------------------|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  |   # noqa: E501

        :return: The verdict of this DLPResponseDlpInfo.
        :rtype: int
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this DLPResponseDlpInfo.

        The overall result for the scanned file. It can be   | index         | status                       |   |---------------|------------------------------|   | 0             | Clean                        |   | 1             | Found matched data           |   | 2             | Suspicious                   |   | 3             | Failed                       |   | 4             | Not scanned                  |   # noqa: E501

        :param verdict: The verdict of this DLPResponseDlpInfo.
        :type verdict: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"
                .format(verdict, allowed_values)
            )

        self._verdict = verdict

    @property
    def watermark(self):
        """Gets the watermark of this DLPResponseDlpInfo.


        :return: The watermark of this DLPResponseDlpInfo.
        :rtype: DLPResponseDlpInfoWatermark
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this DLPResponseDlpInfo.


        :param watermark: The watermark of this DLPResponseDlpInfo.
        :type watermark: DLPResponseDlpInfoWatermark
        """

        self._watermark = watermark
