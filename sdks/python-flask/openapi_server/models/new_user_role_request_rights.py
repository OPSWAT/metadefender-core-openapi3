# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.role_permission_object import RolePermissionObject
from openapi_server import util

from openapi_server.models.role_permission_object import RolePermissionObject  # noqa: E501

class NewUserRoleRequestRights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agents=None, cert=None, configlog=None, engines=None, external=None, license=None, quarantine=None, retention=None, rule=None, scan=None, scanlog=None, skip=None, update=None, updatelog=None, users=None, workflow=None, zone=None):  # noqa: E501
        """NewUserRoleRequestRights - a model defined in OpenAPI

        :param agents: The agents of this NewUserRoleRequestRights.  # noqa: E501
        :type agents: RolePermissionObject
        :param cert: The cert of this NewUserRoleRequestRights.  # noqa: E501
        :type cert: RolePermissionObject
        :param configlog: The configlog of this NewUserRoleRequestRights.  # noqa: E501
        :type configlog: RolePermissionObject
        :param engines: The engines of this NewUserRoleRequestRights.  # noqa: E501
        :type engines: RolePermissionObject
        :param external: The external of this NewUserRoleRequestRights.  # noqa: E501
        :type external: RolePermissionObject
        :param license: The license of this NewUserRoleRequestRights.  # noqa: E501
        :type license: RolePermissionObject
        :param quarantine: The quarantine of this NewUserRoleRequestRights.  # noqa: E501
        :type quarantine: RolePermissionObject
        :param retention: The retention of this NewUserRoleRequestRights.  # noqa: E501
        :type retention: RolePermissionObject
        :param rule: The rule of this NewUserRoleRequestRights.  # noqa: E501
        :type rule: RolePermissionObject
        :param scan: The scan of this NewUserRoleRequestRights.  # noqa: E501
        :type scan: RolePermissionObject
        :param scanlog: The scanlog of this NewUserRoleRequestRights.  # noqa: E501
        :type scanlog: RolePermissionObject
        :param skip: The skip of this NewUserRoleRequestRights.  # noqa: E501
        :type skip: RolePermissionObject
        :param update: The update of this NewUserRoleRequestRights.  # noqa: E501
        :type update: RolePermissionObject
        :param updatelog: The updatelog of this NewUserRoleRequestRights.  # noqa: E501
        :type updatelog: RolePermissionObject
        :param users: The users of this NewUserRoleRequestRights.  # noqa: E501
        :type users: RolePermissionObject
        :param workflow: The workflow of this NewUserRoleRequestRights.  # noqa: E501
        :type workflow: RolePermissionObject
        :param zone: The zone of this NewUserRoleRequestRights.  # noqa: E501
        :type zone: RolePermissionObject
        """
        self.openapi_types = {
            'agents': RolePermissionObject,
            'cert': RolePermissionObject,
            'configlog': RolePermissionObject,
            'engines': RolePermissionObject,
            'external': RolePermissionObject,
            'license': RolePermissionObject,
            'quarantine': RolePermissionObject,
            'retention': RolePermissionObject,
            'rule': RolePermissionObject,
            'scan': RolePermissionObject,
            'scanlog': RolePermissionObject,
            'skip': RolePermissionObject,
            'update': RolePermissionObject,
            'updatelog': RolePermissionObject,
            'users': RolePermissionObject,
            'workflow': RolePermissionObject,
            'zone': RolePermissionObject
        }

        self.attribute_map = {
            'agents': 'agents',
            'cert': 'cert',
            'configlog': 'configlog',
            'engines': 'engines',
            'external': 'external',
            'license': 'license',
            'quarantine': 'quarantine',
            'retention': 'retention',
            'rule': 'rule',
            'scan': 'scan',
            'scanlog': 'scanlog',
            'skip': 'skip',
            'update': 'update',
            'updatelog': 'updatelog',
            'users': 'users',
            'workflow': 'workflow',
            'zone': 'zone'
        }

        self._agents = agents
        self._cert = cert
        self._configlog = configlog
        self._engines = engines
        self._external = external
        self._license = license
        self._quarantine = quarantine
        self._retention = retention
        self._rule = rule
        self._scan = scan
        self._scanlog = scanlog
        self._skip = skip
        self._update = update
        self._updatelog = updatelog
        self._users = users
        self._workflow = workflow
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt) -> 'NewUserRoleRequestRights':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewUserRoleRequest_rights of this NewUserRoleRequestRights.  # noqa: E501
        :rtype: NewUserRoleRequestRights
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agents(self):
        """Gets the agents of this NewUserRoleRequestRights.

        What permissions are allowed for Node.  # noqa: E501

        :return: The agents of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this NewUserRoleRequestRights.

        What permissions are allowed for Node.  # noqa: E501

        :param agents: The agents of this NewUserRoleRequestRights.
        :type agents: RolePermissionObject
        """

        self._agents = agents

    @property
    def cert(self):
        """Gets the cert of this NewUserRoleRequestRights.

        What permissions are allowed for Certificates.  # noqa: E501

        :return: The cert of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this NewUserRoleRequestRights.

        What permissions are allowed for Certificates.  # noqa: E501

        :param cert: The cert of this NewUserRoleRequestRights.
        :type cert: RolePermissionObject
        """

        self._cert = cert

    @property
    def configlog(self):
        """Gets the configlog of this NewUserRoleRequestRights.

        What permissions are allowed for Configuration logs.  # noqa: E501

        :return: The configlog of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._configlog

    @configlog.setter
    def configlog(self, configlog):
        """Sets the configlog of this NewUserRoleRequestRights.

        What permissions are allowed for Configuration logs.  # noqa: E501

        :param configlog: The configlog of this NewUserRoleRequestRights.
        :type configlog: RolePermissionObject
        """

        self._configlog = configlog

    @property
    def engines(self):
        """Gets the engines of this NewUserRoleRequestRights.

        What permissions are allowed for Engines and Modules.  # noqa: E501

        :return: The engines of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._engines

    @engines.setter
    def engines(self, engines):
        """Sets the engines of this NewUserRoleRequestRights.

        What permissions are allowed for Engines and Modules.  # noqa: E501

        :param engines: The engines of this NewUserRoleRequestRights.
        :type engines: RolePermissionObject
        """

        self._engines = engines

    @property
    def external(self):
        """Gets the external of this NewUserRoleRequestRights.

        What permissions are allowed for External actions (External Scanner/Post Actions).  # noqa: E501

        :return: The external of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this NewUserRoleRequestRights.

        What permissions are allowed for External actions (External Scanner/Post Actions).  # noqa: E501

        :param external: The external of this NewUserRoleRequestRights.
        :type external: RolePermissionObject
        """

        self._external = external

    @property
    def license(self):
        """Gets the license of this NewUserRoleRequestRights.

        What permissions are allowed for managing the License.  # noqa: E501

        :return: The license of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this NewUserRoleRequestRights.

        What permissions are allowed for managing the License.  # noqa: E501

        :param license: The license of this NewUserRoleRequestRights.
        :type license: RolePermissionObject
        """

        self._license = license

    @property
    def quarantine(self):
        """Gets the quarantine of this NewUserRoleRequestRights.

        What permissions are allowed for managing the Quarantine.  # noqa: E501

        :return: The quarantine of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._quarantine

    @quarantine.setter
    def quarantine(self, quarantine):
        """Sets the quarantine of this NewUserRoleRequestRights.

        What permissions are allowed for managing the Quarantine.  # noqa: E501

        :param quarantine: The quarantine of this NewUserRoleRequestRights.
        :type quarantine: RolePermissionObject
        """

        self._quarantine = quarantine

    @property
    def retention(self):
        """Gets the retention of this NewUserRoleRequestRights.

        What permissions are allowed for managing the retention policies.  # noqa: E501

        :return: The retention of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this NewUserRoleRequestRights.

        What permissions are allowed for managing the retention policies.  # noqa: E501

        :param retention: The retention of this NewUserRoleRequestRights.
        :type retention: RolePermissionObject
        """

        self._retention = retention

    @property
    def rule(self):
        """Gets the rule of this NewUserRoleRequestRights.

        What permissions are allowed for managing the workflow rules.  # noqa: E501

        :return: The rule of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this NewUserRoleRequestRights.

        What permissions are allowed for managing the workflow rules.  # noqa: E501

        :param rule: The rule of this NewUserRoleRequestRights.
        :type rule: RolePermissionObject
        """

        self._rule = rule

    @property
    def scan(self):
        """Gets the scan of this NewUserRoleRequestRights.

        What permissions are allowed for managing analysis actions.  # noqa: E501

        :return: The scan of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this NewUserRoleRequestRights.

        What permissions are allowed for managing analysis actions.  # noqa: E501

        :param scan: The scan of this NewUserRoleRequestRights.
        :type scan: RolePermissionObject
        """

        self._scan = scan

    @property
    def scanlog(self):
        """Gets the scanlog of this NewUserRoleRequestRights.

        What permissions are allowed for managing the analysis logs.  # noqa: E501

        :return: The scanlog of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._scanlog

    @scanlog.setter
    def scanlog(self, scanlog):
        """Sets the scanlog of this NewUserRoleRequestRights.

        What permissions are allowed for managing the analysis logs.  # noqa: E501

        :param scanlog: The scanlog of this NewUserRoleRequestRights.
        :type scanlog: RolePermissionObject
        """

        self._scanlog = scanlog

    @property
    def skip(self):
        """Gets the skip of this NewUserRoleRequestRights.

        What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.  # noqa: E501

        :return: The skip of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this NewUserRoleRequestRights.

        What permissions are allowed for managing the Whitelist/blacklist defined in the Inventory.  # noqa: E501

        :param skip: The skip of this NewUserRoleRequestRights.
        :type skip: RolePermissionObject
        """

        self._skip = skip

    @property
    def update(self):
        """Gets the update of this NewUserRoleRequestRights.

        What permissions are allowed for managing the update configuration.  # noqa: E501

        :return: The update of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this NewUserRoleRequestRights.

        What permissions are allowed for managing the update configuration.  # noqa: E501

        :param update: The update of this NewUserRoleRequestRights.
        :type update: RolePermissionObject
        """

        self._update = update

    @property
    def updatelog(self):
        """Gets the updatelog of this NewUserRoleRequestRights.

        What permissions are allowed for managing the update logs.  # noqa: E501

        :return: The updatelog of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._updatelog

    @updatelog.setter
    def updatelog(self, updatelog):
        """Sets the updatelog of this NewUserRoleRequestRights.

        What permissions are allowed for managing the update logs.  # noqa: E501

        :param updatelog: The updatelog of this NewUserRoleRequestRights.
        :type updatelog: RolePermissionObject
        """

        self._updatelog = updatelog

    @property
    def users(self):
        """Gets the users of this NewUserRoleRequestRights.

        What permissions are allowed for managing the users.  # noqa: E501

        :return: The users of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this NewUserRoleRequestRights.

        What permissions are allowed for managing the users.  # noqa: E501

        :param users: The users of this NewUserRoleRequestRights.
        :type users: RolePermissionObject
        """

        self._users = users

    @property
    def workflow(self):
        """Gets the workflow of this NewUserRoleRequestRights.

        What permissions are allowed for managing the workflow templates.  # noqa: E501

        :return: The workflow of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this NewUserRoleRequestRights.

        What permissions are allowed for managing the workflow templates.  # noqa: E501

        :param workflow: The workflow of this NewUserRoleRequestRights.
        :type workflow: RolePermissionObject
        """

        self._workflow = workflow

    @property
    def zone(self):
        """Gets the zone of this NewUserRoleRequestRights.

        What permissions are allowed for managing the network zones.  # noqa: E501

        :return: The zone of this NewUserRoleRequestRights.
        :rtype: RolePermissionObject
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this NewUserRoleRequestRights.

        What permissions are allowed for managing the network zones.  # noqa: E501

        :param zone: The zone of this NewUserRoleRequestRights.
        :type zone: RolePermissionObject
        """

        self._zone = zone
