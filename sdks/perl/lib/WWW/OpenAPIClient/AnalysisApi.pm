=begin comment

MetaDefender Core

## Developer Guide This is the API documentation for *MetaDefender Core Public API*.  If you would like to evaluate or have any questions about this documentation, please contact us via our [Contact Us](https://opswat.com/contact) form.  ## How to Interact with MetaDefender Core using REST Beginning with MetaDefender Core 4.x, OPSWAT recommends using the JSON-based REST API. The available methods are documented below. > _**Note**:_ MetaDefender API doesn't support chunk upload, however is recommended to stream the files to MetaDefender as part of the upload process.  --- ## File Analysis Process    MetaDefender's main functionality is to analyze large volumes with a high throughput. Depending on the configuration and licensed technologies, the analysis times can vary.    Below is a brief description of the API integration flow:    1. Upload a file for analysis (`POST /file`), which returns the `data_id`: [File Analysis](#operation/fileAnalysisPost)).           > _**Note**:_ The performance depends on:           > - number of nodes (scaling)     > - number of engines per node     > - type of file to be scanned     > - Metadefender Core and nodes' hardware       2. You have 2 ways to retrieve the analysis report:      - **Polling**: Fetch the result with previously received data_id (`GET /file/{data_id}` resource) until scan result belonging to data_id doesn't reach the 100 percent progress_percentage: ( [Fetch processing result](#operation/userLogin))        > _**Note**:_ Too many data_id requests can reduce performance. It is enough to just check every few hundred milliseconds.          - **Callbackurl**: Specify a callbackurl that will be called once the analysis is complete.     3. Retrieve the analysis results anytime after the analysis is completed with hash for files (md5, sha1, sha256) by calling [Fetch processing result](#operation/userLogin).      - The hash can be found in the scan results    4. Retrieve processed file (sanitized, redacted, watermarked, etc.) after the analysis is complete.      > _**Note**:_ Based on the configured retention policy, the files might be available for retrieval at a later time.   --- OPSWAT provides some sample codes on [GitHub](https://github.com/OPSWAT) to make it easier to understand how the MetaDefender REST API works. 

The version of the OpenAPI document: v4.18.0
Contact: feedback@opswat.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AnalysisApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# analysis_rules
#
# Fetching Available Analysis Rules
# 
# @param string $user_agent The user agent string value sent in the header (specified by the client).  Only those rules are returned, that:   * Match the client&#39;s user agent sent using the user_agent header, or   * Are not restricted to a specific user agent.  For details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html).  (optional)
{
    my $params = {
    'user_agent' => {
        data_type => 'string',
        description => 'The user agent string value sent in the header (specified by the client).  Only those rules are returned, that:   * Match the client&#39;s user agent sent using the user_agent header, or   * Are not restricted to a specific user agent.  For details see KB article [What are Security Policies and how do I use them?](https://onlinehelp.opswat.com/corev4/What_are_Security_Policies_and_how_do_I_use_them_.html). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'analysis_rules' } = { 
        summary => 'Fetching Available Analysis Rules',
        params => $params,
        returns => 'ARRAY[InlineResponse20010]',
        };
}
# @return ARRAY[InlineResponse20010]
#
sub analysis_rules {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/file/rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'user_agent'}) {
        $header_params->{'user_agent'} = $self->{api_client}->to_header_value($args{'user_agent'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InlineResponse20010]', $response);
    return $_response_object;
}

#
# file_analysis_cancel
#
# Cancel File Analysis
# 
# @param string $data_id  (required)
# @param string $apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
{
    my $params = {
    'data_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'apikey' => {
        data_type => 'string',
        description => 'Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'file_analysis_cancel' } = { 
        summary => 'Cancel File Analysis',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub file_analysis_cancel {
    my ($self, %args) = @_;

    # verify the required parameter 'data_id' is set
    unless (exists $args{'data_id'}) {
      croak("Missing the required parameter 'data_id' when calling file_analysis_cancel");
    }

    # parse inputs
    my $_resource_path = '/file/{data_id}/cancel';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'apikey'}) {
        $header_params->{'apikey'} = $self->{api_client}->to_header_value($args{'apikey'});
    }

    # path params
    if ( exists $args{'data_id'}) {
        my $_base_variable = "{" . "data_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'data_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# file_analysis_get
#
# Fetch Analysis Result
# 
# @param string $data_id  (required)
# @param string $apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
{
    my $params = {
    'data_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'apikey' => {
        data_type => 'string',
        description => 'Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'file_analysis_get' } = { 
        summary => 'Fetch Analysis Result',
        params => $params,
        returns => 'AnalysisResult',
        };
}
# @return AnalysisResult
#
sub file_analysis_get {
    my ($self, %args) = @_;

    # verify the required parameter 'data_id' is set
    unless (exists $args{'data_id'}) {
      croak("Missing the required parameter 'data_id' when calling file_analysis_get");
    }

    # parse inputs
    my $_resource_path = '/file/{data_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'apikey'}) {
        $header_params->{'apikey'} = $self->{api_client}->to_header_value($args{'apikey'});
    }

    # path params
    if ( exists $args{'data_id'}) {
        my $_base_variable = "{" . "data_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'data_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnalysisResult', $response);
    return $_response_object;
}

#
# file_analysis_post
#
# Analyze File
# 
# @param string $apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
# @param string $filename The name of the submitted file (optional)
# @param string $filepath if local file scan is enabled the path to the file (see Security rule configuration) (optional)
# @param string $user_agent user_agent header used to identify (and limit) access to a particular rule. For rule selection, &#x60;rule&#x60; header should be used.  (optional)
# @param string $rule Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)        (optional)
# @param string $workflow name of the selected workflow (deprecated, use \&quot;rule\&quot; header parameter instead) (optional)
# @param string $batch Batch id to scan with, coming from &#x60;Initiate Batch&#x60; (If it is not given, it will be a single file scan.) (optional)
# @param string $archivepwd password for archive ( URL encoded UTF-8 string)   Multiple passwords is also supported, format: archivepwd&lt;X&gt;     * X: Could be empty     * When having value, X must be a number &gt;&#x3D; 1   For example:     archivepwd1: \&quot;fox\&quot;     archivepwd2: \&quot;cow\&quot;     archivepwd3: \&quot;bear\&quot;  (optional)
# @param string $metadata could be utilized for: Additional parameter for pre-defined post actions and external scanners (as a part of STDIN input). Customized macro variable for watermarking text (Proactive DLP engine feature). Additional context / verbose information for each file submission (appended into JSON response scan result).  (optional)
# @param string $callbackurl Client&#39;s URL where MetaDefender Core will notify scan result back to whenever scan is finished (webhooks model). See details at 8.1.11.1. Individual file processing   * Format: &lt;protocol://&gt;&lt;ip | domain&gt;:&lt;port&gt;&lt;/path&gt;   * Example: http://10.0.1.100:8081/listenback  (optional)
# @param string $body  (optional)
{
    my $params = {
    'apikey' => {
        data_type => 'string',
        description => 'Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                ',
        required => '0',
    },
    'filename' => {
        data_type => 'string',
        description => 'The name of the submitted file',
        required => '0',
    },
    'filepath' => {
        data_type => 'string',
        description => 'if local file scan is enabled the path to the file (see Security rule configuration)',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'user_agent header used to identify (and limit) access to a particular rule. For rule selection, &#x60;rule&#x60; header should be used. ',
        required => '0',
    },
    'rule' => {
        data_type => 'string',
        description => 'Select rule for the analysis, if no header given the default rule will be selected (URL encoded string of rule name)       ',
        required => '0',
    },
    'workflow' => {
        data_type => 'string',
        description => 'name of the selected workflow (deprecated, use \&quot;rule\&quot; header parameter instead)',
        required => '0',
    },
    'batch' => {
        data_type => 'string',
        description => 'Batch id to scan with, coming from &#x60;Initiate Batch&#x60; (If it is not given, it will be a single file scan.)',
        required => '0',
    },
    'archivepwd' => {
        data_type => 'string',
        description => 'password for archive ( URL encoded UTF-8 string)   Multiple passwords is also supported, format: archivepwd&lt;X&gt;     * X: Could be empty     * When having value, X must be a number &gt;&#x3D; 1   For example:     archivepwd1: \&quot;fox\&quot;     archivepwd2: \&quot;cow\&quot;     archivepwd3: \&quot;bear\&quot; ',
        required => '0',
    },
    'metadata' => {
        data_type => 'string',
        description => 'could be utilized for: Additional parameter for pre-defined post actions and external scanners (as a part of STDIN input). Customized macro variable for watermarking text (Proactive DLP engine feature). Additional context / verbose information for each file submission (appended into JSON response scan result). ',
        required => '0',
    },
    'callbackurl' => {
        data_type => 'string',
        description => 'Client&#39;s URL where MetaDefender Core will notify scan result back to whenever scan is finished (webhooks model). See details at 8.1.11.1. Individual file processing   * Format: &lt;protocol://&gt;&lt;ip | domain&gt;:&lt;port&gt;&lt;/path&gt;   * Example: http://10.0.1.100:8081/listenback ',
        required => '0',
    },
    'body' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'file_analysis_post' } = { 
        summary => 'Analyze File',
        params => $params,
        returns => 'InlineResponse2008',
        };
}
# @return InlineResponse2008
#
sub file_analysis_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/file';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/octet-stream');

    # header params
    if ( exists $args{'apikey'}) {
        $header_params->{'apikey'} = $self->{api_client}->to_header_value($args{'apikey'});
    }

    # header params
    if ( exists $args{'filename'}) {
        $header_params->{'filename'} = $self->{api_client}->to_header_value($args{'filename'});
    }

    # header params
    if ( exists $args{'filepath'}) {
        $header_params->{'filepath'} = $self->{api_client}->to_header_value($args{'filepath'});
    }

    # header params
    if ( exists $args{'user_agent'}) {
        $header_params->{'user_agent'} = $self->{api_client}->to_header_value($args{'user_agent'});
    }

    # header params
    if ( exists $args{'rule'}) {
        $header_params->{'rule'} = $self->{api_client}->to_header_value($args{'rule'});
    }

    # header params
    if ( exists $args{'workflow'}) {
        $header_params->{'workflow'} = $self->{api_client}->to_header_value($args{'workflow'});
    }

    # header params
    if ( exists $args{'batch'}) {
        $header_params->{'batch'} = $self->{api_client}->to_header_value($args{'batch'});
    }

    # header params
    if ( exists $args{'archivepwd'}) {
        $header_params->{'archivepwd'} = $self->{api_client}->to_header_value($args{'archivepwd'});
    }

    # header params
    if ( exists $args{'metadata'}) {
        $header_params->{'metadata'} = $self->{api_client}->to_header_value($args{'metadata'});
    }

    # header params
    if ( exists $args{'callbackurl'}) {
        $header_params->{'callbackurl'} = $self->{api_client}->to_header_value($args{'callbackurl'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2008', $response);
    return $_response_object;
}

#
# sanitized_file
#
# Download Sanitized Files
# 
# @param string $data_id The data_id comes from the result of &#x60;Analyze a file&#x60;. In case of sanitizing the content of an archive, the data_id of contained file can be found in &#x60;Fetch analysis result&#x60;. (required)
# @param string $apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
{
    my $params = {
    'data_id' => {
        data_type => 'string',
        description => 'The data_id comes from the result of &#x60;Analyze a file&#x60;. In case of sanitizing the content of an archive, the data_id of contained file can be found in &#x60;Fetch analysis result&#x60;.',
        required => '1',
    },
    'apikey' => {
        data_type => 'string',
        description => 'Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sanitized_file' } = { 
        summary => 'Download Sanitized Files',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub sanitized_file {
    my ($self, %args) = @_;

    # verify the required parameter 'data_id' is set
    unless (exists $args{'data_id'}) {
      croak("Missing the required parameter 'data_id' when calling sanitized_file");
    }

    # parse inputs
    my $_resource_path = '/file/converted/{data_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/octet-stream', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'apikey'}) {
        $header_params->{'apikey'} = $self->{api_client}->to_header_value($args{'apikey'});
    }

    # path params
    if ( exists $args{'data_id'}) {
        my $_base_variable = "{" . "data_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'data_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# webhook_status
#
# Query webhook status
# 
# @param string $data_id Either &#x60;data_id&#x60; or &#x60;batch_id&#x60;. (required)
# @param string $apikey Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                 (optional)
{
    my $params = {
    'data_id' => {
        data_type => 'string',
        description => 'Either &#x60;data_id&#x60; or &#x60;batch_id&#x60;.',
        required => '1',
    },
    'apikey' => {
        data_type => 'string',
        description => 'Generated &#x60;session_id&#x60; from [Login](#operation/userLogin) call can be used as an &#x60;apikey&#x60; for API calls that require authentication.                ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_status' } = { 
        summary => 'Query webhook status',
        params => $params,
        returns => 'InlineResponse2009',
        };
}
# @return InlineResponse2009
#
sub webhook_status {
    my ($self, %args) = @_;

    # verify the required parameter 'data_id' is set
    unless (exists $args{'data_id'}) {
      croak("Missing the required parameter 'data_id' when calling webhook_status");
    }

    # parse inputs
    my $_resource_path = '/file/webhook/{data_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'apikey'}) {
        $header_params->{'apikey'} = $self->{api_client}->to_header_value($args{'apikey'});
    }

    # path params
    if ( exists $args{'data_id'}) {
        my $_base_variable = "{" . "data_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'data_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2009', $response);
    return $_response_object;
}

1;
